{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About the project Jasonette is a different way of making native apps. Instead of programming an app on the device, you simply write a JSON file hosted on a server, and the Jasonette apps fetch and use it to build themselves on-demand whenever you open the app. Before we jump in, here's where you can stay in touch with the project community: \u25a0 Follow the project Twitter Blog @jasonclient Follow on Medium Github iOS Github Android Github Web Native Objective-C Implementation Native Java Implementation A Web implementation, written in JavaScript JASONETTE-iOS JASONETTE-Android JASONETTE-Web subscribe to newsletter Comprehensive newsletter on Important updates, milestones, new projects, and useful tips from the community. Subscribe (function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';}(jQuery));var $mcj = jQuery.noConflict(true); \u25a0 Ask the community For code related questions, ask on the forum to get more comprehensive answers. For quick chats, use the Slack channel. Slack Forum Ask questions and share tips. https://forum.jasonette.com Quickstart 1. Download Jasonette for iOS or Android 2. Write and host a JSON recipe that defines your app 3. Add the JSON URL to Jasonette to turn it into your app Step 1. Download Go download and come back, we'll wait. iOS Android iOS Setup Android Setup Step 2. Learn Watch the 2 videos below and you'll have learned everything you need to know to get started. The videos were shot using an iPhone, but it works exactly the same for Android. A. Do you know JSON? Before we dive in, do you know JSON? If not, just check out this tutorial , takes 2 minutes. B. Get a JSON server You'll be serving your entire app from a server, so you will need somewhere to host JSON, just like you need somewhere to host websites. There are many ways to do this: 1. Jasonette Web (web.jasonette.com) [Recommended] A hosted & social implementation of Jasonette-Web . Has all the useful features such as folders, markdown-based readme, bookmarking, version control, realtime editing, etc. Write and share as much JSON as you want. It's FREE. (Note: You DON'T need to use Jasonette Web to use Jasonette. This service is provided for free to help you get started quickly without having to set up your own JSON server. After all, all you need is JSON and the whole point of the framework is the portability of JSON) 2. Code hosting or pastebin sites You can also use Github or Pastebin . Not really recommended for development because these sites are NOT built for this type of usage . They actually discourage you from using them as API endpoint. Furthermore, their content is cached so you'll often keep getting old responses whenever you update your JSON content, which is a pain. However, you can use them AFTER you've finished editing, or use it for open sourcing though. Here's an example. 3. Quick Local Prototyping You can also use Jasonette-Web along with simple instant open source HTTP servers like the http-server project to roll your own Jasonette Web. 4. Plug into your existing server You can skip all this and set up your own web app with a JSON endpoint, or just plug into your existing web app. C. Learn the basics This video walks you through the basics of Jasonette, such as how it works, how to get started, etc. It was shot using iOS but it basically works the same for Android. D. Learn JASON syntax This video teaches you how to actually write a JSON markup to build sophisticated interactive layouts. Step 3. Learn more (Reference) Anatomy of a Jason view Learn the basic structure of a JASON view Just like HTML has basic tags such as body, div, span, li, etc, Jasonette has JSON based tags to describe the structure of a view. Components Learn component syntax Components are the most basic units of user interface, such as image, label, textarea, button, slider, etc. Layout Learn layouts In many cases we combine multiple components to construct a unit. We use layouts to do this. Link multiple views Learn linking Above three sections are all you need to know to display content in a view. But what if we want multiple views? We can link them using href . Actions Learn actions Actions define a task or a sequence of tasks you wish to run, such as network request, audio play, camera access, geolocation, displaying banners, etc. Templates Learn templates You can use templates to dynamically render data, such as remote network content, local data, and user input. In-depth Tutorials Here are some in-depth articles (Intro) How to build cross-platform mobile apps using nothing more than a JSON markup Jasonette Offline: Using offline features with Jasonette Building a SlackBot remote control app with Jasonette TabBar: How the bottom tab bar works Functional Programming in JSON: How Jasonette implements function call stacks purely in JSON, and how to use it Require: How $require action works Mixins: 2-part series. Remote Mixin : How to dynamically mix in multiple remote JSON objects into a single root JSON Self Mixin : How to mix in a subtree of a JSON object onto itself. Web Container: Introduction to Web Container Examples Actual JSON examples you can try out with Jasonette: Try examples here","title":"\u25a0 Getting started"},{"location":"#about-the-project","text":"Jasonette is a different way of making native apps. Instead of programming an app on the device, you simply write a JSON file hosted on a server, and the Jasonette apps fetch and use it to build themselves on-demand whenever you open the app. Before we jump in, here's where you can stay in touch with the project community:","title":"About the project"},{"location":"#follow-the-project","text":"Twitter Blog","title":"\u25a0 Follow the project"},{"location":"#ask-the-community","text":"For code related questions, ask on the forum to get more comprehensive answers. For quick chats, use the Slack channel. Slack Forum","title":"\u25a0 Ask the community"},{"location":"#quickstart","text":"1. Download Jasonette for iOS or Android 2. Write and host a JSON recipe that defines your app 3. Add the JSON URL to Jasonette to turn it into your app","title":"Quickstart"},{"location":"#step-1-download","text":"Go download and come back, we'll wait. iOS Android iOS Setup Android Setup","title":"Step 1. Download"},{"location":"#step-2-learn","text":"Watch the 2 videos below and you'll have learned everything you need to know to get started. The videos were shot using an iPhone, but it works exactly the same for Android.","title":"Step 2. Learn"},{"location":"#a-do-you-know-json","text":"Before we dive in, do you know JSON? If not, just check out this tutorial , takes 2 minutes.","title":"A. Do you know JSON?"},{"location":"#b-get-a-json-server","text":"You'll be serving your entire app from a server, so you will need somewhere to host JSON, just like you need somewhere to host websites. There are many ways to do this:","title":"B. Get a JSON server"},{"location":"#c-learn-the-basics","text":"This video walks you through the basics of Jasonette, such as how it works, how to get started, etc. It was shot using iOS but it basically works the same for Android.","title":"C. Learn the basics"},{"location":"#d-learn-jason-syntax","text":"This video teaches you how to actually write a JSON markup to build sophisticated interactive layouts.","title":"D. Learn JASON syntax"},{"location":"#step-3-learn-more-reference","text":"","title":"Step 3. Learn more (Reference)"},{"location":"#anatomy-of-a-jason-view","text":"Learn the basic structure of a JASON view Just like HTML has basic tags such as body, div, span, li, etc, Jasonette has JSON based tags to describe the structure of a view.","title":"Anatomy of a Jason view"},{"location":"#components","text":"Learn component syntax Components are the most basic units of user interface, such as image, label, textarea, button, slider, etc.","title":"Components"},{"location":"#layout","text":"Learn layouts In many cases we combine multiple components to construct a unit. We use layouts to do this.","title":"Layout"},{"location":"#link-multiple-views","text":"Learn linking Above three sections are all you need to know to display content in a view. But what if we want multiple views? We can link them using href .","title":"Link multiple views"},{"location":"#actions","text":"Learn actions Actions define a task or a sequence of tasks you wish to run, such as network request, audio play, camera access, geolocation, displaying banners, etc.","title":"Actions"},{"location":"#templates","text":"Learn templates You can use templates to dynamically render data, such as remote network content, local data, and user input.","title":"Templates"},{"location":"#in-depth-tutorials","text":"Here are some in-depth articles (Intro) How to build cross-platform mobile apps using nothing more than a JSON markup Jasonette Offline: Using offline features with Jasonette Building a SlackBot remote control app with Jasonette TabBar: How the bottom tab bar works Functional Programming in JSON: How Jasonette implements function call stacks purely in JSON, and how to use it Require: How $require action works Mixins: 2-part series. Remote Mixin : How to dynamically mix in multiple remote JSON objects into a single root JSON Self Mixin : How to mix in a subtree of a JSON object onto itself. Web Container: Introduction to Web Container","title":"In-depth Tutorials"},{"location":"#examples","text":"Actual JSON examples you can try out with Jasonette: Try examples here","title":"Examples"},{"location":"actions/","text":"Basics Expressing a view using JSON is pretty straightforward. However what makes Jasonette truly powerful is the ability to express functions that actually do something, entirely in JSON. We call it action . This could be anything from accessing the device features such as camera or addressbook, to making network requests. And you can compose them to carry out any sophisticated tasks. Not to mention being able to use inline Javascript within any JSON expression. Syntax Actions can take the following 5 attributes type : Specify action type . (note: THIS CANNOT BE A TEMPLATE EXPRESSION that needs to be evaluated. Use a static string.) options : Arguments to be passed into the action (optional) success : Another action to be called when the current action finishes. You can chain multiple actions to execute in sequence this way. (optional) error : You can handle exceptions by attaching error to an action. (optional) There are two ways of calling actions: You can directly attach actions to UI elements inline . In this case, the action will be executed when a user taps the element. You can define an action under actions registry and trigger it by name. In this case you not only can attach actions to UI elements but also can trigger them based on system events or call them from anywhere. First read through the explanation below to learn how to define actions inline. And after that, learn how to use \"trigger\" to trigger an action by name . Examples - Define Inline Network request and then render Make a network request and $render its content when it succeeds. { \"type\": \"label\", \"text\": \"refresh\", \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" } } } Network request and then render, with error handling Same as above, except display a banner when the request fails. { \"type\": \"label\", \"text\": \"refresh\", \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" }, \"error\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Error\", \"description\": \"Something went wrong.\" } } } } Return values You can access an action's return value by using the variable $jason from the next action (either the success or the error action). For example, $geo.get action returns the geolocation of the current device in the following format: { \"coord\": \"51.5032510,-0.1278950\" } Which means we can use this return value by accessing the $jason variable, using a template like this: { \"type\": \"$geo.get\", \"success\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Your current coordinate\", \"description\": \"{{$jason.coord}}\" } } } What kind of UI elements can have action handlers? action can be attached to various UI elements to respond to touch, but not all. CAN be attached to: menu - $jason.body.header.menu footer tabs - $jason.body.footer.tabs footer input - $jason.body.footer.input.left and $jason.body.footer.input.right Top level of a section item - Example: $body.sections[0].items[0] Layer item - Example - $body.layers[0].items[0] Button component - Normally you need to attach actions at at the item level as described above. But if you want to attach an action at a component level, you can use \"type\": \"button . CANNOT be attached to: CANNOT attach actions to a label or image component unless it's at item level. Here's an example that DOESN'T work:: { \"items\": [{ \"type\": \"vertical\", \"components\": [{ \"type\": \"label\", \"text\": \"touch me\", \"action\": { ... } }] }] } label and any other non-button type components do not respond to touch events directly. This is why above code won't respond to touch, since it's attaching the action to the label. However the following code WILL respond to touch: { \"items\": [{ \"type\": \"label\", \"text\": \"touch me\", \"action\": { ... } }] } This is because the label is at item level. Jasonette automatically wraps components with a layout when they're at item level. Which means, internally above code is the same as: { \"items\": [{ \"type\": \"vertical\", \"action\": { ... }, \"components\": [{ \"type\": \"label\", \"text\": \"touch me\", }] }] } Notice how the action is tied to the vertical layout, which is at item level. So this will respond to touch. So what if you really want to attach an action to a component, but the component is NOT at item level? => Use buttons , like this: { \"items\": [{ \"type\": \"vertical\", \"components\": [{ \"type\": \"button\", \"url\": \"https://.....\", \"action\": { ... } }] }] } Where to use actions? Actions are not just for UI components. It can be triggered in various ways, and used for various situations: Handling user interaction Handling another action's result Handling system events Let's go through each: A. Handling user interaction \u25a0 User touches an item Attach action attribute to items , menu , layers , etc. to react to touch. (Read API documentation to see if a component supports action attribute) In the example below, an action is attached to a menu , so it gets triggered when user touches it. { \"head\": { ... }, \"body\": { \"header\": { \"menu\": { \"text\": \"Press me\", \"action\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Good job!\", \"description\": \"You know how to press a button!\" } } } }, ... } } \u25a0 User changes a form input value There are some form input components such as slider , search , etc. which trigger an action whenever its value changes. Just attach action attribute to handle that event. In the example below, an action is attached to a slider , so we can display a banner with the current value whenever user changes the value. { ... { \"type\": \"slider\", \"name\": \"gauge\", \"action\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Current value\", \"description\": \"{{$get.gauge}}\" } } } ... } B. Handling another action's result All actions can have a success and an error attribute. success points to an action to be triggered after the current action finishes. error points to an action to be triggered if something goes wrong with the current action. By using success , we can chain multiple actions. In the example below, a $network.request action gets called when a user touches the label, renders the result when it succeeds ( success ), and displays an error message when something goes wrong ( error ). { ... { \"type\": \"label\", \"text\": \"Touch me\", \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://www.jasonclient.org/items.json\" }, \"success\": { \"type\": \"$render\" }, \"error\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Error\", \"description\": \"Uh oh, something went wrong.\" } } } } ... } C. Handling system events System events are events automatically triggered by the system, instead of through user input. You can attach any action to system events, such as $load , $show , $foreground , etc. Here's a brief example: { \"$jason\": { \"head\": { \"actions\": { \"$load\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" } }, \"$show\": { \"type\": \"$reload\" }, \"$foreground\": { \"type\": \"$reload\" } } }, ... } } Learn more about system events Triggering actions When you define an action inline, these actions have no name. Therefore you cannot reuse them form elsewhere. To be able to reuse actions, you need to register them under actions registry, and then trigger them by name. Syntax To trigger an action, you can use the following syntax: \"trigger\" : Trigger an action by name, registered under the actions registry. (note: THIS CANNOT BE A TEMPLATE EXPRESSION that needs to be evaluated. You must use a static string) \"options\" (optional): same as inline actions \"success\" (optional): executed when the triggered action returnes via $return.success action \"error\" (optional): executed when the triggered action returns via $return.error action They look similar to inline action definition except that you use trigger instead of type . 1. Define an action under the actions registry First, you need to define the action inside head.actions . In this case we name it refresh_view : { \"$jason\": { \"head\": { \"actions\": { \"refresh_view\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" } } }, ... } 2. Trigger it by name Second, to actually trigger it by name, just attach an action with a trigger attribute, like this: { \"type\": \"label\", \"text\": \"Refresh\", \"action\": { \"trigger\": \"refresh_view\" } } Cool thing about this is, now you can trigger this action from anywhere in your code. You can trigger it manually from another action, or you could make it so that a system event automatically triggers the action. Here's an example where refresh_view is triggered whenever the view comes into focus ( $show ) or comes back from background ( $foreground ): { \"$jason\": { \"head\": { \"actions\": { \"$show\": { \"trigger\": \"refresh_view\" }, \"$foreground\": { \"trigger\": \"refresh_view\" }, \"refresh_view\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" } } }, ... } Here's an example where an action triggers another action ( refresh sets the cache, and then triggers fetch ): { \"$jason\": { \"head\": { \"actions\": { \"refresh\": { \"type\": \"$cache.set\", \"options\": { \"items\": [] }, \"success\": { \"trigger\": \"fetch\" } }, \"fetch\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" } }, ... } 3. Return from subroutine when finished We saw from above that actions can trigger other actions. But so far these action call chain examples have been one-way trip only, which means once an action triggers another action its life is over. You can't do things like making a call and waiting for it to return with its result, and then continue on where it left off, using that value. Let's look at the refresh example from above: { \"$jason\": { \"head\": { \"actions\": { \"refresh\": { \"type\": \"$cache.set\", \"options\": { \"items\": [] }, \"success\": { \"trigger\": \"fetch\" } }, \"fetch\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" } } ... } ... } The problem with this is each action does more than one thing: refresh resets the cache AND triggers fetch fetch makes a network request AND renders the result. Maybe we want to add another action that resets the cache before doing something. Then, we need to add the same $cache.set action again. Maybe we want to make the network request but do something else with the result instead of rendering. It becomes difficult to reuse these actions since one action does more than one thing. To solve this problem, we can break these actions out into self-contained modules so that: One action only does one thing. Each action ends by returning its result instead of triggering another action using $return.success or $return.error actions. Here's the solution: { \"$jason\": { \"head\": { \"actions\": { \"reset\": { \"type\": \"$cache.set\", \"options\": { \"items\": [] }, \"success\": { \"type\": \"$return.success\" } }, \"refresh\": { \"trigger\": \"reset\", \"success\": { \"trigger\": \"fetch\", \"success\": { \"type\": \"$render\" } } }, \"fetch\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$return.success\" } } ... } ... } Here, the reset action only resets the cache. And fetch action only makes a network request and returns its result. (No $render) Lastly the refresh action functions as the main program that triggers each action one after another (triggers reset , then triggers fetch , and finally executes $render ) When to use trigger vs. defining actions inline In most cases it's recommended that you define your actions under actions registry and trigger them using \"trigger\" . For example, instead of: { \"$jason\": { \"head\": { }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"item 1\", \"action\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Banner\", \"description\": \"Pressed item\" } } }, { \"type\": \"label\", \"text\": \"item 2\", \"action\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Banner\", \"description\": \"Pressed item\" } } }, { \"type\": \"label\", \"text\": \"item 3\", \"action\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Banner\", \"description\": \"Pressed item\" } } }] }] } } } You may want to define the action inside head.actions , like this: { \"$jason\": { \"head\": { \"actions\": { \"show_banner\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Banner\", \"description\": \"Pressed item\" } } } }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"item 1\", \"action\": { \"trigger\": \"show_banner\" } }, { \"type\": \"label\", \"text\": \"item 2\", \"action\": { \"trigger\": \"show_banner\" } }, { \"type\": \"label\", \"text\": \"item 3\", \"action\": { \"trigger\": \"show_banner\" } }] }] } } } Benefit 1 As you can see above, using trigger lets you define a single action once and reuse it from multiple places in your view. It removes redundant code. Benefit 2 When you define an action inline, its behavior is fixed. For example, the show_banner action example above only does one thing: It displays a banner that says \"Pressed item\". However in many cases we want to write one action and reuse them for various purposes. Maybe we want to display a banner that says \"Pressed item 1\", or \"Pressed item 2\". { \"$jason\": { \"head\": { \"actions\": { \"show_banner\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Banner\", \"description\": \"Pressed item {{$jason.item}}\" } } } }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"item 1\", \"action\": { \"trigger\": \"show_banner\", \"options\": { \"item\": \"1\" } } }] }] } } } Declaring actions There are two ways you can call actions: 1. Inline action Attach action attributes directly to UI elements 2. Action registry Define actions inside $jason.head.actions and call them by name Inline Action Inline actions are basically what we've been talking about so far. You directly attach an action to events, UI components, and another action. Here's an example: { ... \"type\": \"label\", \"action\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Hello\", \"description\": \"World\" } } ... } Action Registry We can define an action once and refer to them whenever we need to, instead of writing one for every situation. \u25a0 Comparison with inline actions For example, here's an inline action example. We display multiple items , and each item has the same action attribute content. { \"$jason\": { \"head\": { ... }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"This is row 1\", \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.org/submit\", \"method\": \"POST\" }, \"success\": { \"type\": \"$render\" } } }, { \"type\": \"label\", \"text\": \"This is row 2\", \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.org/submit\", \"method\": \"POST\" }, \"success\": { \"type\": \"$render\" } } }, { \"type\": \"label\", \"text\": \"This is row 3\", \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.org/submit\", \"method\": \"POST\" }, \"success\": { \"type\": \"$render\" } } }] }] } } } Below we have the same example, but using $jason.head.actions instead of re-defining the same action every time inline: { \"$jason\": { \"head\": { ... \"actions\": { \"submit_item\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.org/submit\", \"method\": \"POST\" }, \"success\": { \"type\": \"$render\" } } } }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"This is row 1\", \"action\": { \"trigger\": \"submit_item\" } }, { \"type\": \"label\", \"text\": \"This is row 2\", \"action\": { \"trigger\": \"submit_item\" } }, { \"type\": \"label\", \"text\": \"This is row 3\", \"action\": { \"trigger\": \"submit_item\" } }] }] } } } Here's what's going on: Declare an action under $jason.head.actions (in this case we've named it submit_item ). Then we trigger the action from anywhere using the name. \u25a0 System events Some actions are automatically triggered by the system when a certain event occurs. When you wish to take advantage of these, simply add them to actions . They are: 1. $load $load gets called once automatically when the view loads for the first time. Here's an example where we make a network request when the view loads, and then render the response using the template. { ... \"$load\": { \"type\": \"$network.request\", \"options\": { \"url\": \"http://jasonclient.org/req.json\" }, \"success\": { \"type\": \"$render\" } } ... } 2. $show $show gets called automatically whenever the view appears. For example when coming back from a modal view, coming back from its next view via back button, etc. Here's an example { ... \"$show\": { \"type\": \"$reload\" }, ... } 3. $foreground $foreground is called automatically whenever the app comes back from the background state. { ... \"$foreground\": { \"type\": \"$reload\" }, ... } 4. $pull $pull gets called whenever user makes a pull to refresh action { ... \"$pull\": { \"type\": \"$reload\" }, ... } API \u2500\u2500 REQUIRE \u2500\u2500 $require The $require action imports remote JSON files in parallel. { \"type\": \"$require\", \"options\": { \"profiles\": [\"https://...\", \"https://...\", \"https://\"], \"items\": [\"https://...\", \"https://...\", \"https://...\"] }, \"success\": { \"type\": \"$render\" } } It works similar to $network.request but with a few differences: It can fetch multiple remote JSON files in parallel. It is only for making simple GET requests. No POST/PUT/DELETE requests, etc. \u25a0 options The options object defines what the return value should look like. For example, the following $require action would fetch the contents of https://hello.world/1.json and then attach it to the profile attribute. { \"type\": \"$require\", \"options\": { \"profile\": \"https://hello.world/1.json\" } } When you chain this action with another action, you should be able to access the contents of https://hello.world/1.json via {{$jason.profile}} . The value in the key/value pair can take the form of: a single url: \"profile\": \"https://...\" an array of urls: \"profiles\": [\"https://...\", \"https://...\", \"https://...\"] \u25a0 return value returns the constructed options object. For example, let's say https://blahblah.blah/1.json and https://blahblah.blah/2.json each contained the following JSON files respectively: { \"items\": [\"abc\", \"def\", \"ghi\"] } { \"items\": [\"cba\", \"fed\", \"ihg\"] } We can fetch them in parallel like this: { \"type\": \"$require\", \"options\": { \"items1\": \"https://blahblah.blah/1.json\", \"items2\": \"https://blahblah.blah/2.json\" }, \"success\": { \"type\": \"$render\" } } As a result, when we are ready to $render , the $jason value will be: { \"items1\": { \"items\": [\"abc\", \"def\", \"ghi\"] }, \"items2\": { \"items\": [\"cba\", \"fed\", \"ihg\"] } } \u25a0 note Unlike $set or $cache.set , the $require action on its own doesn't persist the data in any way. So if you want to persist them to a local variable or a cache variable, you will need to chain the result to these actions and take care of assignment that way. Here's an example: { \"type\": \"$require\", \"options\": { \"profiles\": [\"https://...\", \"https://...\", \"https://\"] }, \"success\": { \"type\": \"$set\", \"options\": { \"profiles\": \"{{$jason.profiles}}\" } } } \u2500\u2500 FUNCTIONAL \u2500\u2500 Just like functions in any other programming language, you can call an action from an action, wait for it to return, and use the return value to continue where it left off. $lambda Call another action by name (This is how trigger is implemented internally) { \"type\": \"$lambda\", \"options\": { \"name\": \"refresh\", \"options\": { \"url\": \"https://jasonbase.com/things/3nf.json\" } }, \"success\": { \"type\": \"$render\" }, \"error\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Error\", \"description\": \"Something went wrong\" } } } Above code is the same as: { \"trigger\": \"refresh\", \"options\": { \"url\": \"https://jasonbase.com/things/3nf.json\" }, \"success\": { \"type\": \"$render\" }, \"error\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Error\", \"description\": \"Something went wrong\" } } } In most cases you may want to use trigger but sometimes it's useful to use $lambda directly, for example if you want to dynamically trigger different actions. Example: { \"type\": \"$lambda\", \"options\": { \"name\": \"{{action_name}}\", \"options\": { \"url\": \"https://jasonbase.com/things/3nf.json\" } }, ... } \u25a0 options name: the name of the action to trigger, registered under actions registry options: options object to pass to the next action \u25a0 return value Whatever the triggered action returns via $return.success or $return.error $return.success Unless you explicitly call $return.success or $return.error , all triggered actions terminate when they reach the end of the call chain. To return to the action which called the current action with a success state, we need to use $return.success . Then the caller action will resume where it left off and keep executing its success action. \u25a0 options The return value to pass back to the caller action. If not specified, it automatically returns the current $jason value \u25a0 no success or error of its own none : Since $return.success is an action solely designed for returning the control back to the caller action, $return.success itself does not have success or error actions. \u25a0 example In the example below, the display_banner triggers fetch , and then displays a banner using the return value $jason . Notice how the $lambda action's success takes over after the fetch action returns via $return.success . { \"display_banner\": { \"type\": \"$lambda\", \"options\": { \"name\": \"fetch\" }, \"success\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"The number of items:\", \"description\": \"{{$jason.items.length}}\" } } }, \"fetch\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/3nf.json\" }, \"success\": { \"type\": \"$return.success\", \"options\": { \"items\": \"{{$jason}}\" } } } } Again, this is the same as using trigger : { \"display_banner\": { \"trigger\": \"return_homer_simpson\", \"success\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"The number of items:\", \"description\": \"{{$jason.items.length}}\" } } }, \"fetch\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/3nf.json\" }, \"success\": { \"type\": \"$return.success\", \"options\": { \"items\": \"{{$jason}}\" } } } } $return.error Pretty much the same as $return.success , except that it returns the control back to the caller action's error action. \u2500\u2500\u2500\u2500 VIEW \u2500\u2500\u2500\u2500 Actions related to drawing views $reload Refreshes the view completely by re-fetching content from the current URL. { \"items\": [{ \"type\": \"label\", \"text\": \"Refresh\", \"action\": { \"type\": \"$reload\" } }] } \u25a0 options none \u25a0 return value none This will reload the page when a user taps on the item . $render Renders a template with data \u25a0 options data : Data to render. If not specified, it's the $jason value at the point $render was called. template : Template name to render. If not specified, it will look for $jason.head.templates.body type : \"html\" | \"json\" (Default is json . See html templating to learn more about how to render an HTML string natively using Jason) \u25a0 return value none \u25a0 example Rendering return value from the previous action By default $render renders the data returned from its previous action. { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/gbe.json\" }, \"success\": { \"type\": \"$render\" } } For example, let's say the network request returns the following result: { \"name\": \"Mr. Fisherman\", \"image\": \"http://i.giphy.com/OmK8lulOMQ9XO.gif\", \"status\": \"Busy fishing on the iPhone\" } All Jasonette actions store their return values under $jason object when they return. So we can access above value using the $jason variable. Here's how we would write the body template: { \"$jason\": { \"head\": { ... \"templates\": { \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"image\", \"url\": \"{{$jason.image}}\" }, { \"type\": \"label\", \"text\": \"{{$jason.text}}\" }, { \"type\": \"label\", \"text\": \"{{$jason.status}}\" }] }] } ... } } Specifying data when rendering In most cases you will use the above method--rendering data passed in as a return value from the previous action. However, you can also use $render as standalone, by manually specifying its data, like this (You rarely need to use this method): { \"type\": \"$render\", \"options\": { \"data\": [{ \"name\": \"Ethan\", \"id\": \"1\" }, { \"name\": \"Jason\", \"id\": \"2\" }, { \"name\": \"Jasonette\", \"id\": \"3\" }] } } Rendering the body template In most cases you will use $render without manually specifying the template, because it will assume you're rendering the body template. For example, a typical $render looks like this: { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.com/req.json\" }, \"success\": { \"type\": \"$render\" } } If no template option is specified, $render will look for a body template inside $jason.head.templates and use that to render the data. For example, from the following JSON, { \"$jason\": { \"head\": { \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason}}\": { \"type\": \"label\", \"text\": \"{{text}}\" } } }] } ... } } When $render runs, it will take the JSON markup inside $jason.head.templates.body , render it using the data, onto the view. Manually specifying the template to render But sometimes you can also specify the template name. For example, we may want to render a template named empty instead of the default body template: { \"$jason\": { \"head\": { \"templates\": { \"body\": { .... }, \"empty_template\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Empty view\" }] }] } ... } } In this case we could pass {\"template\": \"empty_template\"} as an option, like this: { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.com/req.json\" }, \"success\": { \"type\": \"$render\" }, \"error\": { \"type\": \"$render\", \"options\": { \"template\": \"empty_template\" } } } How is $render different from $reload ? $render redraws an existing template you already downloaded, using dynamic data. $reload completely refreshes the current URL. Here's an example scenario: Jason view loads and fetches a JSON markup from the server ( main.json ) main.json makes an API request to Twitter to fetch Tweets. (https://api.twitter.com/1.1/statuses/user_timeline.json) Then it renders the result using its body template, which is under $jason.head.templates.body in main.json . From this point on, calling $render simply takes the $jason.head.templates.body we have in memory, and renders whatever data we pass in. However calling $reload will make a full refresh, going back to step 1. Conclusion In most cases, you call $render at the end of an action call chain, rendering the $jason return value from its preceding action. Also, in most cases $render is used without specifying template or data options. Just don't forget to have a template under $jason.head.templates.body , since $render will automatically render that. Also, remember that you can access the return value using $jason from the template. $snapshot Takes a snapshot of the currently visible screen \u25a0 options none \u25a0 return value The return value is in this format: { \"data\": \"....\", \"data_uri\": \"....\", \"content_type\": \"image/jpeg\", } Returns the snapshot as raw data under data attribute. Also returns data_uri attribute, which contains the data-uri You can utilize the data by passing it to another action using success The content_type is \"image/jpeg\" \u25a0 example Take a snapshot and share { \"type\": \"$snapshot\", \"success\": { \"type\": \"$util.share\", \"options\": { \"items\": [ { \"type\": \"image\", \"data\": \"{{$jason.data}}\" } ] } } } Share sheet SMS example $href An action version of href . Works the same way, but just another way to invoke href. Use this when a component doesn't support href attribute directly but supports an action . Sometimes it's useful when you want to invoke href without displaying a disclosure indicator. (href comes with a disclosure indicator by default) \u25a0 options It's the same set of attributes as href since it simply invokes the href when triggered. url the url to transition to view can be \"web\" | \"app\" | \"jason\" (default) options Works the same way as the options object for href transition can be \"modal\" | \"fullscreen\" | \"push\" (default) preload A preload JASON markup to render before the next view renders. \u25a0 \"success\" callback Normally when using the $href action, it just transitions to the next view. However you can use the success callback to the $href action **along with $ok action to implement a 2-way communication between views. To learn more, read the $ok action . Note: Not supported for a regular href . Only supported for $href action. \u25a0 return value none \u25a0 example 1 { \"type\": \"label\", \"text\": \"trigger href\", \"action\": { \"type\": \"$href\", \"options\": { \"url\": \"...\", \"transition\": \"...\", \"view\": \"...\" } } } is same as: { \"type\": \"label\", \"text\": \"trigger href\", \"href\": { \"url\": \"...\", \"transition\": \"...\", \"view\": \"...\" } } The only difference is: in case of items the second option displays a disclosure indicator since we're directly using href \u25a0 example 2 This example opens Instagram app using its URL scheme { \"$jason\": { \"head\": { \"title\": \"Take a photo on instagram\" }, \"body\": { \"sections\": [ { \"items\": [ { \"type\": \"label\", \"text\": \"Take a photo on Instagram\", \"action\": { \"type\": \"$href\", \"options\": { \"url\": \"instagram://camera\", \"view\": \"app\" } } } ] } ] } } } \u25a0 example 3. Using preload Preload lets you specify a JSON markup for the next view before the next view loads. This helps with smooth transition. Here's an example: { \"type\": \"$href\", \"options\": { \"url\": \"https://www.jasonbase.com/dhen3\", \"preload\": { \"background\": \"#ff0000\", \"layers\": [{ \"type\": \"image\", \"url\": \"file://loading.gif\", \"style\": { \"top\": \"50%-25\", \"left\": \"50%-25\", \"width\": \"50\", \"height\": \"50\" } }] } } } Notice that the preload contains an entire view representation of a view. it DOES NOT contain the head part. preload is purely for displaying a temp view until the real view loads. $close Close a modal (works when the currently view is a modal) \u25a0 options none \u25a0 return value none $back Transition one step back from the current view If the current view is a modal, it closes the current view Otherwise it slides back to the previous view \u25a0 options none \u25a0 return value none $ok Similar to $back , however allows for a return value. This means you can send back a return value to the previous view using $ok . Here's how to get it to work: 1. Close the current view using $ok Remember to attach the return value payload under options . Otherwise it's the same as $back . { \"type\": \"$ok\", \"options\": { \"selection\": \"Americano\" } } 2. The previous view processes the return value using the success callback Two points: The caller view must have opened the closing view with an $href action. The $href action must have a success callback (Otherwise how would you process it?) { \"type\": \"$href\", \"options\": { \"url\": \"file://selection.json\" }, \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Selected\", \"description\": \"You have selected {{$jason.selection}}\" } } } Notice that the options payload from the previous $ok action is accessible as $jason in the success callback. $scroll Programmatically scroll to top or bottom of a view \u25a0 options position : top or bottom \u25a0 return value none Example { \"type\": \"$scroll\", \"options\": { \"position\": \"bottom\" } } Functional example Github Search with scroll feature: https://jasonbase.com/things/1KQB \u2500\u2500 NETWORK \u2500\u2500 $network.request Make GET/POST/PUT/DELETE network requests \u25a0 options url : The url to access. method : \"get\" | \"post\" | \"put\" | \"delete\" | \"head\" | \"patch\" . data : Parameters to send along with the url (optional) header : Headers to attach to every request if any (optional) timeout : network request time out in seconds (optional). data_type : Specifies how the fetched response will be processed. Can be json , html , rss , or raw . json assumes that the return value will be in JSON format, whereas raw expects a plain text. You can use raw type when fetching a plain text or CSV. html is for fetching HTML content and especially required when you need to utilize HTML requests associated with cookies/sessions. rss is used to fetch RSS. The default is json . content_type : Specifies which format the parameters will be sent as. By default it's sent as a form object, but in case you specify {\"content_type\": \"json\"} the data will be submitted as a JSON string. \u25a0 return value Whatever the server returns \u25a0 examples Example 1. Simple JSON GET request Here's a simple example of GET request, fetching JSON. We don't need to specify {\"type\": \"get\"} here since the default type is \"get\" { \"type\": \"$network.request\", \"options\": { \"url\": \"http://plasticfm.herokuapp.com/things/3.json\" }, \"success\": { \"type\": \"$render\" } } Example 2. More complex JSON requests This time we're going to make a POST request, with all the data and header { \"type\": \"$network.request\", \"options\": { \"url\": \"http://www.jasonbase.com/messages.json\", \"method\": \"post\", \"data\": { \"user_id\": \"fI9\", \"message\": \"Hello there\" }, \"header\": { \"auth_token\": \"fnekfla98dls9sNFK0nf3\" } }, \"success\": { \"type\": \"$render\" }, \"error\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Error\", \"description\": \"Uh oh, something went wrong\" } } } Example 3. HTML GET request You can also make HTML type requests. Here's a request with html data_type. { \"type\": \"$network.request\", \"options\": { \"url\": \"https://news.ycombinator.com/newest\", \"dataType\": \"html\" }, \"success\": { \"type\": \"$render\", \"options\": { \"type\": \"html\" } } } It fetches the url as html type, and then renders it using the html type parser. See templates for more details on how to render HTML content in Jasonette. Example 4. HTML POST request with cookies Dealing with cookies is simple. All you need to do is make the request to create a session. Jason will automatically store the returned cookie, and then attach it to all subsequent requests. Here's an example of signing into a website by making an HTML data_type $network.request call: { \"type\": \"$network.request\", \"options\": { \"url\": \"https://news.ycombinator.com/login\", \"method\": \"post\", \"data\": { \"acct\": \"{{$get.username}}\", \"pw\": \"{{$get.password}}\" }, \"data_type\": \"html\" }, \"success\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://news.ycombinator.com/saved?id={{$get.username}}\", \"data_type\": \"html\" }, \"success\": { \"type\": \"$render\", \"options\": { \"type\": \"html\" } } } } It first signs into the site by making a POST request of {\"data_type\": \"html\"} . Then it stores the cookie returned from the server. Once the login succeeds, it makes a GET request of {\"data_type\": \"html\"} to an actual content API. The cookie from the previous step is automatically applied to the request. $network.upload Upload data to cloud providers. Currently supports S3, but feel free to extend \u25a0 options type : \"s3\" (Currently only supports s3) bucket : s3 bucket name path : the s3 path to upload the file sign_url : To upload files to s3, you need to acquire a signed url from S3 first, and then upload it to that URL. \u25a0 return value file_name : a randomly generated filename. When $network.upload is called, it automatically generates a random, hashed filename to ensure uniqueness, and then stores the file onto the cloud provider with that name. We need this attribute to keep track of the data we've just uploaded. For example, we may want to store the filename somewhere so we can access this file later. \u25a0 example This example takes a photo and uploads to S3. { \"type\": \"$media.camera\", \"options\": { \"quality\": \"0.4\" }, \"success\": { \"type\": \"$network.upload\", \"options\": { \"type\": \"s3\", \"bucket\": \"fm.ethan.jason\", \"data\": \"{{$jason.data}}\", \"path\": \"\", \"sign_url\": \"https://imagejason.herokuapp.com/sign_url\" }, \"success\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://imagejason.herokuapp.com/post\", \"method\": \"post\", \"data\": { \"bucket\": \"fm.ethan.jason\", \"path\": \"/\", \"filename\": \"{{$jason.filename}}\" } }, \"success\": { \"type\": \"$reload\" } } } } Here's what's going on above: 1. The client takes a photo using the $media.camera action and passes the raw data to $network.upload as $jason . 2. The $network.upload first looks at options.sign_url and makes a request to get the signed url. 3. The server should return a signed url for S3. The sign_url attribute is the URL to your server, and your server should generate a signed url and return the result in the following format: { \"$jason\": \"https://s3.amazonaws.com/...../...?AWSAccessKeyId=.....&Expires=.....&Signature=.....\"} See the full server side code to learn how to generate signed urls. 4. The client then uploads the content passed in as data to the just generated signed url, using a randomly generated filename. 5. Once the upload finishes, the $network.upload returns the filename generated from step 3. 6. Then it stores the filename to our server by making a POST $network.request to https://imagejason.herokuapp.com/post Check out the full code on Github: s3-upload-example \u2500\u2500 SESSION \u2500\u2500 Check out a functional demo app with backend server, with user accounts session-example $session.set $session.set takes care of token authentication to authenticate into any mobile API. You need to call $session.set after a $network.request action to an authentication endpoint, which returns an authentication token. Sessions are tied to domain, which means as long as you authenticate with a domain, all other URLs under the same domain will use the same token therefore you won't need to re-authenticate for every URL under the same domain. For cookie based HTML authentication, see Example 4 from $network.request above . \u25a0 options domain : the domain to set the session for (example: \"jasonbase.com\") header : headers to attach to every future $network.request to the specified domain. body : body parameters to attach to every future $network.request to the specified domain. \u25a0 return value none \u25a0 example Here's an example: \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://sessionjason.herokuapp.com/users/sign_in.json\", \"method\": \"post\", \"data\": { \"user[email]\": \"{{$get.email}}\", \"user[password]\": \"{{$get.password}}\" } }, \"success\": { \"type\": \"$session.set\", \"options\": { \"domain\": \"sessionjason.herokuapp.com\", \"header\": { \"X-User-Email\": \"{{$jason.email}}\", \"X-User-Token\": \"{{$jason.authentication_token}}\" } }, \"success\": { \"type\": \"$href\", \"options\": { \"url\": \"https://sessionjason.herokuapp.com/posts.json\", \"transition\": \"replace\" } } }, \"error\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Enter credentials\", \"description\": \"Please enter both email and password\" } } } Let's walk through each step. The first action is $network.request . It makes a POST request to https://sessionjason.herokuapp.com/users/sign_in.json , to which the server returns the following JSON as a response: { \"id\":2, \"email\":\"ethan@ethan.fm\", \"created_at\":\"2016-10-14T22:55:00.664Z\", \"updated_at\":\"2016-10-15T05:22:41.730Z\", \"authentication_token\":\"fnekz4hf7ghw95m6ks0rf01j\" } Next, we proceed to the next action, which is $session.set . Here we use the return value from the $network.request and set the header. This stores the header object for the specified domain (session.herokuapp.com), and this stored header will be attached to all future $network.request to this domain. The header to be stored will look like this: { \"header\": { \"X-User-Email\": \"ethan@ethan.fm\", \"X-User-Token\": \"fnekz4hf7ghw95m6ks0rf01j\" } } After the $session.set , it goes to the next action $href . This transitions to https://sessionjason.herokuapp.com/posts.json . This time, the network request will automatically attach the stored header to the request. The server will recognize the authentication token and respond with the actual posts.json . $session.reset This action lets you clear sessions for a specified domain. Can be used for both token authentication and web authentication via cookies For token authentication, it clears your headers and body parameters objects tied to the domain, created through $session.set . For web requests (html), it clears your cookie tied to the domain, created through html type $network.request , as described here . \u25a0 options url : The url from which to sign out. domain : The domain from which to sign out (used for APIs) data : Parameters to send along with the url (optional) type : \"html\" | \"json\" (Default is \"json\") \u25a0 examples Example 1. Signing out of token authentication No need to specify type , since it's json by default. { \"type\": \"$session.reset\", \"options\": { \"domain\": \"sessionjason.herokuapp.com\" }, \"success\": { \"type\": \"$reload\" } } \u25a0 return value none Example 2. Signing out of a website by clearing cookies Just set the options.type as html . { \"type\": \"$session.reset\", \"options\": { \"domain\": \"http://news.ycombinator.com\", \"type\": \"html\" }, \"success\": { \"type\": \"$reload\" } } Check out a functional demo app with backend server, with user accounts session-example \u2500\u2500 VARIABLE \u2500\u2500 Use $set and $get to set and get local variables. Local variables are valid only within the current view and only stays on the memory. $set Set local variables. \u25a0 options key:value pairs. The key is the variable name, and the value is the variable's value. \u25a0 return value none \u25a0 example In the following example, the $set action sets the value of the two local variables firstname and lastname as ethan and gliechtenstein , respectively. { \"type\": \"$set\", \"options\": { \"firstname\": \"ethan\", \"lastname\": \"gliechtenstein\" } } This is how you set a variable. We are setting local variables firstname and lastname to ethan and gliechtenstein respectively. do something after setting the local variable If you're using a local variable in your body template and wish to update the view to reflect the updated local variable, you need to call $render . For example you can add a success attribute to above action to redraw the view after update, like this: { \"type\": \"label\", \"text\": \"{{$get.firstname}} {{$get.lastname}}\", \"action\": { \"type\": \"$set\", \"options\": { \"firstname\": \"ethan\", \"lastname\": \"gliechtenstein\" }, \"success\": { \"type\": \"$render\" } } } $get You can access local variables by using a template expression {{$get.VARIABLE_NAME}} Normally, the usage flow is: Set a variable using $set action Use the variable from template through {{$get.VARIABLE_NAME}} expression. \u25a0 example Once you set firstname and lastname like we did above, we can use them like this: [ { \"type\": \"label\", \"text\": \"{{$get.firstname}}\" }, { \"type\": \"label\", \"text\": \"{{$get.lastname}}\" } ] Here's a full usage example using both $set action and $get expression. { \"$jason\": { \"head\": { \"actions\": { \"$load\": { \"type\": \"$set\", \"options\": { \"bar\": \"#\" }, \"success\": { \"type\": \"$render\" } }, \"$pull\": { \"type\": \"$set\", \"options\": { \"bar\": \"{{$get.bar+'#'}}\" }, \"success\": { \"type\": \"$render\" } } }, \"templates\": { \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"{{$get.bar}}\" }] }] } } } } } Here's what's going on: When the view loads ( $load system event), it sets the local variable bar 's value as \"#\", then renders the template with a label that displays the variable bar ( {{$get.bar}} ). When the user makes a pull to refresh gesture ( $pull event), it appends another \"#\" to bar and then renders again. \u2500\u2500 CACHE \u2500\u2500 Cache lets you persist and retrieve content. Unlike local variables, it will stay even when you close the app and come back. Cache vs. Local variable Cache and local variables are both sandboxed per view url. Therefore anything you store to cache and local variable is stored just for that view. Local variables are only on memory so will go away when the view refreshes. But cache is stored persistently and stays until you overwrite or reset it, even if the app is killed and restarted. Write $cache.set action is used to store to cache. \u25a0 options key:value pairs. The key is the cache variable name, and the value is the variable's value. \u25a0 return value returns the updated $cache object, which looks like this: { \"items\": [...] } \u25a0 examples Example 1. Set cache In the following example, it first makes a $network.request , and then takes its return value {{$jason}} and stores it to cache using the $cache.set action. { \"type\": \"$network.request\", \"options\": { \"url\": \"http://jasonclient.org/api/items.json\" }, \"success\": { \"type\": \"$cache.set\", \"options\": { \"items\": \"{{$jason}}\" } } } Example 2. Set cache and use the updated value Simply setting the cache doesn't update the view. Let's try to render the updated result. { \"type\": \"$network.request\", \"options\": { \"url\": \"http://jasonclient.org/api/items.json\" }, \"success\": { \"type\": \"$cache.set\", \"options\": { \"items\": \"{{$jason}}\" }, \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Items fetched\", \"description\": \"{{$cache.items.length}}\" } } } } Read Directly access $cache variable from a template expression, for example {{$cache.items}} . \u25a0 example For example, you could store a tracking_keyword value locally and automatically perform a search whenever the document loads. { \"type\": \"$oauth.request\", \"options\": { \"url\": SEARCH_URL, \"data\": { \"search_query\": \"{{$cache.tracking_keyword}}\" } } } Reset Use $cache.reset action to reset the cache associated with the current url. \u25a0 options none \u25a0 return value none \u25a0 example The following will wipe out all the cache values associated with the current view url. { \"type\": \"$cache.reset\" } \u2500\u2500 GLOBAL \u2500\u2500 In most cases it is recommended to use $cache to persist data, because they are sandboxed per URL and it's secure. But sometimes you may want to store variables globally so they're accessible from all the views. This is what global variable does. Just like $cache , it will stay even when you close the app and come back later. Global vs. Cache vs. Local Variables Cache is sandboxed per URL, but Global variables are global to the entire app. Both Global and Cache persist data so they will stick around unless you delete the app or explicitly delete them using $cache.reset or $global.reset . Write $global.set action is used to write to global variables. \u25a0 options key:value pairs. The key is the global variable name, and the value is the variable's value. \u25a0 return value returns the updated $global object, which looks like this: { \"key1\": [...], \"key2\": ... } \u25a0 examples Example 1. Set global In the following example, it first makes a $network.request , and then takes its return value {{$jason}} and stores it to global using the $global.set action. { \"type\": \"$network.request\", \"options\": { \"url\": \"http://jasonclient.org/api/items.json\" }, \"success\": { \"type\": \"$global.set\", \"options\": { \"items\": \"{{$jason}}\" } } } Example 2. Set global and use the updated value Simply setting the global doesn't update the view. Let's try to render the updated result. { \"type\": \"$network.request\", \"options\": { \"url\": \"http://jasonclient.org/api/items.json\" }, \"success\": { \"type\": \"$global.set\", \"options\": { \"items\": \"{{$jason}}\" }, \"success\": { \"type\": \"$render\", \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Items fetched\", \"description\": \"{{$global.items.length}}\" } } } } } Read Just like $cache , you can read global variables using template expressions: \u25a0 example For example, you could store $get.message (local variable) into a global variable named url , and then display a $util.alert with the global variable we just set, like this: { \"$jason\": { \"head\": { \"actions\": { ... \"store\": { \"type\": \"$global.set\", \"options\": { \"url\": \"{{$get.message}}\" }, \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Current global 'url' variable\", \"description\": \"{{$global.url}}\" } } }, ... }, ... } } } Example: Use a modal to set global and render the result The following JSON opens file://2.json . { \"$jason\": { \"head\": { \"title\": \"Global Test 1\", \"actions\": { \"$show\": { \"type\": \"$render\" }, \"$pull\": { \"type\": \"$reload\" } }, \"templates\": { \"body\": { \"sections\": [ { \"type\": \"vertical\", \"items\": [ { \"type\": \"button\", \"text\": \"{{$global.something || 'Set Global'}}\", \"action\": { \"type\": \"$href\", \"options\": { \"url\": \"file://2.json\", \"transition\": \"modal\" } } } ] } ] } } } } } Here's the contents of 2.json . { \"$jason\": { \"head\": { \"title\": \"Global Test 2\", \"actions\": { \"$show\": { \"type\": \"$render\" }, \"$pull\": { \"type\": \"$reload\" }, \"save\": { \"type\": \"$global.set\", \"options\": { \"something\": \"{{$get.something}}\" }, \"success\": { \"type\": \"$close\" } } }, \"templates\": { \"body\": { \"header\": { \"menu\": { \"text\": \"Reset\", \"style\": { \"size\": \"15\", \"font\": \"Helvetica\", \"color\": \"#4f8ff7\" }, \"action\": { \"type\": \"$global.reset\", \"options\": { \"items\": [\"something\"] }, \"success\": { \"type\": \"$close\" } } } }, \"sections\": [{ \"type\": \"vertical\", \"items\": [{ \"type\": \"label\", \"text\": \"Global value is: {{$global.something || ''}}\" }, { \"type\": \"vertical\", \"style\": { \"padding\": \"10\" }, \"components\": [{ \"type\": \"textfield\", \"name\": \"something\", \"value\": \"{{$global.something || ''}}\", \"placeholder\": \"Add something here\" }] }, { \"type\": \"button\", \"text\": \"Save Global Variable\", \"action\": { \"trigger\": \"save\" } } ] }] } } } } } Reset Use $global.reset action to remove global variables by name \u25a0 options items : An array of global variable names to remove \u25a0 return value The resulting $global object after removing the variables \u25a0 example The following will wipe out all the global variables named key1 and key2 . { \"type\": \"$global.reset\", \"items\": [\"key1\", \"key2\"] } \u2500\u2500 SCRIPT \u2500\u2500 Jasonette lets you use simple inline JavaScript code inside template expressions. Here's an example where we use JSON.stringify : { \"items\": [ { \"type\": \"label\", \"url\": \"Full JSON string\" }, { \"type\": \"label\", \"text\": \"{{JSON.stringify($jason)}}\" } ] } However sometimes you may want to import an entire JavaScript library, just like you do with HTML using the <script> tag. $script.include Include remote/local JavaScript file into the template context. \u25a0 options items : An array of include objects, each of which has the following attributes: url : load from a url. You can use both remote (http:// or https://) or local (file://) urls text : inline JavaScript code to import \u25a0 return value none \u25a0 example In the following example, we: import underscore.js , crypto.js , he.js , as well as inject an inline JavaScript code into the context via text attribute. Use it by accessing the $root context. The JavaScript libraries get injected into the global context ( $root ) after running $script.include . Note that these JavaScript libraries referenced by url are downloaded in parallel just like how $require action works. { \"type\": \"$script.include\", \"options\": { \"items\": [ { \"url\": \"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\" }, { \"text\": \"var randomcolor = function() { return '#'+Math.floor(Math.random()*16777215).toString(16); }\" }, { \"url\": \"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.min.js\" }, { \"url\": \"https://rawgit.com/mathiasbynens/he/master/he.js\" } ] }, \"success\": { \"type\": \"$render\", \"options\": { \"data\": { \"raw\": \"no man&#38;s land\", \"decoded\": \"{{$root.he.decode('no man&#39;s land')}}\", \"unique\": \"{{$root._.uniq([1,2,3,3,3,4,4,4,4,5])}}\" } } } } $script.clear Clears out the global context of the JavaScript template engine. \u25a0 options none \u25a0 return value none \u25a0 example { \"type\": \"$script.clear\" } \u2500\u2500 UTIL \u2500\u2500 Utility and widget methods $util.banner Displays a banner notification with title and description. \u25a0 options title description type : \"error\" | \"success\" | \"info\" (default) \u25a0 return value none \u25a0 example { \"type\": \"$util.banner\", \"options\": { \"title\": \"Hello World\", \"description\": \"I'm a banner. I display a title and a description\", \"type\": \"info\" } } $util.toast Displays a toast notification with a simple text \u25a0 options text : The text to display type : \"error\" | \"info\" | \"warning\" | \"dark\" | \"default\" | \"success\" (default) \u25a0 return value none \u25a0 example { \"type\": \"$util.toast\", \"options\": { \"text\": \"I'm a toast. I display a simple text.\", \"type\": \"warning\" } } $util.alert Displays an alert. Alerts can also have form input fields users can fill in. When you use the form input, $util.alert returns the resulting key/value pairs wrapped with $jason . Types of alerts Basic : You can just display a simple alert that has an ok and a cancel button. Form : You can also add input fields to the alert and use it to receive user input. Basic Alert Form Alert \u25a0 options title : title of the alert description : description caption form (optional): Array of input elements. Each input can have the following attributes: name : name of the field. Use this name to retrieve the value filled out by the user value : set this attribute to preset the value inside the input field. placeholder : placeholder text type (optional) : secure to hide keystrokes with * \u25a0 return value if the form attribute is used, returns the filled out $jason object if the form attribute is NOT used, no return value If ok button was clicked, it triggers the success callback. If cancel button was clicked, it triggers the error callback. \u25a0 examples Example 1. Simple notice alert Just a simple alert with an OK and a Cancel button { \"type\": \"$util.alert\", \"options\": { \"title\": \"Basic Alert\", \"description\": \"I'm a basic alert. I simply display an alert that needs to be dismissed before moving forward\" }, \"success\": { \"type\": \"$render\" } } Example 2. Form Alert Here's an example of an alert that lets users fill out a form and return the value. { \"type\": \"$util.alert\", \"options\": { \"title\": \"Demo alert with input\", \"description\": \"Try entering values and press OK\", \"form\": [{ \"name\": \"username\", \"placeholder\": \"Enter username\" }, { \"name\": \"password\", \"placeholder\": \"Enter password\", \"secure\": \"true\" }] } } In this case, after the user fills out the form and presses \"OK\", the action will finish with a return value that takes the following form: { \"$jason\": { \"username\": \"ethan\", \"password\": \"sdn3Uef2!\" } } To use this return value, you can chain another action as a success callback and use the attributes, like this: { \"type\": \"$util.alert\", \"options\": { \"title\": \"Sign in\", \"description\": \"Please enter username and password\", \"form\": [{ \"name\": \"username\" }, { \"type\": \"secure\", \"name\": \"password\" }] }, \"success\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://www.jasonclient.org/users/sign_in.json\", \"method\": \"post\", \"data\": { \"username\": \"{{$jason.username}}\", \"password\": \"{{$jason.password}}\" } } } } $util.share Share a text, image, video, or a combination of them. Share sheet SMS example \u25a0 options items (array): Array of items to be shared. Each item can have the following attributes type : \"text\" | \"image\" | \"video\" text : text data : raw data to be shared (only for image type) url : image url (only for image type) file_url : video url (only for video type) \u25a0 return value none \u25a0 examples Example 1. Sharing a simple text { \"type\": \"$util.share\", \"options\": { \"items\": [{ \"type\": \"text\", \"text\": \"This is an automated message\" }] } } Example 2. Sharing an image captured from $snapshot { \"type\": \"$snapshot\", \"success\": { \"type\": \"$util.share\", \"options\": { \"items\": [{ \"type\": \"image\", \"data\": \"{{$jason.data}}\" }] } } } Example 3. Sharing a video captured from $media.camera { \"type\": \"$media.camera\", \"success\": { \"type\": \"$util.share\", \"options\": { \"items\": [{ \"type\": \"video\", \"file_url\": \"{{$jason.file_url}}\" }] } } } Example 4. Sharing an image from a URL, and a text { \"type\": \"$util.share\", \"options\": { \"items\": [{ \"type\": \"image\", \"url\": \"https://vjs.zencdn.net/v/oceans.png\" },{ \"type\": \"text\", \"text\": \"This is a picture of ocean\" }] } } $util.picker Opens a multiple choice picker menu, with each item linking to an action or an href . \u25a0 options title (string): The top title caption for the picker items (array): An array of items from which the user can choose. Each item can contain the following attributes: text : Text to display href : href to trigger when selected. action : action to call when selected. \u25a0 Return value none \u25a0 example { \"$jason\": { \"head\": { ... }, \"body\": { \"header\": { \"menu\": { \"text\": \"Menu\", \"action\": { \"type\": \"$util.picker\", \"options\": { \"items\": [{ \"text\": \"Trigger $util.banner\", \"action\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Success\", \"description\": \"This is a banner\" } } },{ \"text\": \"Trigger $util.alert\", \"action\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Alert\", \"description\": \"This is an alert triggered by $util.picker\" } } },{ \"text\": \"Trigger $audio.play\", \"action\": { \"type\": \"$audio.play\", \"options\": { \"url\": \"https://s3.amazonaws.com/www.textcast.co/icons/yo.mp3\" } } }] } } } ... } $util.datepicker Opens a date picker \u25a0 options none \u25a0 return value When a user selects one of the dates it returns the selected date in in unix timestamp format (in string) like this: { \"value\": \"1471310358216\" } \u25a0 example { \"$jason\": { \"head\": { \"title\": \"Datepicker Demo\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Pick a date\", \"action\": { \"type\": \"$util.datepicker\", \"options\": { \"title\": \"Pick a date\", \"description\": \"Just pick one\" }, \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Selected date\", \"description\": \"{{(new Date(parseInt(<span style='color:#ff0000;'>$jason</span>) * 1000)).toString()}}\" } } } }] }] } } } $util.addressbook Fetches the addressbook to populate them into $jason. \u25a0 options none \u25a0 return value Returns an array of contacts from the addressbook, like this: [ { \"name\": \"John\", \"phone\": \"9176568890\", \"email\": \"john@jasonclient.org\" }, { \"name\": \"Mary\", \"phone\": \"9172562890\", \"email\": \"mary@jasonclient.org\" }, { \"name\": \"Ethan\", \"phone\": \"2026468271\", \"email\": \"ethan@jasonclient.org\" } ] \u25a0 example In this example, we access the addressbook when the view $load s, then $render the content using the given template. { \"$jason\": { \"head\": { \"title\": \"Addressbook demo\", \"actions\": { \"$load\": { \"type\": \"$util.addressbook\", \"success\": { \"type\": \"$render\" } } }, \"templates\": { \"body\": { \"sections\": [ { \"items\": { \"{{#each $jason}}\": { \"type\": \"vertical\", \"style\": { \"padding\": \"5\", \"spacing\": \"5\" }, \"components\": [ { \"type\": \"label\", \"text\": \"{{name}}\" }, { \"type\": \"label\", \"text\": \"{{JSON.stringify(phone)}}\" }, { \"type\": \"label\", \"text\": \"{{JSON.stringify(email)}}\" } ] } } } ] } } } } } \u25a0 Required Permissions On iOS, $util.addressbook works out of the box so you don't need to do anything. But on Android you need to set up a android.permission.READ_CONTACTS permission. Just open up AndroidManifest.xml file from Android Studio, and uncomment the lines described below: \u2500\u2500 MEDIA \u2500\u2500 Anything related to photo/video/camera. $media.camera Capture a video or a photo using the device camera \u25a0 options type : \"photo\" | \"video\" edit : \"true\" (Don't include to remove the editing step) quality : \"high\" | \"medium\" | \"low\" (Default is \"medium\" ) \u25a0 return value Returns an object with multiple attributes which represent the video/photo file_url : local file url (Used for videos) data_uri : data-uri string data : raw data (Used for photos) content_type : \"image/png\" | \"image/jpeg\" | \"video/mp4\" For example, here's an example return value: { \"file_url\": \"...\", \"data_uri\": \"data:image/png;base64,.....\", \"data\": \"...\", \"content_type\": \"image/png\" } Normally you will want to pass the data to another action such as $network.upload . \u25a0 example In the following example, we take a photo using $media.camera , and then utilize the data_url from the return value to set the background image url. { \"$jason\": { \"head\": { \"title\": \"Camera\", \"description\": \"Tap to open up camera\", \"actions\": { \"$load\": { \"type\": \"$media.camera\", \"options\": { \"edit\": \"true\", \"type\": \"photo\" }, \"success\": { \"type\": \"$render\" } } }, \"templates\": { \"body\": { \"background\": \"{{$jason.data_url}}\" } } } } } $media.picker Opens the device camera roll. \u25a0 options type : \"photo\" | \"video\" edit : \"true\" (Don't include to remove the editing step) quality : \"high\" | \"medium\" | \"low\" (Default is \"medium\" ) \u25a0 return value Same as $media.camera \u25a0 example { \"$jason\": { \"head\": { \"title\": \"Media picker\", \"description\": \"Tap to select media\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Select media\", \"action\": { \"type\": \"$media.picker\", \"options\": { \"edit\": \"true\", \"type\": \"video\" }, \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Selected {{$jason['content_type']}} at\", \"description\": \"{{$jason.file_url}}\" } } } }] }] } } } $media.play plays a video from remote url. \u25a0 options url : the video url to play muted : \"true\" to mute the sound \u25a0 return value none \u25a0 example { \"$jason\": { \"head\": { \"title\": \"Video\", \"description\": \"Tap to play the video\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"image\", \"url\": \"https://vjs.zencdn.net/v/oceans.png\", \"action\": { \"type\": \"$media.play\", \"options\": { \"url\": \"https://vjs.zencdn.net/v/oceans.mp4\" } } }] }] } } } \u2500\u2500 Vision \u2500\u2500 Barcode / QR Code detection To use $vision API, the body.background must be a camera type, with \"device\": \"back\" (front-facing camera can only scan your face, not scan barcodes). $vision.ready event gets triggered when the camera is ready. You can trigger $vision.scan to start scanning for barcodes/qrcodes The $vision.scan is asynchronous so it immediately goes on to its success callback after it kicks off the scanning service The scanning service triggers a $vision.onscan event with the extracted metadata. We can use it to do whatever. $vision.scan Starts scanning for barcode. When it scans a code, it will trigger a $vision.onscan event. \u25a0 options No options required \u25a0 return value none. This action is asynchronous and the scanned result will return through the $vision.onscan event. \u25a0 example Quick example: { \"$jason\": { \"head\": { \"templates\": { \"body\": { \"background\": { \"type\": \"camera\", \"options\": { \"device\": \"back\" } } } }, \"actions\": { \"$load\": { \"type\": \"$render\" }, \"$vision.ready\": { \"type\": \"$vision.scan\" }, \"$vision.onscan\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Scanned content\", \"description\": \"{{$jason.type}} {{$jason.content}}\" } } } } } } A couple of important things to notice: we have the body's background set as \"type\": \"camera\" . This is mandatory to get $vision action to work. Then we wait for $vision.ready event. And call $vision.scan when the event fires. The $vision.onscan event returns with a payload that looks like: [iOS] { \"$jason\": { \"type\": \"org.iso.QRCode\", \"content\": \"Hello World\" } } [Android] { \"$jason\": { \"type\": 256, \"content\": \"Hello World\" } } The \"content\" attribute is the content of the barcode The \"type\" represents the barcode type. More examples Here are two examples using this API: Inline Detection and Rendering: https://jasonbase.com/things/PMj7 (any content can be encoded) detect link and $href: https://jasonbase.com/things/rZ0b (Be sure to scan a qrcode that encodes a link) \u2500\u2500 AUDIO \u2500\u2500 Anything related to audio $audio.play Play audio from remote url. Toggles between play and pause state if called multiple times. \u25a0 options url : A remote url to stream audio from. title : Title to display on the lock screen while playing in background mode. author : Author name to display on the lock screen while playing in background mode. album : Album name to display on the lock screen while playing in background mode. image : Image url to display on the lock screen while playing in background mode. \u25a0 return value none \u25a0 example { \"$jason\": { \"head\": { \"title\": \"Play audio\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Yo\", \"action\": { \"type\": \"$audio.play\", \"options\": { \"title\": \"Busdriver - Worlds to Run\", \"author\": \"Song Exploder\", \"image\": \"http://discover.pocketcasts.com/discover/images/400/fff9ba50-53e1-0131-8293-723c91aeae46.jpg\", \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\" } } }] }] } } } $audio.pause Pauses an audio clip that's already playing from a remote url. \u25a0 options url: if specified, pauses ONLY this url. Otherwise, pauses all audios currently playing. \u25a0 return value none $audio.stop Stops an audio clip that's already playing from a remote url. \u25a0 options url: if specified, stops ONLY this url. Otherwise, stops all audios currently playing. \u25a0 return value none $audio.seek Seeks audio already playing from a remote url. The position value must be a value between 0 and 1 (in string) \u25a0 options url : The audio url. position : value between 0 and 1 (Must be in string format) \u25a0 return value none \u25a0 example Here's an example of seeking an audio clip to 30% position { \"$jason\": { \"head\": { \"title\": \"Seek example\" \"actions\": { \"$load\": { \"type\": \"$audio.play\", \"options\": { \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\" } } } }, \"body\": { \"layers\": [{ \"type\": \"label\", \"text\": \"Go to 30% position\", \"style\": { \"bottom\": \"50\", \"left\": \"50%-50\", \"width\": \"100\" }, \"action\": { \"type\": \"$audio.seek\", \"options\": { \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\", \"position\": \"0.3\" } } }] } } } $audio.position Get the position of the specified audio clip \u25a0 options url : The audio url \u25a0 return value Returns the position between 0 and 1 in the following format: { \"value\": \"0.3\" } \u25a0 example The following example displays a toast with the current position when the user taps the label. { \"$jason\": { ... \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"How much did I listen so far?\", \"action\": { \"type\": \"$audio.position\", \"options\": { \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\" }, \"success\": { \"type\": \"$util.toast\", \"options\": { \"text\": \"{{JSON.stringify($jason)}}\" } } }] }] } } } $audio.duration Returns total duration of the specified audio clip \u25a0 options url : The audio url \u25a0 return value Duration in seconds, in the following format: { \"value\": \"300\" } \u25a0 example The following example displays a toast with the total duration of the track when the user taps the label. { \"$jason\": { ... \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"How long is this track?\", \"action\": { \"type\": \"$audio.duration\", \"options\": { \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\" }, \"success\": { \"type\": \"$util.toast\", \"options\": { \"text\": \"{{JSON.stringify($jason)}}\" } } }] }] } } } $audio.record Record audio \u25a0 options color : tint color when active color:disabled : tint color when paused theme : light to use light theme. Otherwise omit. \u25a0 return value file_url : the local url in which the audio was stored data_uri : base64 encoded data-uri content_type : \"audio/m4a\" (it's always this format) Normally you will want to pass the result immediately to a $network.upload call in order to upload it to a cloud storage. \u25a0 example { \"$jason\": { \"head\": { \"title\": \"Play audio\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Record Now\", \"action\": { \"type\": \"$audio.record\", \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Audio stored at\", \"description\": \"{{$jason.url}}\" } } } }] }] } } } Additional Permissions \u26a0\ufe0f There are certain device permissions you need to turn on in order to use some of these actions. iOS Permission To support background audio play, you need to turn on background audio mode. Here's how: [1] From XCode open info.plist file. Right click on the file and open as source code . [2] Uncomment the UIBackgroundModes part Android Permissions [A] To support $audio.record on Android, you need to turn on android.permission.RECORD_AUDIO permission. [B] To support background audio play, you need to turn on android.permission.WAKE_LOCK permission. First open AndroidManifest.xml file from Android Stuido, and uncomment the relevant lines as shown below: \u2500\u2500 GEO \u2500\u2500 $geo.get Get user's geolocation \u25a0 options distance : accuracy distance in meters. By default it's 5000meters. The lower you go the more accurate it will be, but the longer it will take to retrieve the location. \u25a0 return value a coord object that contains (latitude),(longitude) format string { \"coord\": \"12.342,22.343\" } \u25a0 example Below example demonstrates various ways of utilizing $geo.get return values { \"$jason\": { \"head\": { \"title\": \"Right Here\", \"description\": \"Searching anything nearby, links to yelp, google streetview and foursquare\" }, \"body\": { \"sections\": [ { \"items\": [ { \"type\": \"label\", \"text\": \"Street View\", \"style\": { \"size\": \"40\", \"font\": \"HelveticaNeue-CondensedBold\", \"color\": \"#000000\" }, \"action\": { \"type\": \"$geo.get\", \"options\": { \"distance\": \"1000\" }, \"success\": { \"type\": \"$href\", \"options\": { \"url\": \"http://maps.google.com/maps?q=&layer=c&cbll={{$jason.coord}}&cbp=11,0,0,0,0\", \"view\": \"App\" } } } }, { \"type\": \"label\", \"text\": \"Yelp\", \"style\": { \"size\": \"40\", \"font\": \"HelveticaNeue-CondensedBold\", \"color\": \"#000000\" }, \"action\": { \"type\": \"$geo.get\", \"success\": { \"type\": \"$href\", \"options\": { \"url\": \"http://www.yelp.com/search?find_desc=food&cll={{$jason.coord}}&ns=1\", \"view\": \"App\" } } } }, { \"type\": \"label\", \"text\": \"Foursquare\", \"style\": { \"size\": \"40\", \"font\": \"HelveticaNeue-CondensedBold\", \"color\": \"#000000\" }, \"action\": { \"type\": \"$geo.get\", \"success\": { \"type\": \"$href\", \"options\": { \"url\": \"https://foursquare.com/explore?ll={{$jason.coord}}&mode=url&q=Food\", \"view\": \"App\" } } } } ] } ] } } } \u25a0 Required Permissions On iOS, $geo.get works out of the box so you don't need to do anything. But on Android you need to set up a location permission. Just open up AndroidManifest.xml file from Android Studio, and uncomment the lines described below: \u2500\u2500 TIMER \u2500\u2500 $timer.start Start a timer \u25a0 options interval : timer interval in seconds name : name of the timer (used later to stop it) repeats : if set to \"true\" , it's a perpetually repeating timer. Otherwise the timer gets called only once. action : the action to execute on every timer interval. \u25a0 return value none \u25a0 example { \"$jason\": { \"head\": { \"actions\": { \"$load\": { \"type\": \"$timer.start\", \"options\": { \"interval\": \"1\", \"name\": \"timer1\", \"repeats\": \"true\", \"action\": { \"type\": \"$render\" } } } }, \"templates\": { ... } } } } $timer.stop Stops a timer \u25a0 options name : the name of the timer to stop. You need to have started a timer with a name first. It will stop all running timers if the name is not specified. \u25a0 return value none \u25a0 example { \"$jason\": { ... \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Stop the timer\", \"action\": { \"type\": \"$timer.stop\", \"options\": { \"name\": \"timer1\" } } }] }] } } } \u2500\u2500 CONVERSION \u2500\u2500 Convert other data formats into JSON format $convert.csv Convert CSV to JSON \u25a0 options data : CSV string \u25a0 return value returns the parsed JSON result. Expected format: must have the first row populated with attribute names. (See below for an example) \u25a0 example Here's an example CSV string returned from a network request. name, descrption, url, icon github, social coding, https://www.github.com, https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png facebook, Best place to build & make an impact., https://www.facebook.com, https://www.facebook.com/images/fb_icon_325x325.png product hunt, Discover your next favorite thing, https://www.producthunt.com, https://pbs.twimg.com/profile_images/699572900643213312/RC2oRewL.jpg Notice how the first line is entirely made up of attribute names, and the rest rows are the actual data. We will try to parse this CSV into JSON by using the following code: { \"$jason\": { \"head\": { \"actions\": { \"$load\": { \"type\": \"$network.request\", \"options\": { \"url\": \"http://hastebin.com/raw/xiceheroku\", \"data_type\": \"raw\" }, \"success\": { \"type\": \"$convert.csv\", \"options\": { \"data\": \"{{$jason}}\" }, \"success\": { \"type\": \"$render\" } } } } } } } The end result: [ { \"name\": \"github\", \"description\": \"social coding\", \"url\": \"https://www.github.com\", \"icon\": \"https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png\" }, { \"name\": \"facebook\", \"description\": \"Best place to build & make an impact.\", \"url\": \"https://www.facebook.com\", \"icon\": \"https://www.facebook.com/images/fb_icon_325x325.png\" }, { \"name\": \"product hunt\", \"description\": \"Discover your next favorite thing\", \"url\": \"https://www.producthunt.com\", \"icon\": \"https://pbs.twimg.com/profile_images/699572900643213312/RC2oRewL.jpg\" } ] $convert.rss Convert RSS to JSON. Built on top of node-feedparser library \u25a0 options data : RSS string \u25a0 return value returns the parsed JSON result in the following format ( You can learn more about the spec here ): \u25a0 example Here's an example where it makes a network request to http://feeds.gawker.com/lifehacker/full with data_type of rss , converts it to JSON using $convert.rss , and then renders it. { \"actions\": { \"$load\": { \"type\": \"$network.request\", \"options\": { \"url\": \"http://feeds.gawker.com/lifehacker/full\", \"data_type\": \"rss\" }, \"success\": { \"type\": \"$convert.rss\", \"options\": { \"data\": \"{{$jason}}\" }, \"success\": { \"type\": \"$render\" } } } } } The converted result right before $render will look something like this: { \"$jason\": [ { \"author\": \"Alan Henry\", \"rss:pubdate\": { \"@\": {}, \"#\": \"Thu, 9 Jun 2016 00:00:00 GMT\" }, \"source\": {}, \"guid\": \"1780470292\", \"link\": \"http://feeds.gawker.com/~r/lifehacker/full/~3/kcJMaJ6Ad7I/the-edge-of-the-world-desktop-1780470292\", \"title\": \"The Edge of the World Desktop\", \"summary\": \"&lt;p class=\\\"first-text\\\"&gt;This OS X desktop is simple, elegant, and combines a few simple widgets with a gorgeous wallpaper to great effect. If you like what you see, here\u2019s how you can set it up, customize your own menubar, and give your Mac the same look. &lt;/p&gt;\", \"image\": {}, \"rss:category\": [ { \"@\": { \"domain\": \"\" }, \"#\": \"featured desktop\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"desktops\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"wallpapers\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"customization\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"personalization\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"hud\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"rainmeter\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"themes\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"skins\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"windows\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"os x\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"mac\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"linux\" } ], \"rss:link\": { \"@\": {}, \"#\": \"http://feeds.gawker.com/~r/lifehacker/full/~3/kcJMaJ6Ad7I/the-edge-of-the-world-desktop-1780470292\" }, \"feedburner:origlink\": { \"@\": {}, \"#\": \"http://lifehacker.com/the-edge-of-the-world-desktop-1780470292\" }, \"enclosures\": [], \"origlink\": \"http://lifehacker.com/the-edge-of-the-world-desktop-1780470292\", \"pubDate\": \"2016-06-09T00:00:00.000Z\", \"pubdate\": \"2016-06-09T00:00:00.000Z\", \"rss:guid\": { \"@\": { \"ispermalink\": \"false\" }, \"#\": \"1780470292\" }, \"date\": \"2016-06-09T00:00:00.000Z\", \"rss:title\": { \"@\": {}, \"#\": \"The Edge of the World Desktop\" }, \"meta\": { \"#ns\": [ { \"xmlns:itunes\": \"http://www.itunes.com/dtds/podcast-1.0.dtd\" }, { \"xmlns:dc\": \"http://purl.org/dc/elements/1.1/\" }, { \"xmlns:taxo\": \"http://purl.org/rss/1.0/modules/taxonomy/\" }, { \"xmlns:rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" }, { \"xmlns:atom\": \"http://www.w3.org/2005/Atom\" }, { \"xmlns:wfw\": \"http://wellformedweb.org/CommentAPI/\" }, { \"xmlns:feedburner\": \"http://rssnamespace.org/feedburner/ext/1.0\" }, { \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\" }, { \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\" } ], \"#version\": \"2.0\", \"categories\": [], \"language\": \"en\", \"link\": \"http://lifehacker.com\", \"title\": \"Lifehacker\", \"rss:link\": { \"@\": {}, \"#\": \"http://lifehacker.com\" }, \"cloud\": { \"type\": \"hub\", \"href\": \"http://pubsubhubbub.appspot.com/\" }, \"image\": {}, \"xmlurl\": \"http://www.lifehacker.com/index.xml\", \"feedburner:info\": { \"@\": { \"uri\": \"lifehacker/full\" } }, \"feedburner:browserfriendly\": { \"@\": {}, \"#\": \"This is an XML content feed. It is intended to be viewed in a newsreader or syndicated to another site.\" }, \"#xml\": { \"version\": \"1.0\", \"encoding\": \"UTF-8\" }, \"@\": [ { \"xmlns:itunes\": \"http://www.itunes.com/dtds/podcast-1.0.dtd\" }, { \"xmlns:dc\": \"http://purl.org/dc/elements/1.1/\" }, { \"xmlns:taxo\": \"http://purl.org/rss/1.0/modules/taxonomy/\" }, { \"xmlns:rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" }, { \"xmlns:atom\": \"http://www.w3.org/2005/Atom\" }, { \"xmlns:wfw\": \"http://wellformedweb.org/CommentAPI/\" }, { \"xmlns:feedburner\": \"http://rssnamespace.org/feedburner/ext/1.0\" } ], \"pubDate\": null, \"pubdate\": null, \"rss:language\": { \"@\": {}, \"#\": \"en\" }, \"date\": null, \"generator\": null, \"rss:title\": { \"@\": {}, \"#\": \"Lifehacker\" }, \"xmlUrl\": \"http://www.lifehacker.com/index.xml\", \"favicon\": null, \"rss:@\": {}, \"atom10:link\": [ { \"@\": { \"rel\": \"hub\", \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\", \"href\": \"http://pubsubhubbub.appspot.com/\" } }, { \"@\": { \"href\": \"http://www.lifehacker.com/index.xml\", \"rel\": \"self\", \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\", \"type\": \"application/rss+xml\" } } ], \"rss:description\": { \"@\": {}, \"#\": \"Tips and downloads for getting things done\" }, \"copyright\": null, \"#type\": \"rss\", \"author\": null, \"description\": \"Tips and downloads for getting things done\" }, \"dc:creator\": { \"@\": {}, \"#\": \"Alan Henry\" }, \"rss:@\": {}, \"rss:description\": { \"@\": {}, \"#\": \"&lt;p class=\\\"first-text\\\"&gt;This OS X desktop is simple, elegant, and combines a few simple widgets with a gorgeous wallpaper to great effect. If you like what you see, here\u2019s how you can set it up, customize your own menubar, and give your Mac the same look.&lt;/p&gt;\" }, \"comments\": null, \"categories\": [ \"featured desktop\", \"desktops\", \"wallpapers\", \"customization\", \"personalization\", \"hud\", \"rainmeter\", \"themes\", \"skins\", \"windows\", \"os x\", \"mac\", \"linux\" ], \"description\": \"&lt;p class=\\\"first-text\\\"&gt;This OS X desktop is simple, elegant, and combines a few simple widgets with a gorgeous wallpaper to great effect. If you like what you see, here\u2019s how you can set it up, customize your own menubar, and give your Mac the same look.&lt;/p&gt;\" }, { ... } ] } Check out the full JSON for the RSS reader example","title":"\u2605 Actions"},{"location":"actions/#basics","text":"Expressing a view using JSON is pretty straightforward. However what makes Jasonette truly powerful is the ability to express functions that actually do something, entirely in JSON. We call it action . This could be anything from accessing the device features such as camera or addressbook, to making network requests. And you can compose them to carry out any sophisticated tasks. Not to mention being able to use inline Javascript within any JSON expression.","title":"Basics"},{"location":"actions/#syntax","text":"Actions can take the following 5 attributes type : Specify action type . (note: THIS CANNOT BE A TEMPLATE EXPRESSION that needs to be evaluated. Use a static string.) options : Arguments to be passed into the action (optional) success : Another action to be called when the current action finishes. You can chain multiple actions to execute in sequence this way. (optional) error : You can handle exceptions by attaching error to an action. (optional) There are two ways of calling actions: You can directly attach actions to UI elements inline . In this case, the action will be executed when a user taps the element. You can define an action under actions registry and trigger it by name. In this case you not only can attach actions to UI elements but also can trigger them based on system events or call them from anywhere. First read through the explanation below to learn how to define actions inline. And after that, learn how to use \"trigger\" to trigger an action by name .","title":"Syntax"},{"location":"actions/#examples-define-inline","text":"","title":"Examples - Define Inline"},{"location":"actions/#network-request-and-then-render","text":"Make a network request and $render its content when it succeeds. { \"type\": \"label\", \"text\": \"refresh\", \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" } } }","title":"Network request and then render"},{"location":"actions/#network-request-and-then-render-with-error-handling","text":"Same as above, except display a banner when the request fails. { \"type\": \"label\", \"text\": \"refresh\", \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" }, \"error\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Error\", \"description\": \"Something went wrong.\" } } } }","title":"Network request and then render, with error handling"},{"location":"actions/#return-values","text":"You can access an action's return value by using the variable $jason from the next action (either the success or the error action). For example, $geo.get action returns the geolocation of the current device in the following format: { \"coord\": \"51.5032510,-0.1278950\" } Which means we can use this return value by accessing the $jason variable, using a template like this: { \"type\": \"$geo.get\", \"success\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Your current coordinate\", \"description\": \"{{$jason.coord}}\" } } }","title":"Return values"},{"location":"actions/#what-kind-of-ui-elements-can-have-action-handlers","text":"action can be attached to various UI elements to respond to touch, but not all.","title":"What kind of UI elements can have action handlers?"},{"location":"actions/#can-be-attached-to","text":"menu - $jason.body.header.menu footer tabs - $jason.body.footer.tabs footer input - $jason.body.footer.input.left and $jason.body.footer.input.right Top level of a section item - Example: $body.sections[0].items[0] Layer item - Example - $body.layers[0].items[0] Button component - Normally you need to attach actions at at the item level as described above. But if you want to attach an action at a component level, you can use \"type\": \"button .","title":"CAN be attached to:"},{"location":"actions/#cannot-be-attached-to","text":"CANNOT attach actions to a label or image component unless it's at item level. Here's an example that DOESN'T work:: { \"items\": [{ \"type\": \"vertical\", \"components\": [{ \"type\": \"label\", \"text\": \"touch me\", \"action\": { ... } }] }] } label and any other non-button type components do not respond to touch events directly. This is why above code won't respond to touch, since it's attaching the action to the label. However the following code WILL respond to touch: { \"items\": [{ \"type\": \"label\", \"text\": \"touch me\", \"action\": { ... } }] } This is because the label is at item level. Jasonette automatically wraps components with a layout when they're at item level. Which means, internally above code is the same as: { \"items\": [{ \"type\": \"vertical\", \"action\": { ... }, \"components\": [{ \"type\": \"label\", \"text\": \"touch me\", }] }] } Notice how the action is tied to the vertical layout, which is at item level. So this will respond to touch. So what if you really want to attach an action to a component, but the component is NOT at item level? => Use buttons , like this: { \"items\": [{ \"type\": \"vertical\", \"components\": [{ \"type\": \"button\", \"url\": \"https://.....\", \"action\": { ... } }] }] }","title":"CANNOT be attached to:"},{"location":"actions/#where-to-use-actions","text":"Actions are not just for UI components. It can be triggered in various ways, and used for various situations: Handling user interaction Handling another action's result Handling system events Let's go through each:","title":"Where to use actions?"},{"location":"actions/#a-handling-user-interaction","text":"","title":"A. Handling user interaction"},{"location":"actions/#user-touches-an-item","text":"Attach action attribute to items , menu , layers , etc. to react to touch. (Read API documentation to see if a component supports action attribute) In the example below, an action is attached to a menu , so it gets triggered when user touches it. { \"head\": { ... }, \"body\": { \"header\": { \"menu\": { \"text\": \"Press me\", \"action\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Good job!\", \"description\": \"You know how to press a button!\" } } } }, ... } }","title":"\u25a0 User touches an item"},{"location":"actions/#user-changes-a-form-input-value","text":"There are some form input components such as slider , search , etc. which trigger an action whenever its value changes. Just attach action attribute to handle that event. In the example below, an action is attached to a slider , so we can display a banner with the current value whenever user changes the value. { ... { \"type\": \"slider\", \"name\": \"gauge\", \"action\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Current value\", \"description\": \"{{$get.gauge}}\" } } } ... }","title":"\u25a0 User changes a form input value"},{"location":"actions/#b-handling-another-actions-result","text":"All actions can have a success and an error attribute. success points to an action to be triggered after the current action finishes. error points to an action to be triggered if something goes wrong with the current action. By using success , we can chain multiple actions. In the example below, a $network.request action gets called when a user touches the label, renders the result when it succeeds ( success ), and displays an error message when something goes wrong ( error ). { ... { \"type\": \"label\", \"text\": \"Touch me\", \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://www.jasonclient.org/items.json\" }, \"success\": { \"type\": \"$render\" }, \"error\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Error\", \"description\": \"Uh oh, something went wrong.\" } } } } ... }","title":"B. Handling another action's result"},{"location":"actions/#c-handling-system-events","text":"System events are events automatically triggered by the system, instead of through user input. You can attach any action to system events, such as $load , $show , $foreground , etc. Here's a brief example: { \"$jason\": { \"head\": { \"actions\": { \"$load\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" } }, \"$show\": { \"type\": \"$reload\" }, \"$foreground\": { \"type\": \"$reload\" } } }, ... } } Learn more about system events","title":"C. Handling system events"},{"location":"actions/#triggering-actions","text":"When you define an action inline, these actions have no name. Therefore you cannot reuse them form elsewhere. To be able to reuse actions, you need to register them under actions registry, and then trigger them by name.","title":"Triggering actions"},{"location":"actions/#syntax_1","text":"To trigger an action, you can use the following syntax: \"trigger\" : Trigger an action by name, registered under the actions registry. (note: THIS CANNOT BE A TEMPLATE EXPRESSION that needs to be evaluated. You must use a static string) \"options\" (optional): same as inline actions \"success\" (optional): executed when the triggered action returnes via $return.success action \"error\" (optional): executed when the triggered action returns via $return.error action They look similar to inline action definition except that you use trigger instead of type .","title":"Syntax"},{"location":"actions/#1-define-an-action-under-the-actions-registry","text":"First, you need to define the action inside head.actions . In this case we name it refresh_view : { \"$jason\": { \"head\": { \"actions\": { \"refresh_view\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" } } }, ... }","title":"1. Define an action under the actions registry"},{"location":"actions/#2-trigger-it-by-name","text":"Second, to actually trigger it by name, just attach an action with a trigger attribute, like this: { \"type\": \"label\", \"text\": \"Refresh\", \"action\": { \"trigger\": \"refresh_view\" } } Cool thing about this is, now you can trigger this action from anywhere in your code. You can trigger it manually from another action, or you could make it so that a system event automatically triggers the action. Here's an example where refresh_view is triggered whenever the view comes into focus ( $show ) or comes back from background ( $foreground ): { \"$jason\": { \"head\": { \"actions\": { \"$show\": { \"trigger\": \"refresh_view\" }, \"$foreground\": { \"trigger\": \"refresh_view\" }, \"refresh_view\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" } } }, ... } Here's an example where an action triggers another action ( refresh sets the cache, and then triggers fetch ): { \"$jason\": { \"head\": { \"actions\": { \"refresh\": { \"type\": \"$cache.set\", \"options\": { \"items\": [] }, \"success\": { \"trigger\": \"fetch\" } }, \"fetch\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" } }, ... }","title":"2. Trigger it by name"},{"location":"actions/#3-return-from-subroutine-when-finished","text":"We saw from above that actions can trigger other actions. But so far these action call chain examples have been one-way trip only, which means once an action triggers another action its life is over. You can't do things like making a call and waiting for it to return with its result, and then continue on where it left off, using that value. Let's look at the refresh example from above: { \"$jason\": { \"head\": { \"actions\": { \"refresh\": { \"type\": \"$cache.set\", \"options\": { \"items\": [] }, \"success\": { \"trigger\": \"fetch\" } }, \"fetch\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$render\" } } ... } ... } The problem with this is each action does more than one thing: refresh resets the cache AND triggers fetch fetch makes a network request AND renders the result. Maybe we want to add another action that resets the cache before doing something. Then, we need to add the same $cache.set action again. Maybe we want to make the network request but do something else with the result instead of rendering. It becomes difficult to reuse these actions since one action does more than one thing. To solve this problem, we can break these actions out into self-contained modules so that: One action only does one thing. Each action ends by returning its result instead of triggering another action using $return.success or $return.error actions. Here's the solution: { \"$jason\": { \"head\": { \"actions\": { \"reset\": { \"type\": \"$cache.set\", \"options\": { \"items\": [] }, \"success\": { \"type\": \"$return.success\" } }, \"refresh\": { \"trigger\": \"reset\", \"success\": { \"trigger\": \"fetch\", \"success\": { \"type\": \"$render\" } } }, \"fetch\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/jYJ.json\" }, \"success\": { \"type\": \"$return.success\" } } ... } ... } Here, the reset action only resets the cache. And fetch action only makes a network request and returns its result. (No $render) Lastly the refresh action functions as the main program that triggers each action one after another (triggers reset , then triggers fetch , and finally executes $render )","title":"3. Return from subroutine when finished"},{"location":"actions/#when-to-use-trigger-vs-defining-actions-inline","text":"In most cases it's recommended that you define your actions under actions registry and trigger them using \"trigger\" . For example, instead of: { \"$jason\": { \"head\": { }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"item 1\", \"action\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Banner\", \"description\": \"Pressed item\" } } }, { \"type\": \"label\", \"text\": \"item 2\", \"action\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Banner\", \"description\": \"Pressed item\" } } }, { \"type\": \"label\", \"text\": \"item 3\", \"action\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Banner\", \"description\": \"Pressed item\" } } }] }] } } } You may want to define the action inside head.actions , like this: { \"$jason\": { \"head\": { \"actions\": { \"show_banner\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Banner\", \"description\": \"Pressed item\" } } } }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"item 1\", \"action\": { \"trigger\": \"show_banner\" } }, { \"type\": \"label\", \"text\": \"item 2\", \"action\": { \"trigger\": \"show_banner\" } }, { \"type\": \"label\", \"text\": \"item 3\", \"action\": { \"trigger\": \"show_banner\" } }] }] } } }","title":"When to use trigger vs. defining actions inline"},{"location":"actions/#benefit-1","text":"As you can see above, using trigger lets you define a single action once and reuse it from multiple places in your view. It removes redundant code.","title":"Benefit 1"},{"location":"actions/#benefit-2","text":"When you define an action inline, its behavior is fixed. For example, the show_banner action example above only does one thing: It displays a banner that says \"Pressed item\". However in many cases we want to write one action and reuse them for various purposes. Maybe we want to display a banner that says \"Pressed item 1\", or \"Pressed item 2\". { \"$jason\": { \"head\": { \"actions\": { \"show_banner\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Banner\", \"description\": \"Pressed item {{$jason.item}}\" } } } }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"item 1\", \"action\": { \"trigger\": \"show_banner\", \"options\": { \"item\": \"1\" } } }] }] } } }","title":"Benefit 2"},{"location":"actions/#declaring-actions","text":"There are two ways you can call actions: 1. Inline action Attach action attributes directly to UI elements 2. Action registry Define actions inside $jason.head.actions and call them by name","title":"Declaring actions"},{"location":"actions/#inline-action","text":"Inline actions are basically what we've been talking about so far. You directly attach an action to events, UI components, and another action. Here's an example: { ... \"type\": \"label\", \"action\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Hello\", \"description\": \"World\" } } ... }","title":"Inline Action"},{"location":"actions/#action-registry","text":"We can define an action once and refer to them whenever we need to, instead of writing one for every situation.","title":"Action Registry"},{"location":"actions/#comparison-with-inline-actions","text":"For example, here's an inline action example. We display multiple items , and each item has the same action attribute content. { \"$jason\": { \"head\": { ... }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"This is row 1\", \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.org/submit\", \"method\": \"POST\" }, \"success\": { \"type\": \"$render\" } } }, { \"type\": \"label\", \"text\": \"This is row 2\", \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.org/submit\", \"method\": \"POST\" }, \"success\": { \"type\": \"$render\" } } }, { \"type\": \"label\", \"text\": \"This is row 3\", \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.org/submit\", \"method\": \"POST\" }, \"success\": { \"type\": \"$render\" } } }] }] } } } Below we have the same example, but using $jason.head.actions instead of re-defining the same action every time inline: { \"$jason\": { \"head\": { ... \"actions\": { \"submit_item\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.org/submit\", \"method\": \"POST\" }, \"success\": { \"type\": \"$render\" } } } }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"This is row 1\", \"action\": { \"trigger\": \"submit_item\" } }, { \"type\": \"label\", \"text\": \"This is row 2\", \"action\": { \"trigger\": \"submit_item\" } }, { \"type\": \"label\", \"text\": \"This is row 3\", \"action\": { \"trigger\": \"submit_item\" } }] }] } } }","title":"\u25a0   Comparison with inline actions"},{"location":"actions/#heres-whats-going-on","text":"Declare an action under $jason.head.actions (in this case we've named it submit_item ). Then we trigger the action from anywhere using the name.","title":"Here's what's going on:"},{"location":"actions/#system-events","text":"Some actions are automatically triggered by the system when a certain event occurs. When you wish to take advantage of these, simply add them to actions . They are:","title":"\u25a0   System events"},{"location":"actions/#1-load","text":"$load gets called once automatically when the view loads for the first time. Here's an example where we make a network request when the view loads, and then render the response using the template. { ... \"$load\": { \"type\": \"$network.request\", \"options\": { \"url\": \"http://jasonclient.org/req.json\" }, \"success\": { \"type\": \"$render\" } } ... }","title":"1. $load"},{"location":"actions/#2-show","text":"$show gets called automatically whenever the view appears. For example when coming back from a modal view, coming back from its next view via back button, etc. Here's an example { ... \"$show\": { \"type\": \"$reload\" }, ... }","title":"2. $show"},{"location":"actions/#3-foreground","text":"$foreground is called automatically whenever the app comes back from the background state. { ... \"$foreground\": { \"type\": \"$reload\" }, ... }","title":"3. $foreground"},{"location":"actions/#4-pull","text":"$pull gets called whenever user makes a pull to refresh action { ... \"$pull\": { \"type\": \"$reload\" }, ... }","title":"4. $pull"},{"location":"actions/#api","text":"","title":"API"},{"location":"actions/#require","text":"","title":"\u2500\u2500 REQUIRE \u2500\u2500"},{"location":"actions/#require_1","text":"The $require action imports remote JSON files in parallel. { \"type\": \"$require\", \"options\": { \"profiles\": [\"https://...\", \"https://...\", \"https://\"], \"items\": [\"https://...\", \"https://...\", \"https://...\"] }, \"success\": { \"type\": \"$render\" } } It works similar to $network.request but with a few differences: It can fetch multiple remote JSON files in parallel. It is only for making simple GET requests. No POST/PUT/DELETE requests, etc.","title":"$require"},{"location":"actions/#options","text":"The options object defines what the return value should look like. For example, the following $require action would fetch the contents of https://hello.world/1.json and then attach it to the profile attribute. { \"type\": \"$require\", \"options\": { \"profile\": \"https://hello.world/1.json\" } } When you chain this action with another action, you should be able to access the contents of https://hello.world/1.json via {{$jason.profile}} . The value in the key/value pair can take the form of: a single url: \"profile\": \"https://...\" an array of urls: \"profiles\": [\"https://...\", \"https://...\", \"https://...\"]","title":"\u25a0 options"},{"location":"actions/#return-value","text":"returns the constructed options object. For example, let's say https://blahblah.blah/1.json and https://blahblah.blah/2.json each contained the following JSON files respectively: { \"items\": [\"abc\", \"def\", \"ghi\"] } { \"items\": [\"cba\", \"fed\", \"ihg\"] } We can fetch them in parallel like this: { \"type\": \"$require\", \"options\": { \"items1\": \"https://blahblah.blah/1.json\", \"items2\": \"https://blahblah.blah/2.json\" }, \"success\": { \"type\": \"$render\" } } As a result, when we are ready to $render , the $jason value will be: { \"items1\": { \"items\": [\"abc\", \"def\", \"ghi\"] }, \"items2\": { \"items\": [\"cba\", \"fed\", \"ihg\"] } }","title":"\u25a0 return value"},{"location":"actions/#note","text":"Unlike $set or $cache.set , the $require action on its own doesn't persist the data in any way. So if you want to persist them to a local variable or a cache variable, you will need to chain the result to these actions and take care of assignment that way. Here's an example: { \"type\": \"$require\", \"options\": { \"profiles\": [\"https://...\", \"https://...\", \"https://\"] }, \"success\": { \"type\": \"$set\", \"options\": { \"profiles\": \"{{$jason.profiles}}\" } } }","title":"\u25a0 note"},{"location":"actions/#functional","text":"Just like functions in any other programming language, you can call an action from an action, wait for it to return, and use the return value to continue where it left off.","title":"\u2500\u2500 FUNCTIONAL \u2500\u2500"},{"location":"actions/#lambda","text":"Call another action by name (This is how trigger is implemented internally) { \"type\": \"$lambda\", \"options\": { \"name\": \"refresh\", \"options\": { \"url\": \"https://jasonbase.com/things/3nf.json\" } }, \"success\": { \"type\": \"$render\" }, \"error\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Error\", \"description\": \"Something went wrong\" } } } Above code is the same as: { \"trigger\": \"refresh\", \"options\": { \"url\": \"https://jasonbase.com/things/3nf.json\" }, \"success\": { \"type\": \"$render\" }, \"error\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Error\", \"description\": \"Something went wrong\" } } } In most cases you may want to use trigger but sometimes it's useful to use $lambda directly, for example if you want to dynamically trigger different actions. Example: { \"type\": \"$lambda\", \"options\": { \"name\": \"{{action_name}}\", \"options\": { \"url\": \"https://jasonbase.com/things/3nf.json\" } }, ... }","title":"$lambda"},{"location":"actions/#options_1","text":"name: the name of the action to trigger, registered under actions registry options: options object to pass to the next action","title":"\u25a0 options"},{"location":"actions/#return-value_1","text":"Whatever the triggered action returns via $return.success or $return.error","title":"\u25a0 return value"},{"location":"actions/#returnsuccess","text":"Unless you explicitly call $return.success or $return.error , all triggered actions terminate when they reach the end of the call chain. To return to the action which called the current action with a success state, we need to use $return.success . Then the caller action will resume where it left off and keep executing its success action.","title":"$return.success"},{"location":"actions/#options_2","text":"The return value to pass back to the caller action. If not specified, it automatically returns the current $jason value","title":"\u25a0 options"},{"location":"actions/#no-success-or-error-of-its-own","text":"none : Since $return.success is an action solely designed for returning the control back to the caller action, $return.success itself does not have success or error actions.","title":"\u25a0 no success or error of its own"},{"location":"actions/#example","text":"In the example below, the display_banner triggers fetch , and then displays a banner using the return value $jason . Notice how the $lambda action's success takes over after the fetch action returns via $return.success . { \"display_banner\": { \"type\": \"$lambda\", \"options\": { \"name\": \"fetch\" }, \"success\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"The number of items:\", \"description\": \"{{$jason.items.length}}\" } } }, \"fetch\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/3nf.json\" }, \"success\": { \"type\": \"$return.success\", \"options\": { \"items\": \"{{$jason}}\" } } } } Again, this is the same as using trigger : { \"display_banner\": { \"trigger\": \"return_homer_simpson\", \"success\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"The number of items:\", \"description\": \"{{$jason.items.length}}\" } } }, \"fetch\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/3nf.json\" }, \"success\": { \"type\": \"$return.success\", \"options\": { \"items\": \"{{$jason}}\" } } } }","title":"\u25a0 example"},{"location":"actions/#returnerror","text":"Pretty much the same as $return.success , except that it returns the control back to the caller action's error action.","title":"$return.error"},{"location":"actions/#view","text":"Actions related to drawing views","title":"\u2500\u2500\u2500\u2500 VIEW \u2500\u2500\u2500\u2500"},{"location":"actions/#reload","text":"Refreshes the view completely by re-fetching content from the current URL. { \"items\": [{ \"type\": \"label\", \"text\": \"Refresh\", \"action\": { \"type\": \"$reload\" } }] }","title":"$reload"},{"location":"actions/#options_3","text":"none","title":"\u25a0 options"},{"location":"actions/#return-value_2","text":"none This will reload the page when a user taps on the item .","title":"\u25a0 return value"},{"location":"actions/#render","text":"Renders a template with data","title":"$render"},{"location":"actions/#options_4","text":"data : Data to render. If not specified, it's the $jason value at the point $render was called. template : Template name to render. If not specified, it will look for $jason.head.templates.body type : \"html\" | \"json\" (Default is json . See html templating to learn more about how to render an HTML string natively using Jason)","title":"\u25a0 options"},{"location":"actions/#return-value_3","text":"none","title":"\u25a0 return value"},{"location":"actions/#example_1","text":"","title":"\u25a0 example"},{"location":"actions/#rendering-return-value-from-the-previous-action","text":"By default $render renders the data returned from its previous action. { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonbase.com/things/gbe.json\" }, \"success\": { \"type\": \"$render\" } } For example, let's say the network request returns the following result: { \"name\": \"Mr. Fisherman\", \"image\": \"http://i.giphy.com/OmK8lulOMQ9XO.gif\", \"status\": \"Busy fishing on the iPhone\" } All Jasonette actions store their return values under $jason object when they return. So we can access above value using the $jason variable. Here's how we would write the body template: { \"$jason\": { \"head\": { ... \"templates\": { \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"image\", \"url\": \"{{$jason.image}}\" }, { \"type\": \"label\", \"text\": \"{{$jason.text}}\" }, { \"type\": \"label\", \"text\": \"{{$jason.status}}\" }] }] } ... } }","title":"Rendering return value from the previous action"},{"location":"actions/#specifying-data-when-rendering","text":"In most cases you will use the above method--rendering data passed in as a return value from the previous action. However, you can also use $render as standalone, by manually specifying its data, like this (You rarely need to use this method): { \"type\": \"$render\", \"options\": { \"data\": [{ \"name\": \"Ethan\", \"id\": \"1\" }, { \"name\": \"Jason\", \"id\": \"2\" }, { \"name\": \"Jasonette\", \"id\": \"3\" }] } }","title":"Specifying data when rendering"},{"location":"actions/#rendering-the-body-template","text":"In most cases you will use $render without manually specifying the template, because it will assume you're rendering the body template. For example, a typical $render looks like this: { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.com/req.json\" }, \"success\": { \"type\": \"$render\" } } If no template option is specified, $render will look for a body template inside $jason.head.templates and use that to render the data. For example, from the following JSON, { \"$jason\": { \"head\": { \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason}}\": { \"type\": \"label\", \"text\": \"{{text}}\" } } }] } ... } } When $render runs, it will take the JSON markup inside $jason.head.templates.body , render it using the data, onto the view.","title":"Rendering the body template"},{"location":"actions/#manually-specifying-the-template-to-render","text":"But sometimes you can also specify the template name. For example, we may want to render a template named empty instead of the default body template: { \"$jason\": { \"head\": { \"templates\": { \"body\": { .... }, \"empty_template\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Empty view\" }] }] } ... } } In this case we could pass {\"template\": \"empty_template\"} as an option, like this: { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.com/req.json\" }, \"success\": { \"type\": \"$render\" }, \"error\": { \"type\": \"$render\", \"options\": { \"template\": \"empty_template\" } } }","title":"Manually specifying the template to render"},{"location":"actions/#how-is-render-different-from-reload","text":"$render redraws an existing template you already downloaded, using dynamic data. $reload completely refreshes the current URL. Here's an example scenario: Jason view loads and fetches a JSON markup from the server ( main.json ) main.json makes an API request to Twitter to fetch Tweets. (https://api.twitter.com/1.1/statuses/user_timeline.json) Then it renders the result using its body template, which is under $jason.head.templates.body in main.json . From this point on, calling $render simply takes the $jason.head.templates.body we have in memory, and renders whatever data we pass in. However calling $reload will make a full refresh, going back to step 1.","title":"How is $render different from $reload?"},{"location":"actions/#conclusion","text":"In most cases, you call $render at the end of an action call chain, rendering the $jason return value from its preceding action. Also, in most cases $render is used without specifying template or data options. Just don't forget to have a template under $jason.head.templates.body , since $render will automatically render that. Also, remember that you can access the return value using $jason from the template.","title":"Conclusion"},{"location":"actions/#snapshot","text":"Takes a snapshot of the currently visible screen","title":"$snapshot"},{"location":"actions/#options_5","text":"none","title":"\u25a0 options"},{"location":"actions/#return-value_4","text":"The return value is in this format: { \"data\": \"....\", \"data_uri\": \"....\", \"content_type\": \"image/jpeg\", } Returns the snapshot as raw data under data attribute. Also returns data_uri attribute, which contains the data-uri You can utilize the data by passing it to another action using success The content_type is \"image/jpeg\"","title":"\u25a0 return value"},{"location":"actions/#example_2","text":"Take a snapshot and share { \"type\": \"$snapshot\", \"success\": { \"type\": \"$util.share\", \"options\": { \"items\": [ { \"type\": \"image\", \"data\": \"{{$jason.data}}\" } ] } } } Share sheet SMS example","title":"\u25a0 example"},{"location":"actions/#href","text":"An action version of href . Works the same way, but just another way to invoke href. Use this when a component doesn't support href attribute directly but supports an action . Sometimes it's useful when you want to invoke href without displaying a disclosure indicator. (href comes with a disclosure indicator by default)","title":"$href"},{"location":"actions/#options_6","text":"It's the same set of attributes as href since it simply invokes the href when triggered. url the url to transition to view can be \"web\" | \"app\" | \"jason\" (default) options Works the same way as the options object for href transition can be \"modal\" | \"fullscreen\" | \"push\" (default) preload A preload JASON markup to render before the next view renders.","title":"\u25a0 options"},{"location":"actions/#success-callback","text":"Normally when using the $href action, it just transitions to the next view. However you can use the success callback to the $href action **along with $ok action to implement a 2-way communication between views. To learn more, read the $ok action . Note: Not supported for a regular href . Only supported for $href action.","title":"\u25a0 \"success\" callback"},{"location":"actions/#return-value_5","text":"none","title":"\u25a0  return value"},{"location":"actions/#example-1","text":"{ \"type\": \"label\", \"text\": \"trigger href\", \"action\": { \"type\": \"$href\", \"options\": { \"url\": \"...\", \"transition\": \"...\", \"view\": \"...\" } } } is same as: { \"type\": \"label\", \"text\": \"trigger href\", \"href\": { \"url\": \"...\", \"transition\": \"...\", \"view\": \"...\" } } The only difference is: in case of items the second option displays a disclosure indicator since we're directly using href","title":"\u25a0 example 1"},{"location":"actions/#example-2","text":"This example opens Instagram app using its URL scheme { \"$jason\": { \"head\": { \"title\": \"Take a photo on instagram\" }, \"body\": { \"sections\": [ { \"items\": [ { \"type\": \"label\", \"text\": \"Take a photo on Instagram\", \"action\": { \"type\": \"$href\", \"options\": { \"url\": \"instagram://camera\", \"view\": \"app\" } } } ] } ] } } }","title":"\u25a0 example 2"},{"location":"actions/#example-3-using-preload","text":"Preload lets you specify a JSON markup for the next view before the next view loads. This helps with smooth transition. Here's an example: { \"type\": \"$href\", \"options\": { \"url\": \"https://www.jasonbase.com/dhen3\", \"preload\": { \"background\": \"#ff0000\", \"layers\": [{ \"type\": \"image\", \"url\": \"file://loading.gif\", \"style\": { \"top\": \"50%-25\", \"left\": \"50%-25\", \"width\": \"50\", \"height\": \"50\" } }] } } } Notice that the preload contains an entire view representation of a view. it DOES NOT contain the head part. preload is purely for displaying a temp view until the real view loads.","title":"\u25a0 example 3. Using preload"},{"location":"actions/#close","text":"Close a modal (works when the currently view is a modal)","title":"$close"},{"location":"actions/#options_7","text":"none","title":"\u25a0 options"},{"location":"actions/#return-value_6","text":"none","title":"\u25a0 return value"},{"location":"actions/#back","text":"Transition one step back from the current view If the current view is a modal, it closes the current view Otherwise it slides back to the previous view","title":"$back"},{"location":"actions/#options_8","text":"none","title":"\u25a0 options"},{"location":"actions/#return-value_7","text":"none","title":"\u25a0 return value"},{"location":"actions/#ok","text":"Similar to $back , however allows for a return value. This means you can send back a return value to the previous view using $ok . Here's how to get it to work:","title":"$ok"},{"location":"actions/#1-close-the-current-view-using-ok","text":"Remember to attach the return value payload under options . Otherwise it's the same as $back . { \"type\": \"$ok\", \"options\": { \"selection\": \"Americano\" } }","title":"1. Close the current view using $ok"},{"location":"actions/#2-the-previous-view-processes-the-return-value-using-the-success-callback","text":"Two points: The caller view must have opened the closing view with an $href action. The $href action must have a success callback (Otherwise how would you process it?) { \"type\": \"$href\", \"options\": { \"url\": \"file://selection.json\" }, \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Selected\", \"description\": \"You have selected {{$jason.selection}}\" } } } Notice that the options payload from the previous $ok action is accessible as $jason in the success callback.","title":"2. The previous view processes the return value using the success callback"},{"location":"actions/#scroll","text":"Programmatically scroll to top or bottom of a view","title":"$scroll"},{"location":"actions/#options_9","text":"position : top or bottom","title":"\u25a0 options"},{"location":"actions/#return-value_8","text":"none","title":"\u25a0 return value"},{"location":"actions/#example_3","text":"{ \"type\": \"$scroll\", \"options\": { \"position\": \"bottom\" } }","title":"Example"},{"location":"actions/#functional-example","text":"Github Search with scroll feature: https://jasonbase.com/things/1KQB","title":"Functional example"},{"location":"actions/#network","text":"","title":"\u2500\u2500 NETWORK \u2500\u2500"},{"location":"actions/#networkrequest","text":"Make GET/POST/PUT/DELETE network requests","title":"$network.request"},{"location":"actions/#options_10","text":"url : The url to access. method : \"get\" | \"post\" | \"put\" | \"delete\" | \"head\" | \"patch\" . data : Parameters to send along with the url (optional) header : Headers to attach to every request if any (optional) timeout : network request time out in seconds (optional). data_type : Specifies how the fetched response will be processed. Can be json , html , rss , or raw . json assumes that the return value will be in JSON format, whereas raw expects a plain text. You can use raw type when fetching a plain text or CSV. html is for fetching HTML content and especially required when you need to utilize HTML requests associated with cookies/sessions. rss is used to fetch RSS. The default is json . content_type : Specifies which format the parameters will be sent as. By default it's sent as a form object, but in case you specify {\"content_type\": \"json\"} the data will be submitted as a JSON string.","title":"\u25a0 options"},{"location":"actions/#return-value_9","text":"Whatever the server returns","title":"\u25a0 return value"},{"location":"actions/#examples","text":"","title":"\u25a0 examples"},{"location":"actions/#example-1-simple-json-get-request","text":"Here's a simple example of GET request, fetching JSON. We don't need to specify {\"type\": \"get\"} here since the default type is \"get\" { \"type\": \"$network.request\", \"options\": { \"url\": \"http://plasticfm.herokuapp.com/things/3.json\" }, \"success\": { \"type\": \"$render\" } }","title":"Example 1. Simple JSON GET request"},{"location":"actions/#example-2-more-complex-json-requests","text":"This time we're going to make a POST request, with all the data and header { \"type\": \"$network.request\", \"options\": { \"url\": \"http://www.jasonbase.com/messages.json\", \"method\": \"post\", \"data\": { \"user_id\": \"fI9\", \"message\": \"Hello there\" }, \"header\": { \"auth_token\": \"fnekfla98dls9sNFK0nf3\" } }, \"success\": { \"type\": \"$render\" }, \"error\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Error\", \"description\": \"Uh oh, something went wrong\" } } }","title":"Example 2. More complex JSON requests"},{"location":"actions/#example-3-html-get-request","text":"You can also make HTML type requests. Here's a request with html data_type. { \"type\": \"$network.request\", \"options\": { \"url\": \"https://news.ycombinator.com/newest\", \"dataType\": \"html\" }, \"success\": { \"type\": \"$render\", \"options\": { \"type\": \"html\" } } } It fetches the url as html type, and then renders it using the html type parser. See templates for more details on how to render HTML content in Jasonette.","title":"Example 3. HTML GET request"},{"location":"actions/#example-4-html-post-request-with-cookies","text":"Dealing with cookies is simple. All you need to do is make the request to create a session. Jason will automatically store the returned cookie, and then attach it to all subsequent requests. Here's an example of signing into a website by making an HTML data_type $network.request call: { \"type\": \"$network.request\", \"options\": { \"url\": \"https://news.ycombinator.com/login\", \"method\": \"post\", \"data\": { \"acct\": \"{{$get.username}}\", \"pw\": \"{{$get.password}}\" }, \"data_type\": \"html\" }, \"success\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://news.ycombinator.com/saved?id={{$get.username}}\", \"data_type\": \"html\" }, \"success\": { \"type\": \"$render\", \"options\": { \"type\": \"html\" } } } } It first signs into the site by making a POST request of {\"data_type\": \"html\"} . Then it stores the cookie returned from the server. Once the login succeeds, it makes a GET request of {\"data_type\": \"html\"} to an actual content API. The cookie from the previous step is automatically applied to the request.","title":"Example 4. HTML POST request with cookies"},{"location":"actions/#networkupload","text":"Upload data to cloud providers. Currently supports S3, but feel free to extend","title":"$network.upload"},{"location":"actions/#options_11","text":"type : \"s3\" (Currently only supports s3) bucket : s3 bucket name path : the s3 path to upload the file sign_url : To upload files to s3, you need to acquire a signed url from S3 first, and then upload it to that URL.","title":"\u25a0 options"},{"location":"actions/#return-value_10","text":"file_name : a randomly generated filename. When $network.upload is called, it automatically generates a random, hashed filename to ensure uniqueness, and then stores the file onto the cloud provider with that name. We need this attribute to keep track of the data we've just uploaded. For example, we may want to store the filename somewhere so we can access this file later.","title":"\u25a0 return value"},{"location":"actions/#example_4","text":"This example takes a photo and uploads to S3. { \"type\": \"$media.camera\", \"options\": { \"quality\": \"0.4\" }, \"success\": { \"type\": \"$network.upload\", \"options\": { \"type\": \"s3\", \"bucket\": \"fm.ethan.jason\", \"data\": \"{{$jason.data}}\", \"path\": \"\", \"sign_url\": \"https://imagejason.herokuapp.com/sign_url\" }, \"success\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://imagejason.herokuapp.com/post\", \"method\": \"post\", \"data\": { \"bucket\": \"fm.ethan.jason\", \"path\": \"/\", \"filename\": \"{{$jason.filename}}\" } }, \"success\": { \"type\": \"$reload\" } } } } Here's what's going on above:","title":"\u25a0 example"},{"location":"actions/#1-the-client-takes-a-photo-using-the-mediacamera-action-and-passes-the-raw-data-to-networkupload-as-jason","text":"","title":"1. The client takes a photo using the $media.camera action and passes the raw data to $network.upload as $jason."},{"location":"actions/#2-the-networkupload-first-looks-at-optionssign_url-and-makes-a-request-to-get-the-signed-url","text":"","title":"2. The $network.upload first looks at options.sign_url and makes a request to get the signed url."},{"location":"actions/#3-the-server-should-return-a-signed-url-for-s3","text":"The sign_url attribute is the URL to your server, and your server should generate a signed url and return the result in the following format: { \"$jason\": \"https://s3.amazonaws.com/...../...?AWSAccessKeyId=.....&Expires=.....&Signature=.....\"} See the full server side code to learn how to generate signed urls.","title":"3. The server should return a signed url for S3."},{"location":"actions/#4-the-client-then-uploads-the-content-passed-in-as-data-to-the-just-generated-signed-url-using-a-randomly-generated-filename","text":"","title":"4. The client then uploads the content passed in as data to the just generated signed url, using a randomly generated filename."},{"location":"actions/#5-once-the-upload-finishes-the-networkupload-returns-the-filename-generated-from-step-3","text":"","title":"5. Once the upload finishes, the $network.upload returns the filename generated from step 3."},{"location":"actions/#6-then-it-stores-the-filename-to-our-server-by-making-a-post-networkrequest-to-httpsimagejasonherokuappcompost","text":"Check out the full code on Github: s3-upload-example","title":"6. Then it stores the filename to our server by making a POST $network.request to https://imagejason.herokuapp.com/post"},{"location":"actions/#session","text":"Check out a functional demo app with backend server, with user accounts session-example","title":"\u2500\u2500 SESSION \u2500\u2500"},{"location":"actions/#sessionset","text":"$session.set takes care of token authentication to authenticate into any mobile API. You need to call $session.set after a $network.request action to an authentication endpoint, which returns an authentication token. Sessions are tied to domain, which means as long as you authenticate with a domain, all other URLs under the same domain will use the same token therefore you won't need to re-authenticate for every URL under the same domain. For cookie based HTML authentication, see Example 4 from $network.request above .","title":"$session.set"},{"location":"actions/#options_12","text":"domain : the domain to set the session for (example: \"jasonbase.com\") header : headers to attach to every future $network.request to the specified domain. body : body parameters to attach to every future $network.request to the specified domain.","title":"\u25a0 options"},{"location":"actions/#return-value_11","text":"none","title":"\u25a0 return value"},{"location":"actions/#example_5","text":"Here's an example: \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://sessionjason.herokuapp.com/users/sign_in.json\", \"method\": \"post\", \"data\": { \"user[email]\": \"{{$get.email}}\", \"user[password]\": \"{{$get.password}}\" } }, \"success\": { \"type\": \"$session.set\", \"options\": { \"domain\": \"sessionjason.herokuapp.com\", \"header\": { \"X-User-Email\": \"{{$jason.email}}\", \"X-User-Token\": \"{{$jason.authentication_token}}\" } }, \"success\": { \"type\": \"$href\", \"options\": { \"url\": \"https://sessionjason.herokuapp.com/posts.json\", \"transition\": \"replace\" } } }, \"error\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Enter credentials\", \"description\": \"Please enter both email and password\" } } } Let's walk through each step. The first action is $network.request . It makes a POST request to https://sessionjason.herokuapp.com/users/sign_in.json , to which the server returns the following JSON as a response: { \"id\":2, \"email\":\"ethan@ethan.fm\", \"created_at\":\"2016-10-14T22:55:00.664Z\", \"updated_at\":\"2016-10-15T05:22:41.730Z\", \"authentication_token\":\"fnekz4hf7ghw95m6ks0rf01j\" } Next, we proceed to the next action, which is $session.set . Here we use the return value from the $network.request and set the header. This stores the header object for the specified domain (session.herokuapp.com), and this stored header will be attached to all future $network.request to this domain. The header to be stored will look like this: { \"header\": { \"X-User-Email\": \"ethan@ethan.fm\", \"X-User-Token\": \"fnekz4hf7ghw95m6ks0rf01j\" } } After the $session.set , it goes to the next action $href . This transitions to https://sessionjason.herokuapp.com/posts.json . This time, the network request will automatically attach the stored header to the request. The server will recognize the authentication token and respond with the actual posts.json .","title":"\u25a0 example"},{"location":"actions/#sessionreset","text":"This action lets you clear sessions for a specified domain. Can be used for both token authentication and web authentication via cookies For token authentication, it clears your headers and body parameters objects tied to the domain, created through $session.set . For web requests (html), it clears your cookie tied to the domain, created through html type $network.request , as described here .","title":"$session.reset"},{"location":"actions/#options_13","text":"url : The url from which to sign out. domain : The domain from which to sign out (used for APIs) data : Parameters to send along with the url (optional) type : \"html\" | \"json\" (Default is \"json\")","title":"\u25a0  options"},{"location":"actions/#examples_1","text":"","title":"\u25a0 examples"},{"location":"actions/#example-1-signing-out-of-token-authentication","text":"No need to specify type , since it's json by default. { \"type\": \"$session.reset\", \"options\": { \"domain\": \"sessionjason.herokuapp.com\" }, \"success\": { \"type\": \"$reload\" } }","title":"Example 1. Signing out of token authentication"},{"location":"actions/#return-value_12","text":"none","title":"\u25a0 return value"},{"location":"actions/#example-2-signing-out-of-a-website-by-clearing-cookies","text":"Just set the options.type as html . { \"type\": \"$session.reset\", \"options\": { \"domain\": \"http://news.ycombinator.com\", \"type\": \"html\" }, \"success\": { \"type\": \"$reload\" } } Check out a functional demo app with backend server, with user accounts session-example","title":"Example 2. Signing out of a website by clearing cookies"},{"location":"actions/#variable","text":"Use $set and $get to set and get local variables. Local variables are valid only within the current view and only stays on the memory.","title":"\u2500\u2500 VARIABLE \u2500\u2500"},{"location":"actions/#set","text":"Set local variables.","title":"$set"},{"location":"actions/#options_14","text":"key:value pairs. The key is the variable name, and the value is the variable's value.","title":"\u25a0 options"},{"location":"actions/#return-value_13","text":"none","title":"\u25a0 return value"},{"location":"actions/#example_6","text":"In the following example, the $set action sets the value of the two local variables firstname and lastname as ethan and gliechtenstein , respectively. { \"type\": \"$set\", \"options\": { \"firstname\": \"ethan\", \"lastname\": \"gliechtenstein\" } } This is how you set a variable. We are setting local variables firstname and lastname to ethan and gliechtenstein respectively.","title":"\u25a0 example"},{"location":"actions/#do-something-after-setting-the-local-variable","text":"If you're using a local variable in your body template and wish to update the view to reflect the updated local variable, you need to call $render . For example you can add a success attribute to above action to redraw the view after update, like this: { \"type\": \"label\", \"text\": \"{{$get.firstname}} {{$get.lastname}}\", \"action\": { \"type\": \"$set\", \"options\": { \"firstname\": \"ethan\", \"lastname\": \"gliechtenstein\" }, \"success\": { \"type\": \"$render\" } } }","title":"do something after setting the local variable"},{"location":"actions/#get","text":"You can access local variables by using a template expression {{$get.VARIABLE_NAME}} Normally, the usage flow is: Set a variable using $set action Use the variable from template through {{$get.VARIABLE_NAME}} expression.","title":"$get"},{"location":"actions/#example_7","text":"Once you set firstname and lastname like we did above, we can use them like this: [ { \"type\": \"label\", \"text\": \"{{$get.firstname}}\" }, { \"type\": \"label\", \"text\": \"{{$get.lastname}}\" } ] Here's a full usage example using both $set action and $get expression. { \"$jason\": { \"head\": { \"actions\": { \"$load\": { \"type\": \"$set\", \"options\": { \"bar\": \"#\" }, \"success\": { \"type\": \"$render\" } }, \"$pull\": { \"type\": \"$set\", \"options\": { \"bar\": \"{{$get.bar+'#'}}\" }, \"success\": { \"type\": \"$render\" } } }, \"templates\": { \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"{{$get.bar}}\" }] }] } } } } }","title":"\u25a0 example"},{"location":"actions/#heres-whats-going-on_1","text":"When the view loads ( $load system event), it sets the local variable bar 's value as \"#\", then renders the template with a label that displays the variable bar ( {{$get.bar}} ). When the user makes a pull to refresh gesture ( $pull event), it appends another \"#\" to bar and then renders again.","title":"Here's what's going on:"},{"location":"actions/#cache","text":"Cache lets you persist and retrieve content. Unlike local variables, it will stay even when you close the app and come back.","title":"\u2500\u2500 CACHE \u2500\u2500"},{"location":"actions/#cache-vs-local-variable","text":"Cache and local variables are both sandboxed per view url. Therefore anything you store to cache and local variable is stored just for that view. Local variables are only on memory so will go away when the view refreshes. But cache is stored persistently and stays until you overwrite or reset it, even if the app is killed and restarted.","title":"Cache vs. Local variable"},{"location":"actions/#write","text":"$cache.set action is used to store to cache.","title":"Write"},{"location":"actions/#options_15","text":"key:value pairs. The key is the cache variable name, and the value is the variable's value.","title":"\u25a0  options"},{"location":"actions/#return-value_14","text":"returns the updated $cache object, which looks like this: { \"items\": [...] }","title":"\u25a0 return value"},{"location":"actions/#examples_2","text":"","title":"\u25a0 examples"},{"location":"actions/#example-1-set-cache","text":"In the following example, it first makes a $network.request , and then takes its return value {{$jason}} and stores it to cache using the $cache.set action. { \"type\": \"$network.request\", \"options\": { \"url\": \"http://jasonclient.org/api/items.json\" }, \"success\": { \"type\": \"$cache.set\", \"options\": { \"items\": \"{{$jason}}\" } } }","title":"Example 1. Set cache"},{"location":"actions/#example-2-set-cache-and-use-the-updated-value","text":"Simply setting the cache doesn't update the view. Let's try to render the updated result. { \"type\": \"$network.request\", \"options\": { \"url\": \"http://jasonclient.org/api/items.json\" }, \"success\": { \"type\": \"$cache.set\", \"options\": { \"items\": \"{{$jason}}\" }, \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Items fetched\", \"description\": \"{{$cache.items.length}}\" } } } }","title":"Example 2. Set cache and use the updated value"},{"location":"actions/#read","text":"Directly access $cache variable from a template expression, for example {{$cache.items}} .","title":"Read"},{"location":"actions/#example_8","text":"For example, you could store a tracking_keyword value locally and automatically perform a search whenever the document loads. { \"type\": \"$oauth.request\", \"options\": { \"url\": SEARCH_URL, \"data\": { \"search_query\": \"{{$cache.tracking_keyword}}\" } } }","title":"\u25a0 example"},{"location":"actions/#reset","text":"Use $cache.reset action to reset the cache associated with the current url.","title":"Reset"},{"location":"actions/#options_16","text":"none","title":"\u25a0 options"},{"location":"actions/#return-value_15","text":"none","title":"\u25a0 return value"},{"location":"actions/#example_9","text":"The following will wipe out all the cache values associated with the current view url. { \"type\": \"$cache.reset\" }","title":"\u25a0 example"},{"location":"actions/#global","text":"In most cases it is recommended to use $cache to persist data, because they are sandboxed per URL and it's secure. But sometimes you may want to store variables globally so they're accessible from all the views. This is what global variable does. Just like $cache , it will stay even when you close the app and come back later.","title":"\u2500\u2500 GLOBAL \u2500\u2500"},{"location":"actions/#global-vs-cache-vs-local-variables","text":"Cache is sandboxed per URL, but Global variables are global to the entire app. Both Global and Cache persist data so they will stick around unless you delete the app or explicitly delete them using $cache.reset or $global.reset .","title":"Global vs. Cache vs. Local Variables"},{"location":"actions/#write_1","text":"$global.set action is used to write to global variables.","title":"Write"},{"location":"actions/#options_17","text":"key:value pairs. The key is the global variable name, and the value is the variable's value.","title":"\u25a0  options"},{"location":"actions/#return-value_16","text":"returns the updated $global object, which looks like this: { \"key1\": [...], \"key2\": ... }","title":"\u25a0 return value"},{"location":"actions/#examples_3","text":"","title":"\u25a0 examples"},{"location":"actions/#example-1-set-global","text":"In the following example, it first makes a $network.request , and then takes its return value {{$jason}} and stores it to global using the $global.set action. { \"type\": \"$network.request\", \"options\": { \"url\": \"http://jasonclient.org/api/items.json\" }, \"success\": { \"type\": \"$global.set\", \"options\": { \"items\": \"{{$jason}}\" } } }","title":"Example 1. Set global"},{"location":"actions/#example-2-set-global-and-use-the-updated-value","text":"Simply setting the global doesn't update the view. Let's try to render the updated result. { \"type\": \"$network.request\", \"options\": { \"url\": \"http://jasonclient.org/api/items.json\" }, \"success\": { \"type\": \"$global.set\", \"options\": { \"items\": \"{{$jason}}\" }, \"success\": { \"type\": \"$render\", \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Items fetched\", \"description\": \"{{$global.items.length}}\" } } } } }","title":"Example 2. Set global and use the updated value"},{"location":"actions/#read_1","text":"Just like $cache , you can read global variables using template expressions:","title":"Read"},{"location":"actions/#example_10","text":"For example, you could store $get.message (local variable) into a global variable named url , and then display a $util.alert with the global variable we just set, like this: { \"$jason\": { \"head\": { \"actions\": { ... \"store\": { \"type\": \"$global.set\", \"options\": { \"url\": \"{{$get.message}}\" }, \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Current global 'url' variable\", \"description\": \"{{$global.url}}\" } } }, ... }, ... } } }","title":"\u25a0 example"},{"location":"actions/#example-use-a-modal-to-set-global-and-render-the-result","text":"The following JSON opens file://2.json . { \"$jason\": { \"head\": { \"title\": \"Global Test 1\", \"actions\": { \"$show\": { \"type\": \"$render\" }, \"$pull\": { \"type\": \"$reload\" } }, \"templates\": { \"body\": { \"sections\": [ { \"type\": \"vertical\", \"items\": [ { \"type\": \"button\", \"text\": \"{{$global.something || 'Set Global'}}\", \"action\": { \"type\": \"$href\", \"options\": { \"url\": \"file://2.json\", \"transition\": \"modal\" } } } ] } ] } } } } } Here's the contents of 2.json . { \"$jason\": { \"head\": { \"title\": \"Global Test 2\", \"actions\": { \"$show\": { \"type\": \"$render\" }, \"$pull\": { \"type\": \"$reload\" }, \"save\": { \"type\": \"$global.set\", \"options\": { \"something\": \"{{$get.something}}\" }, \"success\": { \"type\": \"$close\" } } }, \"templates\": { \"body\": { \"header\": { \"menu\": { \"text\": \"Reset\", \"style\": { \"size\": \"15\", \"font\": \"Helvetica\", \"color\": \"#4f8ff7\" }, \"action\": { \"type\": \"$global.reset\", \"options\": { \"items\": [\"something\"] }, \"success\": { \"type\": \"$close\" } } } }, \"sections\": [{ \"type\": \"vertical\", \"items\": [{ \"type\": \"label\", \"text\": \"Global value is: {{$global.something || ''}}\" }, { \"type\": \"vertical\", \"style\": { \"padding\": \"10\" }, \"components\": [{ \"type\": \"textfield\", \"name\": \"something\", \"value\": \"{{$global.something || ''}}\", \"placeholder\": \"Add something here\" }] }, { \"type\": \"button\", \"text\": \"Save Global Variable\", \"action\": { \"trigger\": \"save\" } } ] }] } } } } }","title":"Example: Use a modal to set global and render the result"},{"location":"actions/#reset_1","text":"Use $global.reset action to remove global variables by name","title":"Reset"},{"location":"actions/#options_18","text":"items : An array of global variable names to remove","title":"\u25a0 options"},{"location":"actions/#return-value_17","text":"The resulting $global object after removing the variables","title":"\u25a0 return value"},{"location":"actions/#example_11","text":"The following will wipe out all the global variables named key1 and key2 . { \"type\": \"$global.reset\", \"items\": [\"key1\", \"key2\"] }","title":"\u25a0 example"},{"location":"actions/#script","text":"Jasonette lets you use simple inline JavaScript code inside template expressions. Here's an example where we use JSON.stringify : { \"items\": [ { \"type\": \"label\", \"url\": \"Full JSON string\" }, { \"type\": \"label\", \"text\": \"{{JSON.stringify($jason)}}\" } ] } However sometimes you may want to import an entire JavaScript library, just like you do with HTML using the <script> tag.","title":"\u2500\u2500 SCRIPT \u2500\u2500"},{"location":"actions/#scriptinclude","text":"Include remote/local JavaScript file into the template context.","title":"$script.include"},{"location":"actions/#options_19","text":"items : An array of include objects, each of which has the following attributes: url : load from a url. You can use both remote (http:// or https://) or local (file://) urls text : inline JavaScript code to import","title":"\u25a0 options"},{"location":"actions/#return-value_18","text":"none","title":"\u25a0  return value"},{"location":"actions/#example_12","text":"In the following example, we: import underscore.js , crypto.js , he.js , as well as inject an inline JavaScript code into the context via text attribute. Use it by accessing the $root context. The JavaScript libraries get injected into the global context ( $root ) after running $script.include . Note that these JavaScript libraries referenced by url are downloaded in parallel just like how $require action works. { \"type\": \"$script.include\", \"options\": { \"items\": [ { \"url\": \"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\" }, { \"text\": \"var randomcolor = function() { return '#'+Math.floor(Math.random()*16777215).toString(16); }\" }, { \"url\": \"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.min.js\" }, { \"url\": \"https://rawgit.com/mathiasbynens/he/master/he.js\" } ] }, \"success\": { \"type\": \"$render\", \"options\": { \"data\": { \"raw\": \"no man&#38;s land\", \"decoded\": \"{{$root.he.decode('no man&#39;s land')}}\", \"unique\": \"{{$root._.uniq([1,2,3,3,3,4,4,4,4,5])}}\" } } } }","title":"\u25a0  example"},{"location":"actions/#scriptclear","text":"Clears out the global context of the JavaScript template engine.","title":"$script.clear"},{"location":"actions/#options_20","text":"none","title":"\u25a0 options"},{"location":"actions/#return-value_19","text":"none","title":"\u25a0  return value"},{"location":"actions/#example_13","text":"{ \"type\": \"$script.clear\" }","title":"\u25a0  example"},{"location":"actions/#util","text":"Utility and widget methods","title":"\u2500\u2500 UTIL \u2500\u2500"},{"location":"actions/#utilbanner","text":"Displays a banner notification with title and description.","title":"$util.banner"},{"location":"actions/#options_21","text":"title description type : \"error\" | \"success\" | \"info\" (default)","title":"\u25a0 options"},{"location":"actions/#return-value_20","text":"none","title":"\u25a0  return value"},{"location":"actions/#example_14","text":"{ \"type\": \"$util.banner\", \"options\": { \"title\": \"Hello World\", \"description\": \"I'm a banner. I display a title and a description\", \"type\": \"info\" } }","title":"\u25a0  example"},{"location":"actions/#utiltoast","text":"Displays a toast notification with a simple text","title":"$util.toast"},{"location":"actions/#options_22","text":"text : The text to display type : \"error\" | \"info\" | \"warning\" | \"dark\" | \"default\" | \"success\" (default)","title":"\u25a0 options"},{"location":"actions/#return-value_21","text":"none","title":"\u25a0 return value"},{"location":"actions/#example_15","text":"{ \"type\": \"$util.toast\", \"options\": { \"text\": \"I'm a toast. I display a simple text.\", \"type\": \"warning\" } }","title":"\u25a0 example"},{"location":"actions/#utilalert","text":"Displays an alert. Alerts can also have form input fields users can fill in. When you use the form input, $util.alert returns the resulting key/value pairs wrapped with $jason .","title":"$util.alert"},{"location":"actions/#types-of-alerts","text":"Basic : You can just display a simple alert that has an ok and a cancel button. Form : You can also add input fields to the alert and use it to receive user input. Basic Alert Form Alert","title":"Types of alerts"},{"location":"actions/#options_23","text":"title : title of the alert description : description caption form (optional): Array of input elements. Each input can have the following attributes: name : name of the field. Use this name to retrieve the value filled out by the user value : set this attribute to preset the value inside the input field. placeholder : placeholder text type (optional) : secure to hide keystrokes with *","title":"\u25a0 options"},{"location":"actions/#return-value_22","text":"if the form attribute is used, returns the filled out $jason object if the form attribute is NOT used, no return value If ok button was clicked, it triggers the success callback. If cancel button was clicked, it triggers the error callback.","title":"\u25a0  return value"},{"location":"actions/#examples_4","text":"","title":"\u25a0 examples"},{"location":"actions/#example-1-simple-notice-alert","text":"Just a simple alert with an OK and a Cancel button { \"type\": \"$util.alert\", \"options\": { \"title\": \"Basic Alert\", \"description\": \"I'm a basic alert. I simply display an alert that needs to be dismissed before moving forward\" }, \"success\": { \"type\": \"$render\" } }","title":"Example 1. Simple notice alert"},{"location":"actions/#example-2-form-alert","text":"Here's an example of an alert that lets users fill out a form and return the value. { \"type\": \"$util.alert\", \"options\": { \"title\": \"Demo alert with input\", \"description\": \"Try entering values and press OK\", \"form\": [{ \"name\": \"username\", \"placeholder\": \"Enter username\" }, { \"name\": \"password\", \"placeholder\": \"Enter password\", \"secure\": \"true\" }] } } In this case, after the user fills out the form and presses \"OK\", the action will finish with a return value that takes the following form: { \"$jason\": { \"username\": \"ethan\", \"password\": \"sdn3Uef2!\" } } To use this return value, you can chain another action as a success callback and use the attributes, like this: { \"type\": \"$util.alert\", \"options\": { \"title\": \"Sign in\", \"description\": \"Please enter username and password\", \"form\": [{ \"name\": \"username\" }, { \"type\": \"secure\", \"name\": \"password\" }] }, \"success\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://www.jasonclient.org/users/sign_in.json\", \"method\": \"post\", \"data\": { \"username\": \"{{$jason.username}}\", \"password\": \"{{$jason.password}}\" } } } }","title":"Example 2. Form Alert"},{"location":"actions/#utilshare","text":"Share a text, image, video, or a combination of them. Share sheet SMS example","title":"$util.share"},{"location":"actions/#options_24","text":"items (array): Array of items to be shared. Each item can have the following attributes type : \"text\" | \"image\" | \"video\" text : text data : raw data to be shared (only for image type) url : image url (only for image type) file_url : video url (only for video type)","title":"\u25a0 options"},{"location":"actions/#return-value_23","text":"none","title":"\u25a0 return value"},{"location":"actions/#examples_5","text":"","title":"\u25a0 examples"},{"location":"actions/#example-1-sharing-a-simple-text","text":"{ \"type\": \"$util.share\", \"options\": { \"items\": [{ \"type\": \"text\", \"text\": \"This is an automated message\" }] } }","title":"Example 1. Sharing a simple text"},{"location":"actions/#example-2-sharing-an-image-captured-from-snapshot","text":"{ \"type\": \"$snapshot\", \"success\": { \"type\": \"$util.share\", \"options\": { \"items\": [{ \"type\": \"image\", \"data\": \"{{$jason.data}}\" }] } } }","title":"Example 2. Sharing an image captured from $snapshot"},{"location":"actions/#example-3-sharing-a-video-captured-from-mediacamera","text":"{ \"type\": \"$media.camera\", \"success\": { \"type\": \"$util.share\", \"options\": { \"items\": [{ \"type\": \"video\", \"file_url\": \"{{$jason.file_url}}\" }] } } }","title":"Example 3. Sharing a video captured from $media.camera"},{"location":"actions/#example-4-sharing-an-image-from-a-url-and-a-text","text":"{ \"type\": \"$util.share\", \"options\": { \"items\": [{ \"type\": \"image\", \"url\": \"https://vjs.zencdn.net/v/oceans.png\" },{ \"type\": \"text\", \"text\": \"This is a picture of ocean\" }] } }","title":"Example 4. Sharing an image from a URL, and a text"},{"location":"actions/#utilpicker","text":"Opens a multiple choice picker menu, with each item linking to an action or an href .","title":"$util.picker"},{"location":"actions/#options_25","text":"title (string): The top title caption for the picker items (array): An array of items from which the user can choose. Each item can contain the following attributes: text : Text to display href : href to trigger when selected. action : action to call when selected.","title":"\u25a0 options"},{"location":"actions/#return-value_24","text":"none","title":"\u25a0 Return value"},{"location":"actions/#example_16","text":"{ \"$jason\": { \"head\": { ... }, \"body\": { \"header\": { \"menu\": { \"text\": \"Menu\", \"action\": { \"type\": \"$util.picker\", \"options\": { \"items\": [{ \"text\": \"Trigger $util.banner\", \"action\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Success\", \"description\": \"This is a banner\" } } },{ \"text\": \"Trigger $util.alert\", \"action\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Alert\", \"description\": \"This is an alert triggered by $util.picker\" } } },{ \"text\": \"Trigger $audio.play\", \"action\": { \"type\": \"$audio.play\", \"options\": { \"url\": \"https://s3.amazonaws.com/www.textcast.co/icons/yo.mp3\" } } }] } } } ... }","title":"\u25a0 example"},{"location":"actions/#utildatepicker","text":"Opens a date picker","title":"$util.datepicker"},{"location":"actions/#options_26","text":"none","title":"\u25a0  options"},{"location":"actions/#return-value_25","text":"When a user selects one of the dates it returns the selected date in in unix timestamp format (in string) like this: { \"value\": \"1471310358216\" }","title":"\u25a0  return value"},{"location":"actions/#example_17","text":"{ \"$jason\": { \"head\": { \"title\": \"Datepicker Demo\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Pick a date\", \"action\": { \"type\": \"$util.datepicker\", \"options\": { \"title\": \"Pick a date\", \"description\": \"Just pick one\" }, \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Selected date\", \"description\": \"{{(new Date(parseInt(<span style='color:#ff0000;'>$jason</span>) * 1000)).toString()}}\" } } } }] }] } } }","title":"\u25a0 example"},{"location":"actions/#utiladdressbook","text":"Fetches the addressbook to populate them into $jason.","title":"$util.addressbook"},{"location":"actions/#options_27","text":"none","title":"\u25a0  options"},{"location":"actions/#return-value_26","text":"Returns an array of contacts from the addressbook, like this: [ { \"name\": \"John\", \"phone\": \"9176568890\", \"email\": \"john@jasonclient.org\" }, { \"name\": \"Mary\", \"phone\": \"9172562890\", \"email\": \"mary@jasonclient.org\" }, { \"name\": \"Ethan\", \"phone\": \"2026468271\", \"email\": \"ethan@jasonclient.org\" } ]","title":"\u25a0  return value"},{"location":"actions/#example_18","text":"In this example, we access the addressbook when the view $load s, then $render the content using the given template. { \"$jason\": { \"head\": { \"title\": \"Addressbook demo\", \"actions\": { \"$load\": { \"type\": \"$util.addressbook\", \"success\": { \"type\": \"$render\" } } }, \"templates\": { \"body\": { \"sections\": [ { \"items\": { \"{{#each $jason}}\": { \"type\": \"vertical\", \"style\": { \"padding\": \"5\", \"spacing\": \"5\" }, \"components\": [ { \"type\": \"label\", \"text\": \"{{name}}\" }, { \"type\": \"label\", \"text\": \"{{JSON.stringify(phone)}}\" }, { \"type\": \"label\", \"text\": \"{{JSON.stringify(email)}}\" } ] } } } ] } } } } }","title":"\u25a0 example"},{"location":"actions/#required-permissions","text":"On iOS, $util.addressbook works out of the box so you don't need to do anything. But on Android you need to set up a android.permission.READ_CONTACTS permission. Just open up AndroidManifest.xml file from Android Studio, and uncomment the lines described below:","title":"\u25a0  Required Permissions"},{"location":"actions/#media","text":"Anything related to photo/video/camera.","title":"\u2500\u2500 MEDIA \u2500\u2500"},{"location":"actions/#mediacamera","text":"Capture a video or a photo using the device camera","title":"$media.camera"},{"location":"actions/#options_28","text":"type : \"photo\" | \"video\" edit : \"true\" (Don't include to remove the editing step) quality : \"high\" | \"medium\" | \"low\" (Default is \"medium\" )","title":"\u25a0  options"},{"location":"actions/#return-value_27","text":"Returns an object with multiple attributes which represent the video/photo file_url : local file url (Used for videos) data_uri : data-uri string data : raw data (Used for photos) content_type : \"image/png\" | \"image/jpeg\" | \"video/mp4\" For example, here's an example return value: { \"file_url\": \"...\", \"data_uri\": \"data:image/png;base64,.....\", \"data\": \"...\", \"content_type\": \"image/png\" } Normally you will want to pass the data to another action such as $network.upload .","title":"\u25a0 return value"},{"location":"actions/#example_19","text":"In the following example, we take a photo using $media.camera , and then utilize the data_url from the return value to set the background image url. { \"$jason\": { \"head\": { \"title\": \"Camera\", \"description\": \"Tap to open up camera\", \"actions\": { \"$load\": { \"type\": \"$media.camera\", \"options\": { \"edit\": \"true\", \"type\": \"photo\" }, \"success\": { \"type\": \"$render\" } } }, \"templates\": { \"body\": { \"background\": \"{{$jason.data_url}}\" } } } } }","title":"\u25a0 example"},{"location":"actions/#mediapicker","text":"Opens the device camera roll.","title":"$media.picker"},{"location":"actions/#options_29","text":"type : \"photo\" | \"video\" edit : \"true\" (Don't include to remove the editing step) quality : \"high\" | \"medium\" | \"low\" (Default is \"medium\" )","title":"\u25a0  options"},{"location":"actions/#return-value_28","text":"Same as $media.camera","title":"\u25a0  return value"},{"location":"actions/#example_20","text":"{ \"$jason\": { \"head\": { \"title\": \"Media picker\", \"description\": \"Tap to select media\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Select media\", \"action\": { \"type\": \"$media.picker\", \"options\": { \"edit\": \"true\", \"type\": \"video\" }, \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Selected {{$jason['content_type']}} at\", \"description\": \"{{$jason.file_url}}\" } } } }] }] } } }","title":"\u25a0  example"},{"location":"actions/#mediaplay","text":"plays a video from remote url.","title":"$media.play"},{"location":"actions/#options_30","text":"url : the video url to play muted : \"true\" to mute the sound","title":"\u25a0  options"},{"location":"actions/#return-value_29","text":"none","title":"\u25a0  return value"},{"location":"actions/#example_21","text":"{ \"$jason\": { \"head\": { \"title\": \"Video\", \"description\": \"Tap to play the video\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"image\", \"url\": \"https://vjs.zencdn.net/v/oceans.png\", \"action\": { \"type\": \"$media.play\", \"options\": { \"url\": \"https://vjs.zencdn.net/v/oceans.mp4\" } } }] }] } } }","title":"\u25a0  example"},{"location":"actions/#vision","text":"Barcode / QR Code detection To use $vision API, the body.background must be a camera type, with \"device\": \"back\" (front-facing camera can only scan your face, not scan barcodes). $vision.ready event gets triggered when the camera is ready. You can trigger $vision.scan to start scanning for barcodes/qrcodes The $vision.scan is asynchronous so it immediately goes on to its success callback after it kicks off the scanning service The scanning service triggers a $vision.onscan event with the extracted metadata. We can use it to do whatever.","title":"\u2500\u2500 Vision \u2500\u2500"},{"location":"actions/#visionscan","text":"Starts scanning for barcode. When it scans a code, it will trigger a $vision.onscan event.","title":"$vision.scan"},{"location":"actions/#options_31","text":"No options required","title":"\u25a0  options"},{"location":"actions/#return-value_30","text":"none. This action is asynchronous and the scanned result will return through the $vision.onscan event.","title":"\u25a0  return value"},{"location":"actions/#example_22","text":"Quick example: { \"$jason\": { \"head\": { \"templates\": { \"body\": { \"background\": { \"type\": \"camera\", \"options\": { \"device\": \"back\" } } } }, \"actions\": { \"$load\": { \"type\": \"$render\" }, \"$vision.ready\": { \"type\": \"$vision.scan\" }, \"$vision.onscan\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Scanned content\", \"description\": \"{{$jason.type}} {{$jason.content}}\" } } } } } } A couple of important things to notice: we have the body's background set as \"type\": \"camera\" . This is mandatory to get $vision action to work. Then we wait for $vision.ready event. And call $vision.scan when the event fires. The $vision.onscan event returns with a payload that looks like: [iOS] { \"$jason\": { \"type\": \"org.iso.QRCode\", \"content\": \"Hello World\" } } [Android] { \"$jason\": { \"type\": 256, \"content\": \"Hello World\" } } The \"content\" attribute is the content of the barcode The \"type\" represents the barcode type.","title":"\u25a0  example"},{"location":"actions/#more-examples","text":"Here are two examples using this API: Inline Detection and Rendering: https://jasonbase.com/things/PMj7 (any content can be encoded) detect link and $href: https://jasonbase.com/things/rZ0b (Be sure to scan a qrcode that encodes a link)","title":"More examples"},{"location":"actions/#audio","text":"Anything related to audio","title":"\u2500\u2500 AUDIO \u2500\u2500"},{"location":"actions/#audioplay","text":"Play audio from remote url. Toggles between play and pause state if called multiple times.","title":"$audio.play"},{"location":"actions/#options_32","text":"url : A remote url to stream audio from. title : Title to display on the lock screen while playing in background mode. author : Author name to display on the lock screen while playing in background mode. album : Album name to display on the lock screen while playing in background mode. image : Image url to display on the lock screen while playing in background mode.","title":"\u25a0  options"},{"location":"actions/#return-value_31","text":"none","title":"\u25a0  return value"},{"location":"actions/#example_23","text":"{ \"$jason\": { \"head\": { \"title\": \"Play audio\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Yo\", \"action\": { \"type\": \"$audio.play\", \"options\": { \"title\": \"Busdriver - Worlds to Run\", \"author\": \"Song Exploder\", \"image\": \"http://discover.pocketcasts.com/discover/images/400/fff9ba50-53e1-0131-8293-723c91aeae46.jpg\", \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\" } } }] }] } } }","title":"\u25a0  example"},{"location":"actions/#audiopause","text":"Pauses an audio clip that's already playing from a remote url.","title":"$audio.pause"},{"location":"actions/#options_33","text":"url: if specified, pauses ONLY this url. Otherwise, pauses all audios currently playing.","title":"\u25a0  options"},{"location":"actions/#return-value_32","text":"none","title":"\u25a0  return value"},{"location":"actions/#audiostop","text":"Stops an audio clip that's already playing from a remote url.","title":"$audio.stop"},{"location":"actions/#options_34","text":"url: if specified, stops ONLY this url. Otherwise, stops all audios currently playing.","title":"\u25a0  options"},{"location":"actions/#return-value_33","text":"none","title":"\u25a0  return value"},{"location":"actions/#audioseek","text":"Seeks audio already playing from a remote url. The position value must be a value between 0 and 1 (in string)","title":"$audio.seek"},{"location":"actions/#options_35","text":"url : The audio url. position : value between 0 and 1 (Must be in string format)","title":"\u25a0  options"},{"location":"actions/#return-value_34","text":"none","title":"\u25a0  return value"},{"location":"actions/#example_24","text":"Here's an example of seeking an audio clip to 30% position { \"$jason\": { \"head\": { \"title\": \"Seek example\" \"actions\": { \"$load\": { \"type\": \"$audio.play\", \"options\": { \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\" } } } }, \"body\": { \"layers\": [{ \"type\": \"label\", \"text\": \"Go to 30% position\", \"style\": { \"bottom\": \"50\", \"left\": \"50%-50\", \"width\": \"100\" }, \"action\": { \"type\": \"$audio.seek\", \"options\": { \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\", \"position\": \"0.3\" } } }] } } }","title":"\u25a0  example"},{"location":"actions/#audioposition","text":"Get the position of the specified audio clip","title":"$audio.position"},{"location":"actions/#options_36","text":"url : The audio url","title":"\u25a0  options"},{"location":"actions/#return-value_35","text":"Returns the position between 0 and 1 in the following format: { \"value\": \"0.3\" }","title":"\u25a0  return value"},{"location":"actions/#example_25","text":"The following example displays a toast with the current position when the user taps the label. { \"$jason\": { ... \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"How much did I listen so far?\", \"action\": { \"type\": \"$audio.position\", \"options\": { \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\" }, \"success\": { \"type\": \"$util.toast\", \"options\": { \"text\": \"{{JSON.stringify($jason)}}\" } } }] }] } } }","title":"\u25a0  example"},{"location":"actions/#audioduration","text":"Returns total duration of the specified audio clip","title":"$audio.duration"},{"location":"actions/#options_37","text":"url : The audio url","title":"\u25a0  options"},{"location":"actions/#return-value_36","text":"Duration in seconds, in the following format: { \"value\": \"300\" }","title":"\u25a0  return value"},{"location":"actions/#example_26","text":"The following example displays a toast with the total duration of the track when the user taps the label. { \"$jason\": { ... \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"How long is this track?\", \"action\": { \"type\": \"$audio.duration\", \"options\": { \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\" }, \"success\": { \"type\": \"$util.toast\", \"options\": { \"text\": \"{{JSON.stringify($jason)}}\" } } }] }] } } }","title":"\u25a0  example"},{"location":"actions/#audiorecord","text":"Record audio","title":"$audio.record"},{"location":"actions/#options_38","text":"color : tint color when active color:disabled : tint color when paused theme : light to use light theme. Otherwise omit.","title":"\u25a0  options"},{"location":"actions/#return-value_37","text":"file_url : the local url in which the audio was stored data_uri : base64 encoded data-uri content_type : \"audio/m4a\" (it's always this format) Normally you will want to pass the result immediately to a $network.upload call in order to upload it to a cloud storage.","title":"\u25a0  return value"},{"location":"actions/#example_27","text":"{ \"$jason\": { \"head\": { \"title\": \"Play audio\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Record Now\", \"action\": { \"type\": \"$audio.record\", \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Audio stored at\", \"description\": \"{{$jason.url}}\" } } } }] }] } } }","title":"\u25a0 example"},{"location":"actions/#additional-permissions","text":"\u26a0\ufe0f There are certain device permissions you need to turn on in order to use some of these actions.","title":"Additional Permissions"},{"location":"actions/#ios-permission","text":"To support background audio play, you need to turn on background audio mode. Here's how: [1] From XCode open info.plist file. Right click on the file and open as source code . [2] Uncomment the UIBackgroundModes part","title":"iOS Permission"},{"location":"actions/#android-permissions","text":"[A] To support $audio.record on Android, you need to turn on android.permission.RECORD_AUDIO permission. [B] To support background audio play, you need to turn on android.permission.WAKE_LOCK permission. First open AndroidManifest.xml file from Android Stuido, and uncomment the relevant lines as shown below:","title":"Android Permissions"},{"location":"actions/#geo","text":"","title":"\u2500\u2500 GEO \u2500\u2500"},{"location":"actions/#geoget","text":"Get user's geolocation","title":"$geo.get"},{"location":"actions/#options_39","text":"distance : accuracy distance in meters. By default it's 5000meters. The lower you go the more accurate it will be, but the longer it will take to retrieve the location.","title":"\u25a0  options"},{"location":"actions/#return-value_38","text":"a coord object that contains (latitude),(longitude) format string { \"coord\": \"12.342,22.343\" }","title":"\u25a0  return value"},{"location":"actions/#example_28","text":"Below example demonstrates various ways of utilizing $geo.get return values { \"$jason\": { \"head\": { \"title\": \"Right Here\", \"description\": \"Searching anything nearby, links to yelp, google streetview and foursquare\" }, \"body\": { \"sections\": [ { \"items\": [ { \"type\": \"label\", \"text\": \"Street View\", \"style\": { \"size\": \"40\", \"font\": \"HelveticaNeue-CondensedBold\", \"color\": \"#000000\" }, \"action\": { \"type\": \"$geo.get\", \"options\": { \"distance\": \"1000\" }, \"success\": { \"type\": \"$href\", \"options\": { \"url\": \"http://maps.google.com/maps?q=&layer=c&cbll={{$jason.coord}}&cbp=11,0,0,0,0\", \"view\": \"App\" } } } }, { \"type\": \"label\", \"text\": \"Yelp\", \"style\": { \"size\": \"40\", \"font\": \"HelveticaNeue-CondensedBold\", \"color\": \"#000000\" }, \"action\": { \"type\": \"$geo.get\", \"success\": { \"type\": \"$href\", \"options\": { \"url\": \"http://www.yelp.com/search?find_desc=food&cll={{$jason.coord}}&ns=1\", \"view\": \"App\" } } } }, { \"type\": \"label\", \"text\": \"Foursquare\", \"style\": { \"size\": \"40\", \"font\": \"HelveticaNeue-CondensedBold\", \"color\": \"#000000\" }, \"action\": { \"type\": \"$geo.get\", \"success\": { \"type\": \"$href\", \"options\": { \"url\": \"https://foursquare.com/explore?ll={{$jason.coord}}&mode=url&q=Food\", \"view\": \"App\" } } } } ] } ] } } }","title":"\u25a0  example"},{"location":"actions/#required-permissions_1","text":"On iOS, $geo.get works out of the box so you don't need to do anything. But on Android you need to set up a location permission. Just open up AndroidManifest.xml file from Android Studio, and uncomment the lines described below:","title":"\u25a0  Required Permissions"},{"location":"actions/#timer","text":"","title":"\u2500\u2500 TIMER \u2500\u2500"},{"location":"actions/#timerstart","text":"Start a timer","title":"$timer.start"},{"location":"actions/#options_40","text":"interval : timer interval in seconds name : name of the timer (used later to stop it) repeats : if set to \"true\" , it's a perpetually repeating timer. Otherwise the timer gets called only once. action : the action to execute on every timer interval.","title":"\u25a0 options"},{"location":"actions/#return-value_39","text":"none","title":"\u25a0  return value"},{"location":"actions/#example_29","text":"{ \"$jason\": { \"head\": { \"actions\": { \"$load\": { \"type\": \"$timer.start\", \"options\": { \"interval\": \"1\", \"name\": \"timer1\", \"repeats\": \"true\", \"action\": { \"type\": \"$render\" } } } }, \"templates\": { ... } } } }","title":"\u25a0  example"},{"location":"actions/#timerstop","text":"Stops a timer","title":"$timer.stop"},{"location":"actions/#options_41","text":"name : the name of the timer to stop. You need to have started a timer with a name first. It will stop all running timers if the name is not specified.","title":"\u25a0 options"},{"location":"actions/#return-value_40","text":"none","title":"\u25a0 return value"},{"location":"actions/#example_30","text":"{ \"$jason\": { ... \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Stop the timer\", \"action\": { \"type\": \"$timer.stop\", \"options\": { \"name\": \"timer1\" } } }] }] } } }","title":"\u25a0 example"},{"location":"actions/#conversion","text":"Convert other data formats into JSON format","title":"\u2500\u2500 CONVERSION \u2500\u2500"},{"location":"actions/#convertcsv","text":"Convert CSV to JSON","title":"$convert.csv"},{"location":"actions/#options_42","text":"data : CSV string","title":"\u25a0 options"},{"location":"actions/#return-value_41","text":"returns the parsed JSON result. Expected format: must have the first row populated with attribute names. (See below for an example)","title":"\u25a0 return value"},{"location":"actions/#example_31","text":"Here's an example CSV string returned from a network request. name, descrption, url, icon github, social coding, https://www.github.com, https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png facebook, Best place to build & make an impact., https://www.facebook.com, https://www.facebook.com/images/fb_icon_325x325.png product hunt, Discover your next favorite thing, https://www.producthunt.com, https://pbs.twimg.com/profile_images/699572900643213312/RC2oRewL.jpg Notice how the first line is entirely made up of attribute names, and the rest rows are the actual data. We will try to parse this CSV into JSON by using the following code: { \"$jason\": { \"head\": { \"actions\": { \"$load\": { \"type\": \"$network.request\", \"options\": { \"url\": \"http://hastebin.com/raw/xiceheroku\", \"data_type\": \"raw\" }, \"success\": { \"type\": \"$convert.csv\", \"options\": { \"data\": \"{{$jason}}\" }, \"success\": { \"type\": \"$render\" } } } } } } } The end result: [ { \"name\": \"github\", \"description\": \"social coding\", \"url\": \"https://www.github.com\", \"icon\": \"https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png\" }, { \"name\": \"facebook\", \"description\": \"Best place to build & make an impact.\", \"url\": \"https://www.facebook.com\", \"icon\": \"https://www.facebook.com/images/fb_icon_325x325.png\" }, { \"name\": \"product hunt\", \"description\": \"Discover your next favorite thing\", \"url\": \"https://www.producthunt.com\", \"icon\": \"https://pbs.twimg.com/profile_images/699572900643213312/RC2oRewL.jpg\" } ]","title":"\u25a0 example"},{"location":"actions/#convertrss","text":"Convert RSS to JSON. Built on top of node-feedparser library","title":"$convert.rss"},{"location":"actions/#options_43","text":"data : RSS string","title":"\u25a0 options"},{"location":"actions/#return-value_42","text":"returns the parsed JSON result in the following format ( You can learn more about the spec here ):","title":"\u25a0 return value"},{"location":"actions/#example_32","text":"Here's an example where it makes a network request to http://feeds.gawker.com/lifehacker/full with data_type of rss , converts it to JSON using $convert.rss , and then renders it. { \"actions\": { \"$load\": { \"type\": \"$network.request\", \"options\": { \"url\": \"http://feeds.gawker.com/lifehacker/full\", \"data_type\": \"rss\" }, \"success\": { \"type\": \"$convert.rss\", \"options\": { \"data\": \"{{$jason}}\" }, \"success\": { \"type\": \"$render\" } } } } } The converted result right before $render will look something like this: { \"$jason\": [ { \"author\": \"Alan Henry\", \"rss:pubdate\": { \"@\": {}, \"#\": \"Thu, 9 Jun 2016 00:00:00 GMT\" }, \"source\": {}, \"guid\": \"1780470292\", \"link\": \"http://feeds.gawker.com/~r/lifehacker/full/~3/kcJMaJ6Ad7I/the-edge-of-the-world-desktop-1780470292\", \"title\": \"The Edge of the World Desktop\", \"summary\": \"&lt;p class=\\\"first-text\\\"&gt;This OS X desktop is simple, elegant, and combines a few simple widgets with a gorgeous wallpaper to great effect. If you like what you see, here\u2019s how you can set it up, customize your own menubar, and give your Mac the same look. &lt;/p&gt;\", \"image\": {}, \"rss:category\": [ { \"@\": { \"domain\": \"\" }, \"#\": \"featured desktop\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"desktops\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"wallpapers\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"customization\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"personalization\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"hud\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"rainmeter\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"themes\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"skins\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"windows\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"os x\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"mac\" }, { \"@\": { \"domain\": \"\" }, \"#\": \"linux\" } ], \"rss:link\": { \"@\": {}, \"#\": \"http://feeds.gawker.com/~r/lifehacker/full/~3/kcJMaJ6Ad7I/the-edge-of-the-world-desktop-1780470292\" }, \"feedburner:origlink\": { \"@\": {}, \"#\": \"http://lifehacker.com/the-edge-of-the-world-desktop-1780470292\" }, \"enclosures\": [], \"origlink\": \"http://lifehacker.com/the-edge-of-the-world-desktop-1780470292\", \"pubDate\": \"2016-06-09T00:00:00.000Z\", \"pubdate\": \"2016-06-09T00:00:00.000Z\", \"rss:guid\": { \"@\": { \"ispermalink\": \"false\" }, \"#\": \"1780470292\" }, \"date\": \"2016-06-09T00:00:00.000Z\", \"rss:title\": { \"@\": {}, \"#\": \"The Edge of the World Desktop\" }, \"meta\": { \"#ns\": [ { \"xmlns:itunes\": \"http://www.itunes.com/dtds/podcast-1.0.dtd\" }, { \"xmlns:dc\": \"http://purl.org/dc/elements/1.1/\" }, { \"xmlns:taxo\": \"http://purl.org/rss/1.0/modules/taxonomy/\" }, { \"xmlns:rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" }, { \"xmlns:atom\": \"http://www.w3.org/2005/Atom\" }, { \"xmlns:wfw\": \"http://wellformedweb.org/CommentAPI/\" }, { \"xmlns:feedburner\": \"http://rssnamespace.org/feedburner/ext/1.0\" }, { \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\" }, { \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\" } ], \"#version\": \"2.0\", \"categories\": [], \"language\": \"en\", \"link\": \"http://lifehacker.com\", \"title\": \"Lifehacker\", \"rss:link\": { \"@\": {}, \"#\": \"http://lifehacker.com\" }, \"cloud\": { \"type\": \"hub\", \"href\": \"http://pubsubhubbub.appspot.com/\" }, \"image\": {}, \"xmlurl\": \"http://www.lifehacker.com/index.xml\", \"feedburner:info\": { \"@\": { \"uri\": \"lifehacker/full\" } }, \"feedburner:browserfriendly\": { \"@\": {}, \"#\": \"This is an XML content feed. It is intended to be viewed in a newsreader or syndicated to another site.\" }, \"#xml\": { \"version\": \"1.0\", \"encoding\": \"UTF-8\" }, \"@\": [ { \"xmlns:itunes\": \"http://www.itunes.com/dtds/podcast-1.0.dtd\" }, { \"xmlns:dc\": \"http://purl.org/dc/elements/1.1/\" }, { \"xmlns:taxo\": \"http://purl.org/rss/1.0/modules/taxonomy/\" }, { \"xmlns:rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" }, { \"xmlns:atom\": \"http://www.w3.org/2005/Atom\" }, { \"xmlns:wfw\": \"http://wellformedweb.org/CommentAPI/\" }, { \"xmlns:feedburner\": \"http://rssnamespace.org/feedburner/ext/1.0\" } ], \"pubDate\": null, \"pubdate\": null, \"rss:language\": { \"@\": {}, \"#\": \"en\" }, \"date\": null, \"generator\": null, \"rss:title\": { \"@\": {}, \"#\": \"Lifehacker\" }, \"xmlUrl\": \"http://www.lifehacker.com/index.xml\", \"favicon\": null, \"rss:@\": {}, \"atom10:link\": [ { \"@\": { \"rel\": \"hub\", \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\", \"href\": \"http://pubsubhubbub.appspot.com/\" } }, { \"@\": { \"href\": \"http://www.lifehacker.com/index.xml\", \"rel\": \"self\", \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\", \"type\": \"application/rss+xml\" } } ], \"rss:description\": { \"@\": {}, \"#\": \"Tips and downloads for getting things done\" }, \"copyright\": null, \"#type\": \"rss\", \"author\": null, \"description\": \"Tips and downloads for getting things done\" }, \"dc:creator\": { \"@\": {}, \"#\": \"Alan Henry\" }, \"rss:@\": {}, \"rss:description\": { \"@\": {}, \"#\": \"&lt;p class=\\\"first-text\\\"&gt;This OS X desktop is simple, elegant, and combines a few simple widgets with a gorgeous wallpaper to great effect. If you like what you see, here\u2019s how you can set it up, customize your own menubar, and give your Mac the same look.&lt;/p&gt;\" }, \"comments\": null, \"categories\": [ \"featured desktop\", \"desktops\", \"wallpapers\", \"customization\", \"personalization\", \"hud\", \"rainmeter\", \"themes\", \"skins\", \"windows\", \"os x\", \"mac\", \"linux\" ], \"description\": \"&lt;p class=\\\"first-text\\\"&gt;This OS X desktop is simple, elegant, and combines a few simple widgets with a gorgeous wallpaper to great effect. If you like what you see, here\u2019s how you can set it up, customize your own menubar, and give your Mac the same look.&lt;/p&gt;\" }, { ... } ] } Check out the full JSON for the RSS reader example","title":"\u25a0 example"},{"location":"advanced/","text":"What is this page about? You can probably build any app you can imagine with Jasonette alone. However sometimes you may want to: Extend Jasonette engine itself: Want a JSON powered MapKit? Want a JSON powered video livestream view? Want a JSON powered ApplePay? Just write an extension! (No, really, please someone write an extension.) Integrate Jasonette with existing code: Already have your own app code? Plug in Jasonette to your existing app with just a few lines! Extension vs. Integration Both extending and integrating involve writing native iOS code. But here's the difference: Extending Jasonette means you're extending Jasonette itself. This means: All your custom modules will be JSON powered, just like the rest of Jasonette. You will need to follow a simple convention when writing the extension. You can share it with the community when you're done. If it's useful enough it may even be integrated into the main codebase. Integrating with Jasonette means you already have existing code and are using Jasonette only partially. This means: You can start using Jasonette in your existing app instantly, without re-writing anything. Just a few lines of code necessary. You will be able to take advantage of all of Jasonette's power whenever you use the Jasonette view. The only drawback is you can't control your own non-Jasonette code with JSON Extending Jasonette is the recommended way in most cases, since it requires very little additional effort, but automatically comes with the power to control your own custom native modules via JSON. \u2605 Extension Let's jump into writing extensions! There are two things you can extend: Components and Actions 1. Extend UI Components Jasonette comes with various UI components right out of the box, but you can easily build your own native component if you need to. Just follow the instructions below to write your component class, and you will instantly be able to summon your component within the Jasonette layout system simply by describing in JSON. 1.1. How to write a UI Component class All you need to do is write a class with a single builder method that returns a UIView subclass. Here's how: Step 1. Create a JasonComponent subclass The example below demonstrates how to create a map component. Just remember the following rules: Create a class that inherits from JasonComponent.h . The class name should follow this convention: Jason(COMPONENT_NAME)Component Only the first character of the COMPONENT_NAME should be capitalized So, to create a map component: we create a subclass of JasonComponent And name it JasonMapComponent (Notice the capitalization). We also import MapKit since we will need to access the iOS MapKit API. Here's the result: // JasonMapComponent.h #import \"JasonComponent.h\" #import <MapKit/MapKit.h> @interface JasonMapComponent : JasonComponent <MKMapViewDelegate> @end Step 2. Implement the builder method You only need to implement a single class method: + (UIView )build: (UIView )component withJSON: (NSDictionary )json withOptions: (NSDictionary )options . Basically it's a builder method that takes three arguments to create a UIView subclass. The arguments are: A. component : A UIView instance to fill in. Just assume that a UIView will be passed in, and repurpose it to your liking. B. json : A JSON snippet in NSDictionary format which includes all the information we need to construct this component. C. options : Useful in a few cases but you don't need to use this in most cases, so let's not worry about it here. The result can be a UILabel, UIButton, or whatever, as long as it's a subclass of UIView . Here's how it works: When Jasonette is building a layout, it will call this build:withJSON:withOptions method, passing in a relevant UIView instance ( component ) as well as the JSON blueprint ( json ) from which you will build your own UIView subclass. From here, all you need to do is: Check if the component is nil. If it's nil, create a new instance. If it's not, then we just reuse it. Construct your own custom UIView subclass instance based on the json object received, and return. You're done! Here's what the most primitive version would look like: // JasonMapComponent.m @implementation JasonMapComponent + + (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{ MKMapView *mapView; if(component){ mapView = (MKMapView*)component; } else { mapView = [[MKMapView alloc] init]; } return mapView; } @end This works since MKMapView is a subclass of UIView . Step 3. And that's it! This is seriously all we need to do! Our map component is now 100% powered by JSON, just like rest of the Jasonette components . Here's an example of how we would summon our map component. { \"type\": \"vertical\", \"components\": [ { \"type\": \"label\", \"text\": \"This is a map\" }, { \"type\": \"map\" } ] } So how does this work behind the scenes? Whenever Jasonette encounters a component description, It looks at its type first. Here we see the {\"type\": \"map\"} , so it's a map component. Based on this, it looks for a class named JasonMapComponent (Remember the naming convention is: Jason(COMPONENT_NAME_WITH_FIRST_LETTER_CAPITALIZED)Component When it finds the component class, it runs its build:withOptions: method to finally build the component. Of course, this is a simplified version of how the actual map component works. In reality the json object would contain more information than just { \"type\": \"map\" } . It may look something like this: { \"type\": \"map\", \"region\": { \"coord\": \"40.7409395,-74.0083886\", \"width\": \"50\" } } All you need to do is take this, parse it, and customize the mapView object before returning, like the comment below. // JasonMapComponent.m @implementation JasonMapComponent + (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{ MKMapView *mapView; if(component){ mapView = (MKMapView*)component; } else { mapView = [[MKMapView alloc] init]; } /* Do some customization with the 'json' argument here. */ return mapView; } @end 1.2. Tips on writing component classes A. Keep it stateless and self contained These component builder classes and methods are stateless by design. That's why the build:withOptions: method is a class method that simply takes a NSDictionary as input and returns a UIView as output. B. Use class methods Like mentioned above, Jasonette requires that all the component methods are implemented as class methods. You may ask \"But there's a delegate method I'm trying to use for handling events, and it's an instance method only. How do I deal with this?\". Well, in objective-c, classes are also objects, so you can in fact call them the same way you call an instance method. Just switch out the instance method with its class method version (use + instead of - at the beginning of the method definition), like below: // JasonMapComponent.m @implementation JasonMapComponent + (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{ MKMapView *mapView; if(component){ mapView = (MKMapView*)component; } else { mapView = [[MKMapView alloc] init]; } /* Do some customization with the 'json' argument here */ mapView.delegate = self; return mapView; } + (void)mapView:(MKMapView *)mapView didUpdateUserLocation:(MKUserLocation *)userLocation{ /* Handle the event */ } @end Here we implement + (void)mapView:(MKMapView )mapView didUpdateUserLocation:(MKUserLocation )userLocation to handle MapKit events. C. Take advantage of the built-in stylize method A lot of style attributes such as background, width, height, corner_radius, opacity, etc. are common across various types of components. JasonComponent class has a built-in method that you can utilize to automatically apply these styles. It's called: + (void) stylize: (NSDictionary )json component: (UIView )component . Just by calling this method once, you can take advantage of all the following style attributes right out of the box! { \"type\": \"mycustomitem\", \"style\": { \"width\": \"...\", \"height\": \"...\", \"opacity\": \"...\", \"background\": \"...\", \"color\": \"...\", \"corner_radius\": \"...\" } } Here's an example code that creates a UIView, runs it through the built-in stylize , and then applies additional custom styles. + (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{ // Build some component here MKMapView *mapView; if(component){ mapView = (MKMapView*)component; } else { mapView = [[MKMapView alloc] init]; } /* customize the component here */ // run it through the default stylize method [self stylize: json component: component]; // Add your own custom styling logic here, on top of the default styling above if(style[@\"rotate\"] { // some custom styling logic .... } return component; } You don't even need to include an additional file, since the stylize method comes for free just by subclassing JasonComponent 2. Extend Actions Just like components, you can easily write your own native action modules and call them using 100% JSON syntax. One thing to keep in mind: Action classes contain a collection of related action methods , which is why most actions are namespaced as $(GROUPNAME).(METHODNAME) when you call it. For example JasonNetworkAction class--an action class that deals with network requests--contains multiple methods: request , upload , auth , unauth . Each method can be invoked by Jasonette using $network.request , $network.auth , $network.upload , and $network.unauth actions. 2.1. How to write an Action Let's try writing an action class ( $util ) and one of its methods which displays a banner ( $util.banner ). We would like to parse this JSON markup: { \"type\": \"$util.banner\", \"options\": { \"title\": \"Hello\", \"description\": \"Hello world!\" } } to display a notification banner that looks like this: [IMAGE] Step 1. Create an Action Class Three rules for writing your action class: Create a class that inherits from JasonAction.h . The class name should follow the following convention: Jason(GROUP_NAME)Action Only the first character of the GROUP_NAME should be capitalized To create a class that responds to $util.banner , we first need a class for the util group. Following the rule, we need to create a JasonUtilAction , which inherits from JasonAction : // JasonUtilAction.h #import \"JasonAction.h\" @interface JasonUtilAction : JasonAction @end // JasonUtilAction.m #import \"JasonUtilAction.h\" @implementation JasonUtilAction @end Step 2. Write an Action Method Three rules for naming an action method: It should be an instance method . Its return value should be void . Whatever you name your method will respond to an action call $[GROUP_NAME].[METHOD_NAME] . For example, to handle $util.banner action we need to implement an instance method , and its name should be banner , like this: // JasonUtilAction.h #import \"JasonAction.h\" @interface JasonUtilAction : JasonAction @end // JasonUtilAction.m #import \"JasonUtilAction.h\" @implementation JasonUtilAction - (void)banner{ dispatch_async(dispatch_get_main_queue(), ^{ [[TWMessageBarManager sharedInstance] showMessageWithTitle: @\"Banner Title\" description: @\"Here goes banner description\" type: TWMessageBarMessageTypeInfo]; }); [[Jason client] success]; } @end This will display a banner when the following action is triggered { \"type\": \"$util.banner\" } Notice the [[Jason client] success] line. This is how your action signals that its job is over. More on this later. Step 3. Pass arguments to the action In the previous example we hardcoded the title and description for the banner. But a component that displays the same text all the time is not cool. Instead we want to pass some arguments and have them customize how the action is run. For example, we want the $util.banner action to take an options attribute and build a custom banner, like this: { \"type\": \"$util.banner\", \"options\": { \"title\": \"Yo\", \"description\": \"Dawg\" } } To access the options attribute of an action, simply use self.options inside the method, like this: // JasonUtilAction.h #import \"JasonAction.h\" @interface JasonUtilAction : JasonAction @end // JasonUtilAction.m #import \"JasonUtilAction.h\" @implementation JasonUtilAction - (void)banner{ // Extract title and description out of self.options! NSString *title = self.options[@\"title\"]; NSString *description = self.options[@\"description\"]; // Use the custom title and description instead of hardcoding! dispatch_async(dispatch_get_main_queue(), ^{ [[TWMessageBarManager sharedInstance] showMessageWithTitle: title description: description type: TWMessageBarMessageTypeInfo]; }); [[Jason client] success]; } @end You don't need to define self.options anywhere because you get it for free just by subclassing JasonAction . Step 4. End the action You MUST explicitly signal the end of each action when implementing an action method . This is because we can't assume that all actions end when they reach the last line. Some actions trigger asynchronous background tasks, and we need to wait until that task is over. To signal the end of an action we call: [[Jason client] success]; This command will: Finish the current action See if the current action has a success attribute, and if it does, proceed to call that action. Here's an example where we make a network request, and then display a success banner when it succeeds: { \"type\": \"$network.request\", \"options\": { \"url\": \"https://imagejason.herokuapp.com\", \"method\": \"post\" }, \"success\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Success!\", \"description\": \"Successfully posted!\" } } } The implementation for $network.request may look something like this: // JasonNetworkAction.m #import \"JasonNetworkAction.h\" @implementation JasonNetworkAction ... - (void)request{ AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; ... dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^(void){ [manager POST:url parameters:parameters progress:^(NSProgress * _Nonnull downloadProgress) { } success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) { dispatch_async(dispatch_get_main_queue(), ^{ [[Jason client] success]; }); } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) { }]; }); } ... @end Notice how we call the [[Jason client] success] line inside the \"success\" block, instead of the last line of the method . This is because the network request task runs asynchronously and the action shouldn't end until it reaches inside the success block. Step 5. Handle exceptions We can end an action with [[Jason client] success] when everything goes as expected. But what if something goes wrong? We still need to end the action but also run an exception handling logic, instead of going on to the next action. For example, the $network.request may fail because there's no Internet connection. To handle these exceptions, Jason actions have another attribute called error , as demonstrated below: { \"type\": \"$network.request\", \"options\": { \"url\": \"https://imagejason.herokuapp.com\", \"method\": \"post\" }, \"success\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Success!\", \"description\": \"Successfully fetched!\" } }, \"error\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"ERROR!!!!\", \"description\": \"Uh oh, something went wrong!\" } } } To signal that the action has ended with an error when we implement action methods, we call: [[Jason client] error]; . Let's take the previous code and add that line: // JasonNetworkAction.m #import \"JasonNetworkAction.h\" @implementation JasonNetworkAction ... - (void)request{ AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; ... dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^(void){ [manager POST:url parameters:parameters progress:^(NSProgress * _Nonnull downloadProgress) { } success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) { dispatch_async(dispatch_get_main_queue(), ^{ [[Jason client] success]; }); } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) { dispatch_async(dispatch_get_main_queue(), ^{ [[Jason client] error]; }); }]; }); } ... @end The code is mostly same as the previous one, except we've added the [[Jason client] error]; inside the failure block of the task. Step 6. Set the return value In many cases we want to run an action, take its output, and pass it to another action. Here, we run a $geo.get action, and then display its return value as an alert using $util.alert . { \"type\": \"$geo.get\", \"success\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Current Location\", \"description\": \"{{$jason.coord}}\" } } } Notice how we use a variable called $jason . This is how return values work in Jasonette--if an action has a return value, it passes it along to the next action as a variable named $jason . To end an action with a return value, we call: [[Jason client] success: response] To support the JSON markup above, the $geo.get action implementation should look like this: // JasonGeoAction.m #import \"JasonGeoAction.h\" @implementation JasonGeoAction - (void)get{ /* Implement some location sensor logic that populates the 'currentLocation' variable */ NSString *coord = [NSString stringWithFormat:@\"%g,%g\", currentLocation.coordinate.latitude, currentLocation.coordinate.longitude]; [[Jason client] success: @{@\"coord\": coord}]; } @end Here we end $geo.get with an object @{@\"coord\": coord} . As mentioned above, this object will be accessible as $jason in the next action. This is how the $util.banner action can dynamically build itself using the $jason.coord value. \u2605 Integration Jasonette by default covers most of what you need to build any app you can imagine. Also you can even extend its actions and components , like we discussed above. However if you already have existing code and just want to integrate with Jasonette here and there, that's cool too! You don't have to throw away all your existing code and re-write everything just to take advantage of Jasonette! How it works Basically, JasonViewController is a self contained class whose only requirement is that you set its url before presenting it. This means you can integrate Jasonette just like using any other view controllers in your project. \u2605 REMEMBER - You will need to either copy all your existing project files into your Jasonette project, or Jasonette files into your own project, before you do this. 1. Non-Jasonette => Jasonette Here's how you can open a JasonViewController from your own viewcontroller\u2014it's the same as opening any other viewcontrollers. A. First, include JasonViewController.h in your viewcontroller #import \"JasonViewController.h\" B. Open with push transition: To open the JasonViewController with a push transition, do this: JasonViewController *vc = [[JasonViewController alloc] init]; vc.url = @\"https://jasonbase.com/things/jYJ.json\"; [self.navigationViewController pushViewController:vc animated:YES]; C. Open with modal transition: To open JasonViewController as a modal, do this: JasonViewController *vc = [[JasonViewController alloc] init]; vc.url = @\"https://jasonbase.com/things/jYJ.json\"; UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc]; [self.navigationController presentViewController:nav animated:YES completion:nil]; And that's it for Non-Jasonette => Jasonette view transition! Nothing special, just a regular viewcontroller. 2. Jasonette => Non-Jasonette This one's a bit different, since we are transitioning from a JasonViewController to your custom viewcontroller. \u2605 REMEMBER - Everything that happens on the Jasonette side is JSON powered. Which means we need to handle the transition using JSON. Here's how to transition from a Jasonette view to your custom non-Jasonette view: Option A. Using Storyboard It works exactly the same as normal Jasonette transitions--simply attach an href and set its view attribute. You need to name it like this: [STORYBOARD NAME].[STORYBOARD IDENTIFIER FOR THE VIEWCONTROLLER] For example, to transition to a viewcontroller which has a storyboard ID of PaymentViewController on a storyboard named MainStoryboard.storyboard , we do the following: { \"type\": \"label\", \"text\": \"Make a payment\", \"href\": { \"view\": \"MainStoryboard.PaymentViewController\" } } Option B. Not using Storyboard If you don't use storyboard, you can simply enter the viewcontroller's class name. For example, to transition to a PaymentViewController class, { \"type\": \"label\", \"text\": \"Make a payment\", \"href\": { \"view\": \"PaymentViewController\" } } Passing arguments to your viewcontroller Let's say we now want to pass some arguments to the PaymentViewController . Here's how we can achieve this: Step 1. Add an NSDictionary property called jason to your custom viewcontroller For example if we wanted our PaymentViewController to support this feature, we will need to add an NSDictionary *jason property to the class, like this: // PaymentViewController.h #import <UIKit/UIKit.h> @interface PaymentViewController : UIViewController .... @property (nonatomic, strong) NSDictionary *jason .... @end Step 2. Pass the options attribute inside href . And we're all set! We can now start passing arguments to the PaymentViewController using the JSON syntax! Here's an example: { \"type\": \"label\", \"text\": \"Make a payment\", \"href\": { \"view\": \"MainStoryboard.PaymentViewController\", \"options\": { \"product_id\": \"3kzf9ela\", \"user_id\": \"3kzf9ela\" } } } Step 3. Use the jason property in your viewcontroller Now that our PaymentViewController is receiving the options object as jason , we just need to make use of it in the implementation. Example: // PaymentViewController.m #import \"PaymentViewController.h\" @implementation PaymentViewController .... - (void)viewDidLoad { [super viewDidLoad]; NSString *product_id = self.jason[@\"product_id\"]; NSString *user_id = self.jason[@\"user_id\"]; /* Use product_id and user_id for your custom logic! */ } .... @end","title":"\u25a0 Extending Jasonette (advanced)"},{"location":"advanced/#what-is-this-page-about","text":"You can probably build any app you can imagine with Jasonette alone. However sometimes you may want to: Extend Jasonette engine itself: Want a JSON powered MapKit? Want a JSON powered video livestream view? Want a JSON powered ApplePay? Just write an extension! (No, really, please someone write an extension.) Integrate Jasonette with existing code: Already have your own app code? Plug in Jasonette to your existing app with just a few lines!","title":"What is this page about?"},{"location":"advanced/#extension-vs-integration","text":"Both extending and integrating involve writing native iOS code. But here's the difference: Extending Jasonette means you're extending Jasonette itself. This means: All your custom modules will be JSON powered, just like the rest of Jasonette. You will need to follow a simple convention when writing the extension. You can share it with the community when you're done. If it's useful enough it may even be integrated into the main codebase. Integrating with Jasonette means you already have existing code and are using Jasonette only partially. This means: You can start using Jasonette in your existing app instantly, without re-writing anything. Just a few lines of code necessary. You will be able to take advantage of all of Jasonette's power whenever you use the Jasonette view. The only drawback is you can't control your own non-Jasonette code with JSON Extending Jasonette is the recommended way in most cases, since it requires very little additional effort, but automatically comes with the power to control your own custom native modules via JSON.","title":"Extension vs. Integration"},{"location":"advanced/#extension","text":"Let's jump into writing extensions! There are two things you can extend: Components and Actions","title":"\u2605  Extension"},{"location":"advanced/#1-extend-ui-components","text":"Jasonette comes with various UI components right out of the box, but you can easily build your own native component if you need to. Just follow the instructions below to write your component class, and you will instantly be able to summon your component within the Jasonette layout system simply by describing in JSON.","title":"1. Extend UI Components"},{"location":"advanced/#11-how-to-write-a-ui-component-class","text":"All you need to do is write a class with a single builder method that returns a UIView subclass. Here's how:","title":"1.1. How to write a UI Component class"},{"location":"advanced/#step-1-create-a-jasoncomponent-subclass","text":"The example below demonstrates how to create a map component. Just remember the following rules: Create a class that inherits from JasonComponent.h . The class name should follow this convention: Jason(COMPONENT_NAME)Component Only the first character of the COMPONENT_NAME should be capitalized So, to create a map component: we create a subclass of JasonComponent And name it JasonMapComponent (Notice the capitalization). We also import MapKit since we will need to access the iOS MapKit API. Here's the result: // JasonMapComponent.h #import \"JasonComponent.h\" #import <MapKit/MapKit.h> @interface JasonMapComponent : JasonComponent <MKMapViewDelegate> @end","title":"Step 1. Create a JasonComponent subclass"},{"location":"advanced/#step-2-implement-the-builder-method","text":"You only need to implement a single class method: + (UIView )build: (UIView )component withJSON: (NSDictionary )json withOptions: (NSDictionary )options . Basically it's a builder method that takes three arguments to create a UIView subclass. The arguments are: A. component : A UIView instance to fill in. Just assume that a UIView will be passed in, and repurpose it to your liking. B. json : A JSON snippet in NSDictionary format which includes all the information we need to construct this component. C. options : Useful in a few cases but you don't need to use this in most cases, so let's not worry about it here. The result can be a UILabel, UIButton, or whatever, as long as it's a subclass of UIView . Here's how it works: When Jasonette is building a layout, it will call this build:withJSON:withOptions method, passing in a relevant UIView instance ( component ) as well as the JSON blueprint ( json ) from which you will build your own UIView subclass. From here, all you need to do is: Check if the component is nil. If it's nil, create a new instance. If it's not, then we just reuse it. Construct your own custom UIView subclass instance based on the json object received, and return. You're done! Here's what the most primitive version would look like: // JasonMapComponent.m @implementation JasonMapComponent + + (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{ MKMapView *mapView; if(component){ mapView = (MKMapView*)component; } else { mapView = [[MKMapView alloc] init]; } return mapView; } @end This works since MKMapView is a subclass of UIView .","title":"Step 2. Implement the builder method"},{"location":"advanced/#step-3-and-thats-it","text":"This is seriously all we need to do! Our map component is now 100% powered by JSON, just like rest of the Jasonette components . Here's an example of how we would summon our map component. { \"type\": \"vertical\", \"components\": [ { \"type\": \"label\", \"text\": \"This is a map\" }, { \"type\": \"map\" } ] } So how does this work behind the scenes? Whenever Jasonette encounters a component description, It looks at its type first. Here we see the {\"type\": \"map\"} , so it's a map component. Based on this, it looks for a class named JasonMapComponent (Remember the naming convention is: Jason(COMPONENT_NAME_WITH_FIRST_LETTER_CAPITALIZED)Component When it finds the component class, it runs its build:withOptions: method to finally build the component. Of course, this is a simplified version of how the actual map component works. In reality the json object would contain more information than just { \"type\": \"map\" } . It may look something like this: { \"type\": \"map\", \"region\": { \"coord\": \"40.7409395,-74.0083886\", \"width\": \"50\" } } All you need to do is take this, parse it, and customize the mapView object before returning, like the comment below. // JasonMapComponent.m @implementation JasonMapComponent + (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{ MKMapView *mapView; if(component){ mapView = (MKMapView*)component; } else { mapView = [[MKMapView alloc] init]; } /* Do some customization with the 'json' argument here. */ return mapView; } @end","title":"Step 3. And that's it!"},{"location":"advanced/#12-tips-on-writing-component-classes","text":"","title":"1.2. Tips on writing component classes"},{"location":"advanced/#a-keep-it-stateless-and-self-contained","text":"These component builder classes and methods are stateless by design. That's why the build:withOptions: method is a class method that simply takes a NSDictionary as input and returns a UIView as output.","title":"A. Keep it stateless and self contained"},{"location":"advanced/#b-use-class-methods","text":"Like mentioned above, Jasonette requires that all the component methods are implemented as class methods. You may ask \"But there's a delegate method I'm trying to use for handling events, and it's an instance method only. How do I deal with this?\". Well, in objective-c, classes are also objects, so you can in fact call them the same way you call an instance method. Just switch out the instance method with its class method version (use + instead of - at the beginning of the method definition), like below: // JasonMapComponent.m @implementation JasonMapComponent + (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{ MKMapView *mapView; if(component){ mapView = (MKMapView*)component; } else { mapView = [[MKMapView alloc] init]; } /* Do some customization with the 'json' argument here */ mapView.delegate = self; return mapView; } + (void)mapView:(MKMapView *)mapView didUpdateUserLocation:(MKUserLocation *)userLocation{ /* Handle the event */ } @end Here we implement + (void)mapView:(MKMapView )mapView didUpdateUserLocation:(MKUserLocation )userLocation to handle MapKit events.","title":"B. Use class methods"},{"location":"advanced/#c-take-advantage-of-the-built-in-stylize-method","text":"A lot of style attributes such as background, width, height, corner_radius, opacity, etc. are common across various types of components. JasonComponent class has a built-in method that you can utilize to automatically apply these styles. It's called: + (void) stylize: (NSDictionary )json component: (UIView )component . Just by calling this method once, you can take advantage of all the following style attributes right out of the box! { \"type\": \"mycustomitem\", \"style\": { \"width\": \"...\", \"height\": \"...\", \"opacity\": \"...\", \"background\": \"...\", \"color\": \"...\", \"corner_radius\": \"...\" } } Here's an example code that creates a UIView, runs it through the built-in stylize , and then applies additional custom styles. + (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{ // Build some component here MKMapView *mapView; if(component){ mapView = (MKMapView*)component; } else { mapView = [[MKMapView alloc] init]; } /* customize the component here */ // run it through the default stylize method [self stylize: json component: component]; // Add your own custom styling logic here, on top of the default styling above if(style[@\"rotate\"] { // some custom styling logic .... } return component; } You don't even need to include an additional file, since the stylize method comes for free just by subclassing JasonComponent","title":"C. Take advantage of the built-in stylize method"},{"location":"advanced/#2-extend-actions","text":"Just like components, you can easily write your own native action modules and call them using 100% JSON syntax. One thing to keep in mind: Action classes contain a collection of related action methods , which is why most actions are namespaced as $(GROUPNAME).(METHODNAME) when you call it. For example JasonNetworkAction class--an action class that deals with network requests--contains multiple methods: request , upload , auth , unauth . Each method can be invoked by Jasonette using $network.request , $network.auth , $network.upload , and $network.unauth actions.","title":"2. Extend Actions"},{"location":"advanced/#21-how-to-write-an-action","text":"Let's try writing an action class ( $util ) and one of its methods which displays a banner ( $util.banner ). We would like to parse this JSON markup: { \"type\": \"$util.banner\", \"options\": { \"title\": \"Hello\", \"description\": \"Hello world!\" } } to display a notification banner that looks like this: [IMAGE]","title":"2.1. How to write an Action"},{"location":"advanced/#step-1-create-an-action-class","text":"Three rules for writing your action class: Create a class that inherits from JasonAction.h . The class name should follow the following convention: Jason(GROUP_NAME)Action Only the first character of the GROUP_NAME should be capitalized To create a class that responds to $util.banner , we first need a class for the util group. Following the rule, we need to create a JasonUtilAction , which inherits from JasonAction : // JasonUtilAction.h #import \"JasonAction.h\" @interface JasonUtilAction : JasonAction @end // JasonUtilAction.m #import \"JasonUtilAction.h\" @implementation JasonUtilAction @end","title":"Step 1. Create an Action Class"},{"location":"advanced/#step-2-write-an-action-method","text":"Three rules for naming an action method: It should be an instance method . Its return value should be void . Whatever you name your method will respond to an action call $[GROUP_NAME].[METHOD_NAME] . For example, to handle $util.banner action we need to implement an instance method , and its name should be banner , like this: // JasonUtilAction.h #import \"JasonAction.h\" @interface JasonUtilAction : JasonAction @end // JasonUtilAction.m #import \"JasonUtilAction.h\" @implementation JasonUtilAction - (void)banner{ dispatch_async(dispatch_get_main_queue(), ^{ [[TWMessageBarManager sharedInstance] showMessageWithTitle: @\"Banner Title\" description: @\"Here goes banner description\" type: TWMessageBarMessageTypeInfo]; }); [[Jason client] success]; } @end This will display a banner when the following action is triggered { \"type\": \"$util.banner\" } Notice the [[Jason client] success] line. This is how your action signals that its job is over. More on this later.","title":"Step 2. Write an Action Method"},{"location":"advanced/#step-3-pass-arguments-to-the-action","text":"In the previous example we hardcoded the title and description for the banner. But a component that displays the same text all the time is not cool. Instead we want to pass some arguments and have them customize how the action is run. For example, we want the $util.banner action to take an options attribute and build a custom banner, like this: { \"type\": \"$util.banner\", \"options\": { \"title\": \"Yo\", \"description\": \"Dawg\" } } To access the options attribute of an action, simply use self.options inside the method, like this: // JasonUtilAction.h #import \"JasonAction.h\" @interface JasonUtilAction : JasonAction @end // JasonUtilAction.m #import \"JasonUtilAction.h\" @implementation JasonUtilAction - (void)banner{ // Extract title and description out of self.options! NSString *title = self.options[@\"title\"]; NSString *description = self.options[@\"description\"]; // Use the custom title and description instead of hardcoding! dispatch_async(dispatch_get_main_queue(), ^{ [[TWMessageBarManager sharedInstance] showMessageWithTitle: title description: description type: TWMessageBarMessageTypeInfo]; }); [[Jason client] success]; } @end You don't need to define self.options anywhere because you get it for free just by subclassing JasonAction .","title":"Step 3. Pass arguments to the action"},{"location":"advanced/#step-4-end-the-action","text":"You MUST explicitly signal the end of each action when implementing an action method . This is because we can't assume that all actions end when they reach the last line. Some actions trigger asynchronous background tasks, and we need to wait until that task is over. To signal the end of an action we call: [[Jason client] success]; This command will: Finish the current action See if the current action has a success attribute, and if it does, proceed to call that action. Here's an example where we make a network request, and then display a success banner when it succeeds: { \"type\": \"$network.request\", \"options\": { \"url\": \"https://imagejason.herokuapp.com\", \"method\": \"post\" }, \"success\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Success!\", \"description\": \"Successfully posted!\" } } } The implementation for $network.request may look something like this: // JasonNetworkAction.m #import \"JasonNetworkAction.h\" @implementation JasonNetworkAction ... - (void)request{ AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; ... dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^(void){ [manager POST:url parameters:parameters progress:^(NSProgress * _Nonnull downloadProgress) { } success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) { dispatch_async(dispatch_get_main_queue(), ^{ [[Jason client] success]; }); } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) { }]; }); } ... @end Notice how we call the [[Jason client] success] line inside the \"success\" block, instead of the last line of the method . This is because the network request task runs asynchronously and the action shouldn't end until it reaches inside the success block.","title":"Step 4. End the action"},{"location":"advanced/#step-5-handle-exceptions","text":"We can end an action with [[Jason client] success] when everything goes as expected. But what if something goes wrong? We still need to end the action but also run an exception handling logic, instead of going on to the next action. For example, the $network.request may fail because there's no Internet connection. To handle these exceptions, Jason actions have another attribute called error , as demonstrated below: { \"type\": \"$network.request\", \"options\": { \"url\": \"https://imagejason.herokuapp.com\", \"method\": \"post\" }, \"success\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Success!\", \"description\": \"Successfully fetched!\" } }, \"error\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"ERROR!!!!\", \"description\": \"Uh oh, something went wrong!\" } } } To signal that the action has ended with an error when we implement action methods, we call: [[Jason client] error]; . Let's take the previous code and add that line: // JasonNetworkAction.m #import \"JasonNetworkAction.h\" @implementation JasonNetworkAction ... - (void)request{ AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; ... dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^(void){ [manager POST:url parameters:parameters progress:^(NSProgress * _Nonnull downloadProgress) { } success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) { dispatch_async(dispatch_get_main_queue(), ^{ [[Jason client] success]; }); } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) { dispatch_async(dispatch_get_main_queue(), ^{ [[Jason client] error]; }); }]; }); } ... @end The code is mostly same as the previous one, except we've added the [[Jason client] error]; inside the failure block of the task.","title":"Step 5. Handle exceptions"},{"location":"advanced/#step-6-set-the-return-value","text":"In many cases we want to run an action, take its output, and pass it to another action. Here, we run a $geo.get action, and then display its return value as an alert using $util.alert . { \"type\": \"$geo.get\", \"success\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"Current Location\", \"description\": \"{{$jason.coord}}\" } } } Notice how we use a variable called $jason . This is how return values work in Jasonette--if an action has a return value, it passes it along to the next action as a variable named $jason . To end an action with a return value, we call: [[Jason client] success: response] To support the JSON markup above, the $geo.get action implementation should look like this: // JasonGeoAction.m #import \"JasonGeoAction.h\" @implementation JasonGeoAction - (void)get{ /* Implement some location sensor logic that populates the 'currentLocation' variable */ NSString *coord = [NSString stringWithFormat:@\"%g,%g\", currentLocation.coordinate.latitude, currentLocation.coordinate.longitude]; [[Jason client] success: @{@\"coord\": coord}]; } @end Here we end $geo.get with an object @{@\"coord\": coord} . As mentioned above, this object will be accessible as $jason in the next action. This is how the $util.banner action can dynamically build itself using the $jason.coord value.","title":"Step 6. Set the return value"},{"location":"advanced/#integration","text":"Jasonette by default covers most of what you need to build any app you can imagine. Also you can even extend its actions and components , like we discussed above. However if you already have existing code and just want to integrate with Jasonette here and there, that's cool too! You don't have to throw away all your existing code and re-write everything just to take advantage of Jasonette!","title":"\u2605  Integration"},{"location":"advanced/#how-it-works","text":"Basically, JasonViewController is a self contained class whose only requirement is that you set its url before presenting it. This means you can integrate Jasonette just like using any other view controllers in your project.","title":"How it works"},{"location":"advanced/#remember-you-will-need-to-either-copy-all-your-existing-project-files-into-your-jasonette-project-or-jasonette-files-into-your-own-project-before-you-do-this","text":"","title":"\u2605 REMEMBER - You will need to either copy all your existing project files into your Jasonette project, or Jasonette files into your own project, before you do this."},{"location":"advanced/#1-non-jasonette-jasonette","text":"Here's how you can open a JasonViewController from your own viewcontroller\u2014it's the same as opening any other viewcontrollers.","title":"1. Non-Jasonette =&gt; Jasonette"},{"location":"advanced/#a-first-include-jasonviewcontrollerh-in-your-viewcontroller","text":"#import \"JasonViewController.h\"","title":"A. First, include JasonViewController.h in your viewcontroller"},{"location":"advanced/#b-open-with-push-transition","text":"To open the JasonViewController with a push transition, do this: JasonViewController *vc = [[JasonViewController alloc] init]; vc.url = @\"https://jasonbase.com/things/jYJ.json\"; [self.navigationViewController pushViewController:vc animated:YES];","title":"B. Open with push transition:"},{"location":"advanced/#c-open-with-modal-transition","text":"To open JasonViewController as a modal, do this: JasonViewController *vc = [[JasonViewController alloc] init]; vc.url = @\"https://jasonbase.com/things/jYJ.json\"; UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc]; [self.navigationController presentViewController:nav animated:YES completion:nil]; And that's it for Non-Jasonette => Jasonette view transition! Nothing special, just a regular viewcontroller.","title":"C. Open with modal transition:"},{"location":"advanced/#2-jasonette-non-jasonette","text":"This one's a bit different, since we are transitioning from a JasonViewController to your custom viewcontroller.","title":"2. Jasonette =&gt; Non-Jasonette"},{"location":"advanced/#remember-everything-that-happens-on-the-jasonette-side-is-json-powered","text":"Which means we need to handle the transition using JSON. Here's how to transition from a Jasonette view to your custom non-Jasonette view:","title":"\u2605 REMEMBER - Everything that happens on the Jasonette side is JSON powered."},{"location":"advanced/#option-a-using-storyboard","text":"It works exactly the same as normal Jasonette transitions--simply attach an href and set its view attribute. You need to name it like this: [STORYBOARD NAME].[STORYBOARD IDENTIFIER FOR THE VIEWCONTROLLER] For example, to transition to a viewcontroller which has a storyboard ID of PaymentViewController on a storyboard named MainStoryboard.storyboard , we do the following: { \"type\": \"label\", \"text\": \"Make a payment\", \"href\": { \"view\": \"MainStoryboard.PaymentViewController\" } }","title":"Option A. Using Storyboard"},{"location":"advanced/#option-b-not-using-storyboard","text":"If you don't use storyboard, you can simply enter the viewcontroller's class name. For example, to transition to a PaymentViewController class, { \"type\": \"label\", \"text\": \"Make a payment\", \"href\": { \"view\": \"PaymentViewController\" } }","title":"Option B. Not using Storyboard"},{"location":"advanced/#passing-arguments-to-your-viewcontroller","text":"Let's say we now want to pass some arguments to the PaymentViewController . Here's how we can achieve this:","title":"Passing arguments to your viewcontroller"},{"location":"advanced/#step-1-add-an-nsdictionary-property-called-jason-to-your-custom-viewcontroller","text":"For example if we wanted our PaymentViewController to support this feature, we will need to add an NSDictionary *jason property to the class, like this: // PaymentViewController.h #import <UIKit/UIKit.h> @interface PaymentViewController : UIViewController .... @property (nonatomic, strong) NSDictionary *jason .... @end","title":"Step 1. Add an NSDictionary property called jason to your custom viewcontroller"},{"location":"advanced/#step-2-pass-the-options-attribute-inside-href","text":"And we're all set! We can now start passing arguments to the PaymentViewController using the JSON syntax! Here's an example: { \"type\": \"label\", \"text\": \"Make a payment\", \"href\": { \"view\": \"MainStoryboard.PaymentViewController\", \"options\": { \"product_id\": \"3kzf9ela\", \"user_id\": \"3kzf9ela\" } } }","title":"Step 2. Pass the options attribute inside href."},{"location":"advanced/#step-3-use-the-jason-property-in-your-viewcontroller","text":"Now that our PaymentViewController is receiving the options object as jason , we just need to make use of it in the implementation. Example: // PaymentViewController.m #import \"PaymentViewController.h\" @implementation PaymentViewController .... - (void)viewDidLoad { [super viewDidLoad]; NSString *product_id = self.jason[@\"product_id\"]; NSString *user_id = self.jason[@\"user_id\"]; /* Use product_id and user_id for your custom logic! */ } .... @end","title":"Step 3. Use the jason property in your viewcontroller"},{"location":"agents/","text":"What is an Agent? \"Microservices on the frontend\" Jasonette Agent is a new architecture for building native mobile apps that utilizes JavaScript technologies without sacrificing native peformance and user experience. The idea is simple: User interacts with the native core. The core spawns background JavaScript containers for multiple tasks. Core and Agents communicate through JSON-RPC . In short, it's like microservices, but on the frontend . How does it work? Jasonette Agents are invisible background JavaScript execution environments, internally implemented in WKWebView on iOS and WebView on Android. Agents are optimized to run in the background (Users never interact directly with agents) and interact with the core native app engine with JSON-RPC. Since Jasonette is already 100% operated with JSON, the JSON-RPC approach blends into the app seamlessly. What can it do? 1. Plug in anything in JavaScript Agents let you build on top of all kinds of web technologies right out of the box. Anything you can do in JavaScript, now you can do with Jasonette. Just plug it in as an agent. 2. Turn your frontend into agent instantly In fact, if you already have a web app running, you can even plug it into Jasonette as an agent and make it work as a \"backend\" to Jasonette's native frontend. In the example above, we have a website that's already running on websockets on the laptop. Here's the site Now, we can reuse the same website as an agent by plugging it into Jasonette like below (You can see the full markup for the entire app at https://wsjason.herokuapp.com/app.json ): { \"$jason\": { \"head\": { \"title\": \"Websocket Chat\", \"agents\": { \"ws\": { \"url\": \"https://wsjason.herokuapp.com/\" } }, ... } } } Above code basically lets you import the site as a Jasonette agent and communicate with it through JSON-RPC going forward. In the demo you can only see the native app UI on the phone, but in the background the same web app is running to communicate with Jasonette. You can check out some more examples here: Turn your existing Angular.js, Vue.js, Cell.js app into an Agent 3. Native User Experience meets Multithreading But let's not forget, Jasonette is ultimately a native app platform . All the user interactions happen on the native core side. Agents run in the background and run tasks for core. And here's the cool part: There can be multiple agents. This means agents bring multithreading to Jasonette. Jasonette core is single threaded in order to ensure deterministic UI behaviors. This made it impossible to run multiple concurrent tasks on Jasonette. With agents, all you need to do is offload all the tasks to agents and let them report back through events. Quickstart 1. Write an agent An agent is nothing more than a web page. <html> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.min.js\"></script> <script> var md5 = function(data, sync) { var result = CryptoJS.MD5(data).toString(); $agent.response(result); } </script> </html> We have declared a function called md5 which takes two parameters data and sync . The md5 function runs some task (CryptoJS task) and then makes an $agent.response() call. This is where the agent will return the result back to Jasonette. We'll see this below. 2. Plug it into Jasonette Now that we have an agent. How do we plug it into Jasonette? All you need to do is declare the URL under $jason.head.agents . { \"$jason\": { \"head\": { \"title\": \"$agent.request Demo\", \"description\": \"Jasonette to Agent request demo\", \"agents\": { \"crypto\": { \"url\": \"file://crypto.html\" } }, ... We have named this agent \"crypto\" , and enter the url. We will use this as the id when making JSON-RPC requests. In this case we used a file:// url scheme, but you can also load a remote agent with an http[s]:// scheme. 3. Make JSON-RPC calls Now let's actually make a function call into the md5 function from the agent. Below is the JSON action that wil make a JSON-RPC call to the agent. The $agent.request is the Jasonette action that makes agent JSON-RPC calls, and the options object is the actual JSON-RPC request object. { \"type\": \"$agent.request\", \"options\": { \"id\": \"crypto\", \"method\": \"md5\", \"params\": [\"{{$get.raw}}\", \"{{$jason.sync}}\"] }, \"success\": { \"trigger\": \"add\", \"options\": { \"result\": \"{{$jason}}\" } } } Remember the how the md5 function from above ? The JSON-RPC object is basically saying \"find an agent with an id of 'crypto' , ask the agent to run a function called 'md5' with the two parameters.\" var md5 = function(data, sync) { var result = CryptoJS.MD5(data).toString(); $agent.response(result); } When the function finishes running, this $agent.response will trigger the success callback on the Jasonette core side, and now Jasonette will continue executing rest of the action call chain. 4. Learn More This was just one API method usage. You can learn more features by reading on to the next section, or you can also take a look at some demos API This documentation discusses: Declare : How to declare agents Communicate : How to communicate with agents 1. Declare Each view can have multiple agents. Every agent is sandboxed to their parent view. Agents are set up declaratively (instead of manually initializing through actions, for example) to ensure they are automatically initialized as soon as their parent view loads. Syntax You can define agents under $jason.head.agents Each key/value pair represents a sandboxed agent. The key is the name of the agent we'll use to make requests later The value is the JSON markup that represents the agent. Each Agent can take one of the following attributes: url : the URL to load content from http[s]?:// : Any http/https remote url file:// : Any locally embedded file url (under file:// directory) text : Or you can fill it in inline with a piece of HTML text Example The following code sets up 3 separate sandboxed HTML/JavaScript environments. js_sandbox loads from an HTML text. web3 loads from a file url. firebase loads from a remote https url. { \"$jason\": { \"head\": { \"title\": \"Agent Demo\", \"agents\": { \"js_sandbox\": { \"text\": \"<html><script>var injected = function(a) { return a; }</script></html>\" }, \"web3\": { \"url\": \"file://web.html\" }, \"firebase\": { \"url\": \"https://jasonette-agent.github.io\" } } } } } Once set up, each agent runs on its own, communicating with Jasonette and Other agents sometimes 2. Communicate Now that everything's set up, we can finally communicate with agents. Below is an overview of how: Jasonette can interact with agents Agents can interact with other agents . Overview 1. Outside => Agent The outside world can make function call requests to agents. Jasonette => Agent : You can make requests from Jasonette to agents using a Jasonette action . \"type\": \"$agent.request\" : Call any JavaScript function in the agent. Agent => Agent : Agents can make requests to another agent using a JavaScript function . $agent.request(request) : Make a remote function call into another agent, using a JSON-RPC call. 2. Agent => Outside Agents can send messages to the outside world with 3 designated JavaScript functions. $agent.response(response) Used to return results in response to an $agent.request call. Can respond to both agent functions (from another agent) and Jasonette actions . Note: All $agent.response must have been triggered by an $agent.request somewhere else in order for it to work. $agent.trigger(event, options) Unlike $agent.response which can only return results to an $agent.request , $agent.trigger can be used any time and anywhere at will. Can trigger a Jasonette event (under $jason.head.actions ). It's powered by Jasonette's native trigger . Note: trigger can only trigger existing events, which means if the event doesn't already exist on the Jasonette side under $jason.head.actions , it won't work. This is to ensure security, so that malicious HTML agent can't trigger any action that Jasonette wasn't aware of. $agent.href(href) trigger a Jasonette href from Agent API Here are API actions/functions that lets you communicate with agents. $agent.request : Make requests to agents $agent.response : Let agents return a response to a request call $agent.trigger : Trigger Jasonette events from agents $agent.href : Call Jasonette href from agents $agent.refresh : Refresh the agent context. $agent.clear : Clear the agent context. $agent.inject : Dispatch a 3rd party JavaScript function call into an existing agent. 1. $agent.request $agent.request loosely follows the JSON-RPC 2.0 spec . More specifically, each request object contains three attributes: id method params 1.1. Jasonette => Agent You can use the \"type\": \"$agent.request\" action to call an agent's JavaScript function from Jasonette. Syntax Just like any other Jasonette action, the $agent.request takes 4 parameters: type : \"$agent.request\" options : The JSON-RPC request object id : The agent id you're targeting. You should have set up the agent with this id before calling this action. method : The function name to call params : An array of parameters to pass to the function success The next Jasonette action to run when the agent responds. Triggered the agent responds with an $agent.response() call. error Only called when there was a problem connecting to the agent . Any error from INSIDE the agent is sandboxed inside the agent, so if you want to handle those, you should use $agent.response() and handle it inside the success callback above. Example The following JSON markup calls a whatsyourname function inside \"007\" agent with two parameters: \"James\" and \"Bond\" . { \"type\": \"$agent.request\", \"options\": { \"id\": \"007\", \"method\": \"whatsyourname\", \"params\": [\"James\", \"Bond\"] }, \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Name is\", \"description\": \"{{$jason}}\" } } } When the whatsyourname function returns some result via $agent.response() JS function, the $agent.request can pick up where it left off and go ahead with its success callback. // Inside agent \"007\". // The function has an immediate return value. var whatsyourname = function(firstname, lastname) { // synchronously return with a return value $agent.response(\"The name is \" + lastname + \". \" + firstname + \" \" + lastname); } 1.2. Agent => Agent Agents can also talk to one another. Syntax $agent.request(request[, callback]) Parameters request : JSON-RPC request Object. Same as the $agent.request Jasonette action, the request object can have 3 attributes: id : The agent id you're targeting. Required method : The function name to call params : The parameters to pass to the function callback : A callback function that will be triggered by an $agent.response() from the callee agent. Example Example 1. One way function call (without callback) Making a whatsyourname(\"James\", \"Bond\") function call into a remote agent named \"007\" . $agent.request({ \"id\": \"007\", \"method\": \"whatsyourname\", \"params\": [\"James\", \"Bond\"] }) In this particular example, there's no return value so it may not look useful at first sight. But the 007 agent can for example directly communicate with Jasonette via \"trigger\" or \"href\" instead of returning its control back to the caller agent. Example 2. Function call with a callback This time we would like to process the return value. // Inside agent \"007\". // The function has an immediate return value. var whatsyourname = function(firstname, lastname) { // synchronously return with a return value $agent.response(\"The name is \" + lastname + \". \" + firstname + \" \" + lastname); } // Inside agent \"M\" $agent.request({ \"id\": \"007\", \"method\": \"whatsyourname\", \"params\": [\"James\", \"Bond\"] }, function(response) { console.log(\"Returned value = \", response); }) Two things to notice: The whatsyourname function calls the $agent.response() function to return its result back to the caller. The $agent.request() function now has a second argument, which is a callback function that will handle the data returned with the $agent.response() . 2. $agent.response Agents are designed to interact with the outside world both synchronously and asynchronously . In some cases agent functions can return immediately ( synchronous ), but in many other cases we need to run a long-running function before returning a result ( asynchronous ). It could be an ajax call, or it could be any other time consuming task. Agents can utilize a single function named $agent.response Syntax $agent.response(response) Paramerters response : Any JavaScript object that can be represented as a flat JSON . Just remember that it can transport anything that can be represented as a JSON string. non-circular : all circular references within the object will be stripped out. only data : functions will be stripped out. Example We've already seen how agent functions can return results in a synchronous manner. Let' take a look at how you can call agent functions that run asynchronous tasks (It works pretty much the same). // Inside agent \"007\" // The function doesn't have a return value // Instead it waits for 3 seconds before calling $agent.response() asynchronously. var whatsyourname = function(firstname, lastname) { // Asynchronously return after 3 seconds setTimeout(function() { $agent.response(\"The name is \" + lastname + \". \" + firstname + \" \" + lastname) }, 3000); } // Inside agent \"M\" $agent.request({ id: \"007\", \"method\": \"whatsyourname\", \"params\": [\"James\", \"Bond\"] }, function(response) { console.log(\"Returned value = \", response); }) 3. $agent.trigger An agent can also call Jasonette. But we can't just let any agent execute arbitrary Jasonette actions for security reasons. Instead, agents can trigger events that are already defined on the Jasonette side under $jason.head.actions . Syntax $agent.trigger is a JavaScript function which can trigger a Jasonette event, along with a payload which will be set to the variable $jason . $agent.trigger(event[, options]) Parameters event : A Jasonette event name string. options : An additional payload to send along with the event. It will be accessible as $jason inside the triggered action. Note: Notice there's no callback parameter. $agent.trigger is a fire-and-forget scheme. There is no way to get a response back from Jasonette for security reasons. Example Example 1. Simple Event Trigger Let's look at this code: { \"$jason\": { \"head\": { \"agents\": { \"simple\": { \"url\": \"file://app.html\" } }, \"actions\": { \"refresh\": { \"type\": \"$render\" } } } } } Since the refresh event is declared under $jason.head.actions , we can trigger it from agents, like this: $agent.trigger(\"refresh\") 2. Event trigger with payload You can trigger an event with an additional payload too. Take a look at this code: { \"$jason\": { \"head\": { \"agents\": { \"simple\": { \"url\": \"file://app.html\" } }, \"actions\": { \"banner\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"{{$jason.title}}\", \"description\": \"{{$jason.description}}\" } } } } } } Notice now we have a $util.alert action which expects a $jason variable to be passed in. We can trigger this from the simple agent with: $agent.trigger(\"banner\", { \"title\": \"Hello\", \"description\": \"World\" }); 4. $agent.href You can trigger a Jasonette href transition from an agent. Syntax $agent.href(href) Parameters Basically you're just passing a Jasonette href object as an argument. href : a Jasonette href object. See href for more. Example $agent.href({ \"url\": \"https://www.jasonbase.com/things/3nf.json\", \"optons\": { \"data\": \"hi\" }, \"transition\": \"modal\" }) 5. $agent.refresh A Jasonette action that lets you refresh an agent context with id . Reloads the web container that contains the agent. Parameters id : The id of an existing agent in the current view to refresh Example { \"type\": \"$agent.refresh\", \"options\": { \"id\": \"crypto\" } } 6. $agent.clear A Jasonette action that lets you clear an agent's entire context with id . The HTML/JavaScript app will be completely cleared out of the agent. Parameters id : The id of an existing agent in the current view to refresh Example { \"type\": \"$agent.clear\", \"options\": { \"id\": \"crypto\" } } 7. $agent.inject Sometimes an agent may want to dynamically run some task that's not included in the agent's original HTML code. This may be the case if you don't have control over the agent's HTML. $agent.inject is an action that lets you dynamically inject a 3rd party JavaScript code into an existing agent context. Parameters id : The recepieint agent ID. items : An array of injection objects, each of which has the following attribute: url : supports file:// or http:// or https:// urls to load JavaScript code from text : inline JS code Example Let's say an agent needs to access a username/password pair stored under $key and instantly sign in a user to a website. (For example, sites like news.ycombinator.com which you don't own) 1. We could implement a function that looks like the following: var auth = function(username, password) { document.querySelector(\".username\").value = usenrame; document.querySelector(\".password\").value = password; document.querySelector(\"form.signin\").submit(); $agent.trigger(\"signed_in\"); } 2. Since this function is NOT included in the original agent code (because you don't own news.ycombinator.com) we will need to inject AND execute . 3. Here's how we would do it: { \"type\": \"$agent.inject\", \"options\": { \"id\": \"HN\", \"items\": [{ \"url\": \"file://authentication.js\" }] }, \"success\": { \"type\": \"$agent.request\", \"options\": { \"id\": \"HN\", \"method\": \"auth\", \"params\": [\"gliechtenstein\", \"12341234\"] } } } Here's what's going on: We first look up the agent using id . This will be the recipient of the task. Then we inject the JavaScript file at file://authentication.js . Next step, we call $agent.request , which makes a function call into the agent context. This time, the $agent.request call will work since the auth function has been injected. Agent Lifecycle Agents are sandboxed per JASON view. One JASON view can conain many agents. When a user navigates away from a view, all its child agents immediately get garbage collected. So if your agent was running a persistent websockets connection for example, it will automatically be destroyed. If a user navigates from view A to view B, and back to view A all the agents under view A gets destroyed when the view A -> view B transition happens all of view A's agents automatically get re-initialized when coming back from view B -> view A. You can call $agent.request at any timing (for example $load or $show or $foreground , etc.). If the agent is not yet ready when the request was made, the request will be automatically queued until the recipient agent is ready to process the request. Demos Here are some demos you can try out right now: Basic API Demo WebSockets Web Audio Firebase Turn your existing Angular.js, Vue.js, Cell.js app into an Agent","title":"\u2605 Agents"},{"location":"agents/#what-is-an-agent","text":"\"Microservices on the frontend\" Jasonette Agent is a new architecture for building native mobile apps that utilizes JavaScript technologies without sacrificing native peformance and user experience. The idea is simple: User interacts with the native core. The core spawns background JavaScript containers for multiple tasks. Core and Agents communicate through JSON-RPC . In short, it's like microservices, but on the frontend .","title":"What is an Agent?"},{"location":"agents/#how-does-it-work","text":"Jasonette Agents are invisible background JavaScript execution environments, internally implemented in WKWebView on iOS and WebView on Android. Agents are optimized to run in the background (Users never interact directly with agents) and interact with the core native app engine with JSON-RPC. Since Jasonette is already 100% operated with JSON, the JSON-RPC approach blends into the app seamlessly.","title":"How does it work?"},{"location":"agents/#what-can-it-do","text":"","title":"What can it do?"},{"location":"agents/#1-plug-in-anything-in-javascript","text":"Agents let you build on top of all kinds of web technologies right out of the box. Anything you can do in JavaScript, now you can do with Jasonette. Just plug it in as an agent.","title":"1. Plug in anything in JavaScript"},{"location":"agents/#2-turn-your-frontend-into-agent-instantly","text":"In fact, if you already have a web app running, you can even plug it into Jasonette as an agent and make it work as a \"backend\" to Jasonette's native frontend. In the example above, we have a website that's already running on websockets on the laptop. Here's the site Now, we can reuse the same website as an agent by plugging it into Jasonette like below (You can see the full markup for the entire app at https://wsjason.herokuapp.com/app.json ): { \"$jason\": { \"head\": { \"title\": \"Websocket Chat\", \"agents\": { \"ws\": { \"url\": \"https://wsjason.herokuapp.com/\" } }, ... } } } Above code basically lets you import the site as a Jasonette agent and communicate with it through JSON-RPC going forward. In the demo you can only see the native app UI on the phone, but in the background the same web app is running to communicate with Jasonette. You can check out some more examples here: Turn your existing Angular.js, Vue.js, Cell.js app into an Agent","title":"2. Turn your frontend into agent instantly"},{"location":"agents/#3-native-user-experience-meets-multithreading","text":"But let's not forget, Jasonette is ultimately a native app platform . All the user interactions happen on the native core side. Agents run in the background and run tasks for core. And here's the cool part: There can be multiple agents. This means agents bring multithreading to Jasonette. Jasonette core is single threaded in order to ensure deterministic UI behaviors. This made it impossible to run multiple concurrent tasks on Jasonette. With agents, all you need to do is offload all the tasks to agents and let them report back through events.","title":"3. Native User Experience meets Multithreading"},{"location":"agents/#quickstart","text":"","title":"Quickstart"},{"location":"agents/#1-write-an-agent","text":"An agent is nothing more than a web page. <html> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.min.js\"></script> <script> var md5 = function(data, sync) { var result = CryptoJS.MD5(data).toString(); $agent.response(result); } </script> </html> We have declared a function called md5 which takes two parameters data and sync . The md5 function runs some task (CryptoJS task) and then makes an $agent.response() call. This is where the agent will return the result back to Jasonette. We'll see this below.","title":"1. Write an agent"},{"location":"agents/#2-plug-it-into-jasonette","text":"Now that we have an agent. How do we plug it into Jasonette? All you need to do is declare the URL under $jason.head.agents . { \"$jason\": { \"head\": { \"title\": \"$agent.request Demo\", \"description\": \"Jasonette to Agent request demo\", \"agents\": { \"crypto\": { \"url\": \"file://crypto.html\" } }, ... We have named this agent \"crypto\" , and enter the url. We will use this as the id when making JSON-RPC requests. In this case we used a file:// url scheme, but you can also load a remote agent with an http[s]:// scheme.","title":"2. Plug it into Jasonette"},{"location":"agents/#3-make-json-rpc-calls","text":"Now let's actually make a function call into the md5 function from the agent. Below is the JSON action that wil make a JSON-RPC call to the agent. The $agent.request is the Jasonette action that makes agent JSON-RPC calls, and the options object is the actual JSON-RPC request object. { \"type\": \"$agent.request\", \"options\": { \"id\": \"crypto\", \"method\": \"md5\", \"params\": [\"{{$get.raw}}\", \"{{$jason.sync}}\"] }, \"success\": { \"trigger\": \"add\", \"options\": { \"result\": \"{{$jason}}\" } } } Remember the how the md5 function from above ? The JSON-RPC object is basically saying \"find an agent with an id of 'crypto' , ask the agent to run a function called 'md5' with the two parameters.\" var md5 = function(data, sync) { var result = CryptoJS.MD5(data).toString(); $agent.response(result); } When the function finishes running, this $agent.response will trigger the success callback on the Jasonette core side, and now Jasonette will continue executing rest of the action call chain.","title":"3. Make JSON-RPC calls"},{"location":"agents/#4-learn-more","text":"This was just one API method usage. You can learn more features by reading on to the next section, or you can also take a look at some demos","title":"4. Learn More"},{"location":"agents/#api","text":"This documentation discusses: Declare : How to declare agents Communicate : How to communicate with agents","title":"API"},{"location":"agents/#1-declare","text":"Each view can have multiple agents. Every agent is sandboxed to their parent view. Agents are set up declaratively (instead of manually initializing through actions, for example) to ensure they are automatically initialized as soon as their parent view loads.","title":"1. Declare"},{"location":"agents/#syntax","text":"You can define agents under $jason.head.agents Each key/value pair represents a sandboxed agent. The key is the name of the agent we'll use to make requests later The value is the JSON markup that represents the agent. Each Agent can take one of the following attributes: url : the URL to load content from http[s]?:// : Any http/https remote url file:// : Any locally embedded file url (under file:// directory) text : Or you can fill it in inline with a piece of HTML text","title":"Syntax"},{"location":"agents/#example","text":"The following code sets up 3 separate sandboxed HTML/JavaScript environments. js_sandbox loads from an HTML text. web3 loads from a file url. firebase loads from a remote https url. { \"$jason\": { \"head\": { \"title\": \"Agent Demo\", \"agents\": { \"js_sandbox\": { \"text\": \"<html><script>var injected = function(a) { return a; }</script></html>\" }, \"web3\": { \"url\": \"file://web.html\" }, \"firebase\": { \"url\": \"https://jasonette-agent.github.io\" } } } } } Once set up, each agent runs on its own, communicating with Jasonette and Other agents sometimes","title":"Example"},{"location":"agents/#2-communicate","text":"Now that everything's set up, we can finally communicate with agents. Below is an overview of how: Jasonette can interact with agents Agents can interact with other agents .","title":"2. Communicate"},{"location":"agents/#overview","text":"","title":"Overview"},{"location":"agents/#1-outside-agent","text":"The outside world can make function call requests to agents. Jasonette => Agent : You can make requests from Jasonette to agents using a Jasonette action . \"type\": \"$agent.request\" : Call any JavaScript function in the agent. Agent => Agent : Agents can make requests to another agent using a JavaScript function . $agent.request(request) : Make a remote function call into another agent, using a JSON-RPC call.","title":"1. Outside =&gt; Agent"},{"location":"agents/#2-agent-outside","text":"Agents can send messages to the outside world with 3 designated JavaScript functions. $agent.response(response) Used to return results in response to an $agent.request call. Can respond to both agent functions (from another agent) and Jasonette actions . Note: All $agent.response must have been triggered by an $agent.request somewhere else in order for it to work. $agent.trigger(event, options) Unlike $agent.response which can only return results to an $agent.request , $agent.trigger can be used any time and anywhere at will. Can trigger a Jasonette event (under $jason.head.actions ). It's powered by Jasonette's native trigger . Note: trigger can only trigger existing events, which means if the event doesn't already exist on the Jasonette side under $jason.head.actions , it won't work. This is to ensure security, so that malicious HTML agent can't trigger any action that Jasonette wasn't aware of. $agent.href(href) trigger a Jasonette href from Agent","title":"2. Agent =&gt; Outside"},{"location":"agents/#api_1","text":"Here are API actions/functions that lets you communicate with agents. $agent.request : Make requests to agents $agent.response : Let agents return a response to a request call $agent.trigger : Trigger Jasonette events from agents $agent.href : Call Jasonette href from agents $agent.refresh : Refresh the agent context. $agent.clear : Clear the agent context. $agent.inject : Dispatch a 3rd party JavaScript function call into an existing agent.","title":"API"},{"location":"agents/#1-agentrequest","text":"$agent.request loosely follows the JSON-RPC 2.0 spec . More specifically, each request object contains three attributes: id method params","title":"1. $agent.request"},{"location":"agents/#11-jasonette-agent","text":"You can use the \"type\": \"$agent.request\" action to call an agent's JavaScript function from Jasonette.","title":"1.1. Jasonette =&gt; Agent"},{"location":"agents/#syntax_1","text":"Just like any other Jasonette action, the $agent.request takes 4 parameters: type : \"$agent.request\" options : The JSON-RPC request object id : The agent id you're targeting. You should have set up the agent with this id before calling this action. method : The function name to call params : An array of parameters to pass to the function success The next Jasonette action to run when the agent responds. Triggered the agent responds with an $agent.response() call. error Only called when there was a problem connecting to the agent . Any error from INSIDE the agent is sandboxed inside the agent, so if you want to handle those, you should use $agent.response() and handle it inside the success callback above.","title":"Syntax"},{"location":"agents/#example_1","text":"The following JSON markup calls a whatsyourname function inside \"007\" agent with two parameters: \"James\" and \"Bond\" . { \"type\": \"$agent.request\", \"options\": { \"id\": \"007\", \"method\": \"whatsyourname\", \"params\": [\"James\", \"Bond\"] }, \"success\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Name is\", \"description\": \"{{$jason}}\" } } } When the whatsyourname function returns some result via $agent.response() JS function, the $agent.request can pick up where it left off and go ahead with its success callback. // Inside agent \"007\". // The function has an immediate return value. var whatsyourname = function(firstname, lastname) { // synchronously return with a return value $agent.response(\"The name is \" + lastname + \". \" + firstname + \" \" + lastname); }","title":"Example"},{"location":"agents/#12-agent-agent","text":"Agents can also talk to one another.","title":"1.2. Agent =&gt; Agent"},{"location":"agents/#syntax_2","text":"$agent.request(request[, callback])","title":"Syntax"},{"location":"agents/#parameters","text":"request : JSON-RPC request Object. Same as the $agent.request Jasonette action, the request object can have 3 attributes: id : The agent id you're targeting. Required method : The function name to call params : The parameters to pass to the function callback : A callback function that will be triggered by an $agent.response() from the callee agent.","title":"Parameters"},{"location":"agents/#example_2","text":"Example 1. One way function call (without callback) Making a whatsyourname(\"James\", \"Bond\") function call into a remote agent named \"007\" . $agent.request({ \"id\": \"007\", \"method\": \"whatsyourname\", \"params\": [\"James\", \"Bond\"] }) In this particular example, there's no return value so it may not look useful at first sight. But the 007 agent can for example directly communicate with Jasonette via \"trigger\" or \"href\" instead of returning its control back to the caller agent. Example 2. Function call with a callback This time we would like to process the return value. // Inside agent \"007\". // The function has an immediate return value. var whatsyourname = function(firstname, lastname) { // synchronously return with a return value $agent.response(\"The name is \" + lastname + \". \" + firstname + \" \" + lastname); } // Inside agent \"M\" $agent.request({ \"id\": \"007\", \"method\": \"whatsyourname\", \"params\": [\"James\", \"Bond\"] }, function(response) { console.log(\"Returned value = \", response); }) Two things to notice: The whatsyourname function calls the $agent.response() function to return its result back to the caller. The $agent.request() function now has a second argument, which is a callback function that will handle the data returned with the $agent.response() .","title":"Example"},{"location":"agents/#2-agentresponse","text":"Agents are designed to interact with the outside world both synchronously and asynchronously . In some cases agent functions can return immediately ( synchronous ), but in many other cases we need to run a long-running function before returning a result ( asynchronous ). It could be an ajax call, or it could be any other time consuming task. Agents can utilize a single function named $agent.response","title":"2. $agent.response"},{"location":"agents/#syntax_3","text":"$agent.response(response)","title":"Syntax"},{"location":"agents/#paramerters","text":"response : Any JavaScript object that can be represented as a flat JSON . Just remember that it can transport anything that can be represented as a JSON string. non-circular : all circular references within the object will be stripped out. only data : functions will be stripped out.","title":"Paramerters"},{"location":"agents/#example_3","text":"We've already seen how agent functions can return results in a synchronous manner. Let' take a look at how you can call agent functions that run asynchronous tasks (It works pretty much the same). // Inside agent \"007\" // The function doesn't have a return value // Instead it waits for 3 seconds before calling $agent.response() asynchronously. var whatsyourname = function(firstname, lastname) { // Asynchronously return after 3 seconds setTimeout(function() { $agent.response(\"The name is \" + lastname + \". \" + firstname + \" \" + lastname) }, 3000); } // Inside agent \"M\" $agent.request({ id: \"007\", \"method\": \"whatsyourname\", \"params\": [\"James\", \"Bond\"] }, function(response) { console.log(\"Returned value = \", response); })","title":"Example"},{"location":"agents/#3-agenttrigger","text":"An agent can also call Jasonette. But we can't just let any agent execute arbitrary Jasonette actions for security reasons. Instead, agents can trigger events that are already defined on the Jasonette side under $jason.head.actions .","title":"3. $agent.trigger"},{"location":"agents/#syntax_4","text":"$agent.trigger is a JavaScript function which can trigger a Jasonette event, along with a payload which will be set to the variable $jason . $agent.trigger(event[, options])","title":"Syntax"},{"location":"agents/#parameters_1","text":"event : A Jasonette event name string. options : An additional payload to send along with the event. It will be accessible as $jason inside the triggered action. Note: Notice there's no callback parameter. $agent.trigger is a fire-and-forget scheme. There is no way to get a response back from Jasonette for security reasons.","title":"Parameters"},{"location":"agents/#example_4","text":"","title":"Example"},{"location":"agents/#example-1-simple-event-trigger","text":"Let's look at this code: { \"$jason\": { \"head\": { \"agents\": { \"simple\": { \"url\": \"file://app.html\" } }, \"actions\": { \"refresh\": { \"type\": \"$render\" } } } } } Since the refresh event is declared under $jason.head.actions , we can trigger it from agents, like this: $agent.trigger(\"refresh\")","title":"Example 1. Simple Event Trigger"},{"location":"agents/#2-event-trigger-with-payload","text":"You can trigger an event with an additional payload too. Take a look at this code: { \"$jason\": { \"head\": { \"agents\": { \"simple\": { \"url\": \"file://app.html\" } }, \"actions\": { \"banner\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"{{$jason.title}}\", \"description\": \"{{$jason.description}}\" } } } } } } Notice now we have a $util.alert action which expects a $jason variable to be passed in. We can trigger this from the simple agent with: $agent.trigger(\"banner\", { \"title\": \"Hello\", \"description\": \"World\" });","title":"2. Event trigger with payload"},{"location":"agents/#4-agenthref","text":"You can trigger a Jasonette href transition from an agent.","title":"4. $agent.href"},{"location":"agents/#syntax_5","text":"$agent.href(href)","title":"Syntax"},{"location":"agents/#parameters_2","text":"Basically you're just passing a Jasonette href object as an argument. href : a Jasonette href object. See href for more.","title":"Parameters"},{"location":"agents/#example_5","text":"$agent.href({ \"url\": \"https://www.jasonbase.com/things/3nf.json\", \"optons\": { \"data\": \"hi\" }, \"transition\": \"modal\" })","title":"Example"},{"location":"agents/#5-agentrefresh","text":"A Jasonette action that lets you refresh an agent context with id . Reloads the web container that contains the agent.","title":"5. $agent.refresh"},{"location":"agents/#parameters_3","text":"id : The id of an existing agent in the current view to refresh","title":"Parameters"},{"location":"agents/#example_6","text":"{ \"type\": \"$agent.refresh\", \"options\": { \"id\": \"crypto\" } }","title":"Example"},{"location":"agents/#6-agentclear","text":"A Jasonette action that lets you clear an agent's entire context with id . The HTML/JavaScript app will be completely cleared out of the agent.","title":"6. $agent.clear"},{"location":"agents/#parameters_4","text":"id : The id of an existing agent in the current view to refresh","title":"Parameters"},{"location":"agents/#example_7","text":"{ \"type\": \"$agent.clear\", \"options\": { \"id\": \"crypto\" } }","title":"Example"},{"location":"agents/#7-agentinject","text":"Sometimes an agent may want to dynamically run some task that's not included in the agent's original HTML code. This may be the case if you don't have control over the agent's HTML. $agent.inject is an action that lets you dynamically inject a 3rd party JavaScript code into an existing agent context.","title":"7. $agent.inject"},{"location":"agents/#parameters_5","text":"id : The recepieint agent ID. items : An array of injection objects, each of which has the following attribute: url : supports file:// or http:// or https:// urls to load JavaScript code from text : inline JS code","title":"Parameters"},{"location":"agents/#example_8","text":"Let's say an agent needs to access a username/password pair stored under $key and instantly sign in a user to a website. (For example, sites like news.ycombinator.com which you don't own)","title":"Example"},{"location":"agents/#1-we-could-implement-a-function-that-looks-like-the-following","text":"var auth = function(username, password) { document.querySelector(\".username\").value = usenrame; document.querySelector(\".password\").value = password; document.querySelector(\"form.signin\").submit(); $agent.trigger(\"signed_in\"); }","title":"1. We could implement a function that looks like the following:"},{"location":"agents/#2-since-this-function-is-not-included-in-the-original-agent-code-because-you-dont-own-newsycombinatorcom-we-will-need-to-inject-and-execute","text":"","title":"2. Since this function is NOT included in the original agent code (because you don't own news.ycombinator.com) we will need to inject AND execute."},{"location":"agents/#3-heres-how-we-would-do-it","text":"{ \"type\": \"$agent.inject\", \"options\": { \"id\": \"HN\", \"items\": [{ \"url\": \"file://authentication.js\" }] }, \"success\": { \"type\": \"$agent.request\", \"options\": { \"id\": \"HN\", \"method\": \"auth\", \"params\": [\"gliechtenstein\", \"12341234\"] } } } Here's what's going on: We first look up the agent using id . This will be the recipient of the task. Then we inject the JavaScript file at file://authentication.js . Next step, we call $agent.request , which makes a function call into the agent context. This time, the $agent.request call will work since the auth function has been injected.","title":"3. Here's how we would do it:"},{"location":"agents/#agent-lifecycle","text":"Agents are sandboxed per JASON view. One JASON view can conain many agents. When a user navigates away from a view, all its child agents immediately get garbage collected. So if your agent was running a persistent websockets connection for example, it will automatically be destroyed. If a user navigates from view A to view B, and back to view A all the agents under view A gets destroyed when the view A -> view B transition happens all of view A's agents automatically get re-initialized when coming back from view B -> view A. You can call $agent.request at any timing (for example $load or $show or $foreground , etc.). If the agent is not yet ready when the request was made, the request will be automatically queued until the recipient agent is ready to process the request.","title":"Agent Lifecycle"},{"location":"agents/#demos","text":"Here are some demos you can try out right now: Basic API Demo WebSockets Web Audio Firebase Turn your existing Angular.js, Vue.js, Cell.js app into an Agent","title":"Demos"},{"location":"android/","text":"Set up Jasonette android Want to skip the setup and try Jasonette without building your own app? - Try Jason. Step 1. DOWNLOAD AND UNZIP Jasonette itself is a pre-built app. All you need to do is download Jasonette and build with Android Studio . Download Jasonette-Android Step 2. LAUNCH ANDROID STUDIO Now launch Android Studio , and select \"Import project\" Step 3. IMPORT THE PROJECT Find the Jasonette folder you just unzipped and press OK. Step 4. PRESS PLAY Jasonette comes with a default demo JSON url embedded. Let's try running it to make sure it works. Step 5. CONNECT THE PHONE AND RUN It will show up a dialog that looks like this. Here you can either choose to run it on an emulator or a real device. To learn how to connect the phone, or how to run it on an emulator, read this . Step 6. CUSTOMIZE! Now let's try changing the JSON url so you can turn it into your own app. First, click the \"Project\" tab on the left side. Then find app > res > values > strings.xml . A. Update JSON URL Update the url property inside strings.xml to your own JSON url. That's it! Build and run the app and you'll find that it's turned into your own app! If you don't have a JSON yet, here are some example apps you can try quickly B. Update App name By default the app is named \"Jasonette\". You probably want to change this. From the same strings.xml file, change the app_name value to your desired app name. C. Update App icon Step 1. Create new Image Asset Select app > res and right-click to display a context menu. Then select New > Image Asset . Step 2. Select your image Select image as Asset Type, and select the path to the image you want to use. Step 3. Confirm and finish It will display some warning about overwriting existing icon. You're overwriting the default icon with your own so it's natural. Press Finish. D. Update App ID (Important!) This is important if you want to submit to the play store, since this is the ID that distinguishes one app from another. To change this ID, go to: Gradle Scripts > build.gradle (Module: app) , and find the applicationId attribute. It should be com.jasonette by default. Change this to your own unique ID. (In this example I've changed it to com.jasonette.seed ) Press \"Sync Now\" at the top right corner, and rebuild. To learn more, read this documentation . \u2605 Did it work? YES? Congratulations! You're ready to transform this into your OWN app! Go on to the tutorial . NO? Check troubleshoot section Submitting to the play store Check out this documentation to learn how to submit to the play store. Debugging Stetho Stetho is a library from Facebook that has been integrated into Debug build types of the Jason app to allow debugging via Chrome Dev Tools. To use Stetho for debugging: Run the Jason app from Android Studio on either a emulator or connected Andriod device (you can also directly use the debug APK that AS creates in app/build/outputs/apk/app-debug.apk ) In a Chrome web browser running on a machine on the same network as the Android device or emulator, open the url chrome://inspect and you should see under 'Remote Target' an entry labelled Jasonette (powered by Stetho) : Click on the inspect link and that will open a new Chrome Dev Tools window, connected to your app ready for debugging. Using the Dev Tools interface you can now inspect the hiearchy of your UI layout, inspect network requests, browse the key-values stored by the Jasonette $global.set and see output from any uses of console.log in your template expressions. A handy feature in the Elements tab of Dev Tools is the UI element running on the Android device will be highlighted when its element is hovered over by the mouse in the Elements tab, just as it would if you were using Dev Tools with a web page. Console output As noted above, a useful feature with Stetho is being able to send debugging output to the Dev Tools console. When Dev Tools is connected, all logging output, both from Jasonette that would go to logcat will also be displayed int eh DevTools console tab. You can send log output to the console from using Javascript within template expressions like so: { \"someaction\" : \"{{ console.debug('hello debug') }}\" } Note: Dev Tools will disconnect from your app each time it is killed (eg. if you install an updated APK). When that happens, to close your existing DevTools window and return 'chrome://inspect' to open it again. Note: Stetho is only included in the debug build type and will NOT be included by the gradle config in release builds of the APK. For more details about Stetho please see its website . Troubleshoot Need more help? Slack - Come ask quick questions and share tips with other Jasonette users. Join here Forum - Chat messages on Slack tend to flow away, so you may want to ask questions on the forum. Also it's good for future users who may have the same problem. All messages on the forum will be read. Visit here: https://forum.jasonette.com","title":"\u25a0 Android"},{"location":"android/#step-1-download-and-unzip","text":"Jasonette itself is a pre-built app. All you need to do is download Jasonette and build with Android Studio . Download Jasonette-Android","title":"Step 1. DOWNLOAD AND UNZIP"},{"location":"android/#step-2-launch-android-studio","text":"Now launch Android Studio , and select \"Import project\"","title":"Step 2. LAUNCH ANDROID STUDIO"},{"location":"android/#step-3-import-the-project","text":"Find the Jasonette folder you just unzipped and press OK.","title":"Step 3. IMPORT THE PROJECT"},{"location":"android/#step-4-press-play","text":"Jasonette comes with a default demo JSON url embedded. Let's try running it to make sure it works.","title":"Step 4. PRESS PLAY"},{"location":"android/#step-5-connect-the-phone-and-run","text":"It will show up a dialog that looks like this. Here you can either choose to run it on an emulator or a real device. To learn how to connect the phone, or how to run it on an emulator, read this .","title":"Step 5. CONNECT THE PHONE AND RUN"},{"location":"android/#step-6-customize","text":"Now let's try changing the JSON url so you can turn it into your own app. First, click the \"Project\" tab on the left side. Then find app > res > values > strings.xml .","title":"Step 6. CUSTOMIZE!"},{"location":"android/#a-update-json-url","text":"Update the url property inside strings.xml to your own JSON url. That's it! Build and run the app and you'll find that it's turned into your own app! If you don't have a JSON yet, here are some example apps you can try quickly","title":"A. Update JSON URL"},{"location":"android/#b-update-app-name","text":"By default the app is named \"Jasonette\". You probably want to change this. From the same strings.xml file, change the app_name value to your desired app name.","title":"B. Update App name"},{"location":"android/#c-update-app-icon","text":"Step 1. Create new Image Asset Select app > res and right-click to display a context menu. Then select New > Image Asset . Step 2. Select your image Select image as Asset Type, and select the path to the image you want to use. Step 3. Confirm and finish It will display some warning about overwriting existing icon. You're overwriting the default icon with your own so it's natural. Press Finish.","title":"C. Update App icon"},{"location":"android/#d-update-app-id-important","text":"This is important if you want to submit to the play store, since this is the ID that distinguishes one app from another. To change this ID, go to: Gradle Scripts > build.gradle (Module: app) , and find the applicationId attribute. It should be com.jasonette by default. Change this to your own unique ID. (In this example I've changed it to com.jasonette.seed ) Press \"Sync Now\" at the top right corner, and rebuild. To learn more, read this documentation .","title":"D. Update App ID (Important!)"},{"location":"android/#did-it-work","text":"","title":"\u2605 Did it work?"},{"location":"android/#yes","text":"Congratulations! You're ready to transform this into your OWN app! Go on to the tutorial .","title":"YES?"},{"location":"android/#no","text":"Check troubleshoot section","title":"NO?"},{"location":"android/#submitting-to-the-play-store","text":"Check out this documentation to learn how to submit to the play store.","title":"Submitting to the play store"},{"location":"android/#debugging","text":"","title":"Debugging"},{"location":"android/#stetho","text":"Stetho is a library from Facebook that has been integrated into Debug build types of the Jason app to allow debugging via Chrome Dev Tools. To use Stetho for debugging: Run the Jason app from Android Studio on either a emulator or connected Andriod device (you can also directly use the debug APK that AS creates in app/build/outputs/apk/app-debug.apk ) In a Chrome web browser running on a machine on the same network as the Android device or emulator, open the url chrome://inspect and you should see under 'Remote Target' an entry labelled Jasonette (powered by Stetho) : Click on the inspect link and that will open a new Chrome Dev Tools window, connected to your app ready for debugging. Using the Dev Tools interface you can now inspect the hiearchy of your UI layout, inspect network requests, browse the key-values stored by the Jasonette $global.set and see output from any uses of console.log in your template expressions. A handy feature in the Elements tab of Dev Tools is the UI element running on the Android device will be highlighted when its element is hovered over by the mouse in the Elements tab, just as it would if you were using Dev Tools with a web page.","title":"Stetho"},{"location":"android/#console-output","text":"As noted above, a useful feature with Stetho is being able to send debugging output to the Dev Tools console. When Dev Tools is connected, all logging output, both from Jasonette that would go to logcat will also be displayed int eh DevTools console tab. You can send log output to the console from using Javascript within template expressions like so: { \"someaction\" : \"{{ console.debug('hello debug') }}\" } Note: Dev Tools will disconnect from your app each time it is killed (eg. if you install an updated APK). When that happens, to close your existing DevTools window and return 'chrome://inspect' to open it again. Note: Stetho is only included in the debug build type and will NOT be included by the gradle config in release builds of the APK.","title":"Console output"},{"location":"android/#for-more-details-about-stetho-please-see-its-website","text":"","title":"For more details about Stetho please see its website."},{"location":"android/#troubleshoot","text":"","title":"Troubleshoot"},{"location":"android/#need-more-help","text":"Slack - Come ask quick questions and share tips with other Jasonette users. Join here Forum - Chat messages on Slack tend to flow away, so you may want to ask questions on the forum. Also it's good for future users who may have the same problem. All messages on the forum will be read. Visit here: https://forum.jasonette.com","title":"Need more help?"},{"location":"components/","text":"Types of Components Components are user interface elements that can be used in different places, such as items , and layers . label image button textfield textarea slider switch html space map Don't see what you want? You can add more! \u25a0 label Static uneditable text element. syntax type : \"label\" text : The text to display style : font : text font name size : text size color : text color in color code padding : padding in pixels background : background color of the label in color code corner_radius : corner radius for the label example { \"type\": \"label\", \"text\": \"Hello world\", \"style\": { \"font\": \"Avenir\", \"size\": \"30\", \"color\": \"rgb(200,0,0)\", \"padding\": \"10\" } } \u25a0 image Image loaded from either remote url or data-url \u26a0\ufe0f Disclaimer: image components are NOT Interactive. To attach action or href to make an image interactive, use image buttons syntax type : \"image\" url : image url header : (optional) in case the image needs authentication and we need to attach a header object to the request style (optional) corner_radius : corner radius. use this to make the image rounded width height color : To set the tint color (only for icons) example { \"type\": \"image\", \"url\": \"http://i.imgur.com/KUJPgGV.png\", \"header\": { \"auth_token\": \"3nfdss3fNdlenghs_dnekgldnvq334hd\" }, \"style\": { \"width\": \"50\", \"height\": \"50\", \"corner_radius\": \"25\" } } \u25a0 button A basic component that responds to user tap. Can be either a text button or an image button, depending on what attributes are used. syntax type : \"button\" text : button text (pick either text or url , can't have both) url : button image url (pick either text or url , can't have both) header : (optional) in case the we're using the image button and the image needs authentication and we need to attach a header object to the request style width : Width of the clickable region (In case of image buttons, the image will auto-resize proportionally to fit into this region) height : Height of the clickable region (In case of image buttons, the image will auto-resize proportionally to fit into this region) color : text color background : background color border_width : border width for the button border_color : border color for the button color : To set the tint color (only for icons) corner_radius : corner radius for the button padding : padding outside of the text (in case of text button) or outside of the image (in case of image button). Note that the height and width will stay the same regardless of what padding value you set. align : Only for text buttons. You can set it as left , right , or center . The default is center . (Irrelevant on image buttons since image buttons will always be centered) action : Attach an action attribute to be triggered when user taps the button. Example Text button Use text attribute to make it a label button { \"type\": \"button\", \"text\": \"Tap Me!\", \"style\": { \"width\": \"50\", \"height\": \"50\", \"background\": \"#00ff00\", \"color\": \"#ffffff\", \"font\": \"HelveticaNeue\", \"size\": \"12\", \"corner_radius\": \"25\" }, \"action\": { \"trigger\": \"reload\" } } Image button Use url attribute to make it an image button { \"type\": \"button\", \"url\": \"https://raw.githubusercontent.com/Jasonette/Jasonpedia/gh-pages/assets/krusty.png\", \"header\": { \"auth_token\": \"3nfdss3fNdlenghs_dnekgldnvq334hd\" }, \"style\": { \"width\": \"50\", \"height\": \"50\", \"background\": \"#00ff00\", \"color\": \"#ffffff\", \"font\": \"HelveticaNeue\", \"size\": \"12\", \"corner_radius\": \"25\" }, \"action\": { \"trigger\": \"reload\" } } \u25a0 textfield Single line input field textfields are seamlessly integrated with local variables syntax name : name of the local variable to set. value : in case you wish to prefill the field. placeholder : Placeholder text for when there's no content filled in. keyboard : The keyboard type. One of the following: \"text\" | \"number\" | \"phone\" | \"decimal\" | \"url\" | \"email\" (if unspecified, the default is \"text\" ) focus : Set \"true\" to autofocus this component on view load. style : style the textfield background align autocorrect : set to \"true\" to enable autocorrect autocapitalize : set to \"true\" to enable autocapitalize spellcheck : set to \"true\" to enable spellcheck size : text size font : text font color : text color placeholder_color : placeholder text color secure: hide character input if set to \"true\" examples Example 1: password input { \"type\": \"textfield\", \"name\": \"password\", \"value\": \"dhenf93f!\", \"placeholder\": \"Enter password\", \"style\": { \"placeholder_color\": \"#cecece\", \"font\": \"HelveticaNeue\", \"align\": \"center\", \"width\": \"200\", \"height\": \"60\", \"secure\": \"true\", \"size\": \"12\" } } Example 2: autocorrect/autocaptiazlie/spellcheck input { \"type\": \"textfield\", \"name\": \"status\", \"placeholder\": \"Status update\", \"style\": { \"placeholder_color\": \"#cecece\", \"font\": \"HelveticaNeue\", \"align\": \"center\", \"width\": \"200\", \"height\": \"60\", \"autocorrect\": \"true\", \"autocapitalize\": \"true\", \"spellcheck\": \"true\", \"size\": \"12\" } } \u25a0 textarea Multiline input field name : name of the local variable to set. value : in case you wish to prefill the field. placeholder : Placeholder text for when there's no content filled in. keyboard : The keyboard type. One of the following: \"text\" | \"number\" | \"phone\" | \"decimal\" | \"url\" | \"email\" (if unspecified, the default is \"text\" ) focus : Set \"true\" to autofocus this component on view load. style : style the textfield background align : \"left\" | \"center\" | \"right\" (default is \"left\" ) autocorrect : set to \"true\" to enable autocorrect autocapitalize : set to \"true\" to enable autocapitalize spellcheck : set to \"true\" to enable spellcheck size : text size font : text font color : text color placeholder_color : placeholder text color example Below, we've named the textarea status , and then refer to its value from submit action through the template expression {{$get.status}} { \"$jason\": { \"head\": { \"actions\": { ... \"submit\" : { \"type\": \"$network.request\", \"options\": { \"url\": \"https://stts.jasonclient.org/status.json\", \"method\": \"post\", \"data\": { \"content\": \"{{$get.status}}\" } }, \"success\": { \"type\": \"$reload\" } } ... } }, \"body\": { ... { \"type\": \"textarea\", \"name\": \"status\", \"placeholder\": \"Status update\", \"value\": \"Eating lunch..\", \"style\": { \"background\": \"rgba(0,0,0,0)\", \"placeholder_color\": \"#cecece\", \"font\": \"HelveticaNeue\", \"align\": \"center\", \"width\": \"100%\", \"height\": \"300\", \"autocorrect\": \"true\", \"autocapitalize\": \"true\", \"spellcheck\": \"true\", \"size\": \"12\" } } ... } } } \u25a0 slider Horizontal slider input syntax name : name of the local variable to set. value : value between 0 and 1 (in string) to preset the slider with. For example \"0.3\" action : action to execute after user completes the sliding gesture. style width height color example Below, we set the slider's name gauge and triggers the notice action, which accesses its value whenever the user ends the sliding action. { \"$jason\": { \"head\": { ... \"notice\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Volume changed\", \"description\": \"{{parseFloat($get.gauge)*100}}%\" } } ... }, \"body\": { ... { \"type\": \"slider\", \"name\": \"gauge\", \"action\": { \"trigger\": \"notice\" } } ... } } } \u25a0 switch Simple true/false input syntax name : name of the local variable to set. value : boolean. true (switch to the right). false (switch to the left). action : action to execute after user completes the sliding gesture. style color : \"active (right) state color\" (default os active state color if not specified). color:disabled : \"inactive (left) state color\" (default os inactive state color if not specified). example Below, we set the switch's name light and triggers the banner action, which accesses its value whenever the user changes the switch position. { \"$jason\": { \"head\": { ... \"banner\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"{{$get[$jason.item].toString()}}\", \"description\": \"{{$jason.item}}\" }, \"success\": { \"type\": \"$render\" } } } ... }, \"body\": { ... { \"type\": \"switch\", \"name\": \"light\", \"value\": \"true\", \"action\": { \"trigger\": \"banner\", \"options\": { \"item\": \"Light is On?\" } } } ... } } \u25a0 html A self-contained web environment that you can plug in, style, and manipulate just like the rest of the components. To learn more, refer to Web containers . \u25a0 space An empty space component mostly used for layout purposes. syntax style background : background color (transparent if not specified) width : only specify if you want a horizontally fixed size space height : only specify if you want a vertically fixed size space Example 1. Flexible size space If you don't specify the style, the space component will contract or expand flexibly depending on its surrounding sibling components. This is useful for when you wish to make special alignments, such as aligning one component to the left, and the other to the right in a horizontal layout. { \"type\": \"horizontal\", \"components\": [ { \"type\": \"image\", \"url\": \"https://jasonclient.org/img/john.png\", \"style\": { \"width\": \"50\" } }, { \"type\": \"space\" }, { \"type\": \"button\", \"text\": \"Follow\" \"style\": { \"width\": \"100\", \"height\": \"50\" } } ] } Example 2. Fixed size space You can also set the size of a space component. { \"type\": \"vertical\", \"components\": [ { \"type\": \"image\", \"url\": \"https://jasonclient.org/img/john.png\", \"style\": { \"width\": \"50\" } }, { \"type\": \"space\", \"style\": { \"height\": \"50\" } }, { \"type\": \"label\", \"text\": \"The names 'John Doe' or 'John Roe' for men, 'Jane Doe' or 'Jane Roe' for women, or 'Johnnie Doe' and 'Janie Doe' for children, or just 'Doe' non-gender-specifically are used as placeholder names for a party whose true identity is unknown or must be withheld in a legal action, case, or discussion.\" } ] } \u25a0 map Map component syntax \u2022 type : \"map\" \u2022 region : Describes the region this map component will draw. coord : Coordinate string in LATITUDE,LONGITUDE format, around which the map should be centered. (example: \"40.7146598,-73.9418602\" ) width : The width in meters in terms of how wide the map region should be height : The height in meters in terms of how wide the map region should be \u2022 pins : Array of pin objects. Each pin contains the following attributes: coord : Coordinate string in LATITUDE,LONGITUDE format. (example: \"40.7146598,-73.9418602\" ) title description style selected : display the annotation by default even when not tapped. \u2022 style : Styling of the component itself type : \"satellite\" | \"hybrid\" | \"hybrid_flyover\" | \"satellite_flyover\" width : width of the component to display height : height of the component to display corner_radius : corner radius of the component Example { \"type\": \"map\", \"region\": { \"coord\": \"40.7197614,-73.9909211\", \"width\": \"100\", \"height\": \"100\" }, \"pins\": [{ \"title\": \"This is a pin\", \"description\": \"It really is.\", \"coord\": \"40.7197614,-73.9909211\", \"style\": { \"selected\": \"true\" } }], \"style\": { \"width\": \"100%\", \"height\": \"300\" } } Permissions and API Keys On iOS the map component works right out of the box using Apple's native map. However on Android you need to set it up using Google Maps API. Just open up AndroidManifest.xml file from Android Studio. Uncomment the lines described below: And add your Google Maps API Key (You can get it from here )","title":"\u2605 Components"},{"location":"components/#types-of-components","text":"Components are user interface elements that can be used in different places, such as items , and layers . label image button textfield textarea slider switch html space map Don't see what you want? You can add more!","title":"Types of Components"},{"location":"components/#label","text":"Static uneditable text element.","title":"\u25a0 label"},{"location":"components/#syntax","text":"type : \"label\" text : The text to display style : font : text font name size : text size color : text color in color code padding : padding in pixels background : background color of the label in color code corner_radius : corner radius for the label","title":"syntax"},{"location":"components/#example","text":"{ \"type\": \"label\", \"text\": \"Hello world\", \"style\": { \"font\": \"Avenir\", \"size\": \"30\", \"color\": \"rgb(200,0,0)\", \"padding\": \"10\" } }","title":"example"},{"location":"components/#image","text":"Image loaded from either remote url or data-url \u26a0\ufe0f Disclaimer: image components are NOT Interactive. To attach action or href to make an image interactive, use image buttons","title":"\u25a0 image"},{"location":"components/#syntax_1","text":"type : \"image\" url : image url header : (optional) in case the image needs authentication and we need to attach a header object to the request style (optional) corner_radius : corner radius. use this to make the image rounded width height color : To set the tint color (only for icons)","title":"syntax"},{"location":"components/#example_1","text":"{ \"type\": \"image\", \"url\": \"http://i.imgur.com/KUJPgGV.png\", \"header\": { \"auth_token\": \"3nfdss3fNdlenghs_dnekgldnvq334hd\" }, \"style\": { \"width\": \"50\", \"height\": \"50\", \"corner_radius\": \"25\" } }","title":"example"},{"location":"components/#button","text":"A basic component that responds to user tap. Can be either a text button or an image button, depending on what attributes are used.","title":"\u25a0  button"},{"location":"components/#syntax_2","text":"type : \"button\" text : button text (pick either text or url , can't have both) url : button image url (pick either text or url , can't have both) header : (optional) in case the we're using the image button and the image needs authentication and we need to attach a header object to the request style width : Width of the clickable region (In case of image buttons, the image will auto-resize proportionally to fit into this region) height : Height of the clickable region (In case of image buttons, the image will auto-resize proportionally to fit into this region) color : text color background : background color border_width : border width for the button border_color : border color for the button color : To set the tint color (only for icons) corner_radius : corner radius for the button padding : padding outside of the text (in case of text button) or outside of the image (in case of image button). Note that the height and width will stay the same regardless of what padding value you set. align : Only for text buttons. You can set it as left , right , or center . The default is center . (Irrelevant on image buttons since image buttons will always be centered) action : Attach an action attribute to be triggered when user taps the button.","title":"syntax"},{"location":"components/#example_2","text":"Text button Use text attribute to make it a label button { \"type\": \"button\", \"text\": \"Tap Me!\", \"style\": { \"width\": \"50\", \"height\": \"50\", \"background\": \"#00ff00\", \"color\": \"#ffffff\", \"font\": \"HelveticaNeue\", \"size\": \"12\", \"corner_radius\": \"25\" }, \"action\": { \"trigger\": \"reload\" } } Image button Use url attribute to make it an image button { \"type\": \"button\", \"url\": \"https://raw.githubusercontent.com/Jasonette/Jasonpedia/gh-pages/assets/krusty.png\", \"header\": { \"auth_token\": \"3nfdss3fNdlenghs_dnekgldnvq334hd\" }, \"style\": { \"width\": \"50\", \"height\": \"50\", \"background\": \"#00ff00\", \"color\": \"#ffffff\", \"font\": \"HelveticaNeue\", \"size\": \"12\", \"corner_radius\": \"25\" }, \"action\": { \"trigger\": \"reload\" } }","title":"Example"},{"location":"components/#textfield","text":"Single line input field textfields are seamlessly integrated with local variables","title":"\u25a0 textfield"},{"location":"components/#syntax_3","text":"name : name of the local variable to set. value : in case you wish to prefill the field. placeholder : Placeholder text for when there's no content filled in. keyboard : The keyboard type. One of the following: \"text\" | \"number\" | \"phone\" | \"decimal\" | \"url\" | \"email\" (if unspecified, the default is \"text\" ) focus : Set \"true\" to autofocus this component on view load. style : style the textfield background align autocorrect : set to \"true\" to enable autocorrect autocapitalize : set to \"true\" to enable autocapitalize spellcheck : set to \"true\" to enable spellcheck size : text size font : text font color : text color placeholder_color : placeholder text color secure: hide character input if set to \"true\"","title":"syntax"},{"location":"components/#examples","text":"","title":"examples"},{"location":"components/#example-1-password-input","text":"{ \"type\": \"textfield\", \"name\": \"password\", \"value\": \"dhenf93f!\", \"placeholder\": \"Enter password\", \"style\": { \"placeholder_color\": \"#cecece\", \"font\": \"HelveticaNeue\", \"align\": \"center\", \"width\": \"200\", \"height\": \"60\", \"secure\": \"true\", \"size\": \"12\" } }","title":"Example 1: password input"},{"location":"components/#example-2-autocorrectautocaptiazliespellcheck-input","text":"{ \"type\": \"textfield\", \"name\": \"status\", \"placeholder\": \"Status update\", \"style\": { \"placeholder_color\": \"#cecece\", \"font\": \"HelveticaNeue\", \"align\": \"center\", \"width\": \"200\", \"height\": \"60\", \"autocorrect\": \"true\", \"autocapitalize\": \"true\", \"spellcheck\": \"true\", \"size\": \"12\" } }","title":"Example 2: autocorrect/autocaptiazlie/spellcheck input"},{"location":"components/#textarea","text":"Multiline input field name : name of the local variable to set. value : in case you wish to prefill the field. placeholder : Placeholder text for when there's no content filled in. keyboard : The keyboard type. One of the following: \"text\" | \"number\" | \"phone\" | \"decimal\" | \"url\" | \"email\" (if unspecified, the default is \"text\" ) focus : Set \"true\" to autofocus this component on view load. style : style the textfield background align : \"left\" | \"center\" | \"right\" (default is \"left\" ) autocorrect : set to \"true\" to enable autocorrect autocapitalize : set to \"true\" to enable autocapitalize spellcheck : set to \"true\" to enable spellcheck size : text size font : text font color : text color placeholder_color : placeholder text color","title":"\u25a0 textarea"},{"location":"components/#example_3","text":"Below, we've named the textarea status , and then refer to its value from submit action through the template expression {{$get.status}} { \"$jason\": { \"head\": { \"actions\": { ... \"submit\" : { \"type\": \"$network.request\", \"options\": { \"url\": \"https://stts.jasonclient.org/status.json\", \"method\": \"post\", \"data\": { \"content\": \"{{$get.status}}\" } }, \"success\": { \"type\": \"$reload\" } } ... } }, \"body\": { ... { \"type\": \"textarea\", \"name\": \"status\", \"placeholder\": \"Status update\", \"value\": \"Eating lunch..\", \"style\": { \"background\": \"rgba(0,0,0,0)\", \"placeholder_color\": \"#cecece\", \"font\": \"HelveticaNeue\", \"align\": \"center\", \"width\": \"100%\", \"height\": \"300\", \"autocorrect\": \"true\", \"autocapitalize\": \"true\", \"spellcheck\": \"true\", \"size\": \"12\" } } ... } } }","title":"example"},{"location":"components/#slider","text":"Horizontal slider input","title":"\u25a0 slider"},{"location":"components/#syntax_4","text":"name : name of the local variable to set. value : value between 0 and 1 (in string) to preset the slider with. For example \"0.3\" action : action to execute after user completes the sliding gesture. style width height color","title":"syntax"},{"location":"components/#example_4","text":"Below, we set the slider's name gauge and triggers the notice action, which accesses its value whenever the user ends the sliding action. { \"$jason\": { \"head\": { ... \"notice\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"Volume changed\", \"description\": \"{{parseFloat($get.gauge)*100}}%\" } } ... }, \"body\": { ... { \"type\": \"slider\", \"name\": \"gauge\", \"action\": { \"trigger\": \"notice\" } } ... } } }","title":"example"},{"location":"components/#switch","text":"Simple true/false input","title":"\u25a0 switch"},{"location":"components/#syntax_5","text":"name : name of the local variable to set. value : boolean. true (switch to the right). false (switch to the left). action : action to execute after user completes the sliding gesture. style color : \"active (right) state color\" (default os active state color if not specified). color:disabled : \"inactive (left) state color\" (default os inactive state color if not specified).","title":"syntax"},{"location":"components/#example_5","text":"Below, we set the switch's name light and triggers the banner action, which accesses its value whenever the user changes the switch position. { \"$jason\": { \"head\": { ... \"banner\": { \"type\": \"$util.banner\", \"options\": { \"title\": \"{{$get[$jason.item].toString()}}\", \"description\": \"{{$jason.item}}\" }, \"success\": { \"type\": \"$render\" } } } ... }, \"body\": { ... { \"type\": \"switch\", \"name\": \"light\", \"value\": \"true\", \"action\": { \"trigger\": \"banner\", \"options\": { \"item\": \"Light is On?\" } } } ... } }","title":"example"},{"location":"components/#html","text":"A self-contained web environment that you can plug in, style, and manipulate just like the rest of the components. To learn more, refer to Web containers .","title":"\u25a0  html"},{"location":"components/#space","text":"An empty space component mostly used for layout purposes.","title":"\u25a0  space"},{"location":"components/#syntax_6","text":"style background : background color (transparent if not specified) width : only specify if you want a horizontally fixed size space height : only specify if you want a vertically fixed size space","title":"syntax"},{"location":"components/#example-1-flexible-size-space","text":"If you don't specify the style, the space component will contract or expand flexibly depending on its surrounding sibling components. This is useful for when you wish to make special alignments, such as aligning one component to the left, and the other to the right in a horizontal layout. { \"type\": \"horizontal\", \"components\": [ { \"type\": \"image\", \"url\": \"https://jasonclient.org/img/john.png\", \"style\": { \"width\": \"50\" } }, { \"type\": \"space\" }, { \"type\": \"button\", \"text\": \"Follow\" \"style\": { \"width\": \"100\", \"height\": \"50\" } } ] }","title":"Example 1. Flexible size space"},{"location":"components/#example-2-fixed-size-space","text":"You can also set the size of a space component. { \"type\": \"vertical\", \"components\": [ { \"type\": \"image\", \"url\": \"https://jasonclient.org/img/john.png\", \"style\": { \"width\": \"50\" } }, { \"type\": \"space\", \"style\": { \"height\": \"50\" } }, { \"type\": \"label\", \"text\": \"The names 'John Doe' or 'John Roe' for men, 'Jane Doe' or 'Jane Roe' for women, or 'Johnnie Doe' and 'Janie Doe' for children, or just 'Doe' non-gender-specifically are used as placeholder names for a party whose true identity is unknown or must be withheld in a legal action, case, or discussion.\" } ] }","title":"Example 2. Fixed size space"},{"location":"components/#map","text":"Map component","title":"\u25a0  map"},{"location":"components/#syntax_7","text":"","title":"syntax"},{"location":"components/#type-map","text":"","title":"\u2022 type: \"map\""},{"location":"components/#region-describes-the-region-this-map-component-will-draw","text":"coord : Coordinate string in LATITUDE,LONGITUDE format, around which the map should be centered. (example: \"40.7146598,-73.9418602\" ) width : The width in meters in terms of how wide the map region should be height : The height in meters in terms of how wide the map region should be","title":"\u2022 region: Describes the region this map component will draw."},{"location":"components/#pins-array-of-pin-objects-each-pin-contains-the-following-attributes","text":"coord : Coordinate string in LATITUDE,LONGITUDE format. (example: \"40.7146598,-73.9418602\" ) title description style selected : display the annotation by default even when not tapped.","title":"\u2022 pins: Array of pin objects. Each pin contains the following attributes:"},{"location":"components/#style-styling-of-the-component-itself","text":"type : \"satellite\" | \"hybrid\" | \"hybrid_flyover\" | \"satellite_flyover\" width : width of the component to display height : height of the component to display corner_radius : corner radius of the component","title":"\u2022 style: Styling of the component itself"},{"location":"components/#example_6","text":"{ \"type\": \"map\", \"region\": { \"coord\": \"40.7197614,-73.9909211\", \"width\": \"100\", \"height\": \"100\" }, \"pins\": [{ \"title\": \"This is a pin\", \"description\": \"It really is.\", \"coord\": \"40.7197614,-73.9909211\", \"style\": { \"selected\": \"true\" } }], \"style\": { \"width\": \"100%\", \"height\": \"300\" } }","title":"Example"},{"location":"components/#permissions-and-api-keys","text":"On iOS the map component works right out of the box using Apple's native map. However on Android you need to set it up using Google Maps API. Just open up AndroidManifest.xml file from Android Studio. Uncomment the lines described below: And add your Google Maps API Key (You can get it from here )","title":"Permissions and API Keys"},{"location":"convention/","text":"Jasonette is built around various conventions in order to make things simpler. Rules \u25a0 Everything is a string The JSON we use in Jasonette is completely string based. All values are string. Sometimes this may look inconvenient, but assuming everything is a string provides lots of convenience when JSON parsing is concerned. \u25a0 All keywords are lowercased All reserved keywords on Jasonette (component name, action name, etc.) are lowercased. Values \u25a0 color rgb We can use rgb code. { \"body\": { \"background\": \"rgb(244,244,244)\" } } rgba We can use rgba code. r,g,b parts are same as rgb, but the last value is the opacity. { \"body\": { \"background\": \"rgba(255,255,255,0.3)\" } } hex code We can also use hex code { \"body\": { \"background\": \"#ff0000\" } } \u25a0 dimension All numbers are pixels unless otherwise specified. 1. Pixels Below we create a label with 300pixel width. { \"type\": \"label\", \"text\": \"hi\", \"style\": { \"width\": \"300\" } } 2. Percentage We can use the % sign. When we do so, it sets the dimension based on the current orientation. { \"type\": \"label\", \"text\": \"hi\", \"style\": { \"width\": \"100%\" } } 3. Pixels and Percentage We can also use a combination of percentage and pixels. In the following example we create a label that's 80 pixels smaller horizontally than the full device width: { \"type\": \"label\", \"text\": \"hi\", \"style\": { \"width\": \"100%-80\" } }","title":"\u25a0 Tips"},{"location":"convention/#rules","text":"","title":"Rules"},{"location":"convention/#everything-is-a-string","text":"The JSON we use in Jasonette is completely string based. All values are string. Sometimes this may look inconvenient, but assuming everything is a string provides lots of convenience when JSON parsing is concerned.","title":"\u25a0  Everything is a string"},{"location":"convention/#all-keywords-are-lowercased","text":"All reserved keywords on Jasonette (component name, action name, etc.) are lowercased.","title":"\u25a0  All keywords are lowercased"},{"location":"convention/#values","text":"","title":"Values"},{"location":"convention/#color","text":"","title":"\u25a0 color"},{"location":"convention/#rgb","text":"We can use rgb code. { \"body\": { \"background\": \"rgb(244,244,244)\" } }","title":"rgb"},{"location":"convention/#rgba","text":"We can use rgba code. r,g,b parts are same as rgb, but the last value is the opacity. { \"body\": { \"background\": \"rgba(255,255,255,0.3)\" } }","title":"rgba"},{"location":"convention/#hex-code","text":"We can also use hex code { \"body\": { \"background\": \"#ff0000\" } }","title":"hex code"},{"location":"convention/#dimension","text":"All numbers are pixels unless otherwise specified.","title":"\u25a0 dimension"},{"location":"convention/#1-pixels","text":"Below we create a label with 300pixel width. { \"type\": \"label\", \"text\": \"hi\", \"style\": { \"width\": \"300\" } }","title":"1. Pixels"},{"location":"convention/#2-percentage","text":"We can use the % sign. When we do so, it sets the dimension based on the current orientation. { \"type\": \"label\", \"text\": \"hi\", \"style\": { \"width\": \"100%\" } }","title":"2. Percentage"},{"location":"convention/#3-pixels-and-percentage","text":"We can also use a combination of percentage and pixels. In the following example we create a label that's 80 pixels smaller horizontally than the full device width: { \"type\": \"label\", \"text\": \"hi\", \"style\": { \"width\": \"100%-80\" } }","title":"3. Pixels and Percentage"},{"location":"document/","text":"\u2500\u2500 $jason \u2500\u2500 A Jason document always starts with $jason as its root node, and has two children: head and body , each of which has multiple children of its own. \u2500\u2500 head \u2500\u2500 The head contains a set of metadata that doesn't get displayed directly. The title attribute is mandatory. Rest of the attributes are optional. Head can contain the following attributes: title description icon offline styles actions templates data agents In JSON they look like this: { \"$jason\": { \"head\": { \"title\": \"...\", \"description\": \"...\", \"icon\": \"...\", \"offline\": \"true\", \"styles\": { ... }, \"actions\": { ... }, \"templates\": { ... }, \"data\": { ... } }, \"body\": { ... } } } head.title Title string for your app. { \"$jason\": { \"head\": { \"title\": \"Hello World\", ... }, ... } } head.description Description string for your app. Let users find out what the app does, how it works, etc. just by looking at the JSON code. { \"$jason\": { \"head\": { \"title\": \"Hello World\", \"description\": \"This app displays 'Hello World' on the screen\", ... }, ... } } head.icon An icon URL that represents your app. { \"$jason\": { \"head\": { \"title\": \"Hellow World\", \"description\": \"This app displays 'Hello World' on the screen\", \"icon\": \"https://s3.amazonaws.com/jasonclient/hello.png\", ... }, ... } } head.offline Optional value to cache JSON file for offline use. Defaults to true . It doesn't matter what you set the value to; due to a quirk of Jasonette, just including it with any value makes it be counted as true. Here's an example of how to use it: { \"$jason\": { \"head\": { \"title\": \"Hellow World\", \"description\": \"This app displays 'Hello World' on the screen\", \"icon\": \"https://s3.amazonaws.com/jasonclient/hello.png\", \"offline\": \"true/yes/on\", ... }, ... } } head.styles Declare commonly used style classes here so you can reuse them later. Let's take a look at an example to demonstrate how using head.styles can be helpful compared to styling UI elements inline . For example here's an example of inline styling : { \"$jason\": { \"head\": { ... }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"This is row 1\", \"style\": { \"font\": \"HelveticaNeue\", \"size\": \"20\", \"color\": \"#ff0000\", \"padding\": \"10\" } }, { \"type\": \"label\", \"text\": \"This is row 2\", \"style\": { \"font\": \"HelveticaNeue\", \"size\": \"20\", \"color\": \"#ff0000\", \"padding\": \"10\" } }, { \"type\": \"label\", \"text\": \"This is row 3\", \"style\": { \"font\": \"HelveticaNeue\", \"size\": \"20\", \"color\": \"#ff0000\", \"padding\": \"10\" } }] }] } } } You can see that there's a style JSON for each label item. This is called inline styling since the style attribute is attached to the UI component directly. Now if you look closer, you'll see that each item has exactly the same repeating style. We can get rid of this redundancy by using head.styles : { \"$jason\": { \"head\": { ... \"styles\": { \"styled_row\": { \"font\": \"HelveticaNeue\", \"size\": \"20\", \"color\": \"#ff0000\", \"padding\": \"10\" } } }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"This is row 1\", \"class\": \"styled_row\" }, { \"type\": \"label\", \"text\": \"This is row 2\", \"class\": \"styled_row\" }, { \"type\": \"label\", \"text\": \"This is row 3\", \"class\": \"styled_row\" }] }] } } } First look at each label item. Now the style attributes are gone, but instead we have a class value of styled_row for each. Now let's look under $jason.head.styles . You'll see we now have the styled_row defined here. The styles registered here will be applied to each UI component whenever its class name is referenced. note Multiple styles can be used in a single class . Example: \"class\": \"styled_row color_white background_green\" . This can be used for creating complex styles with ease!. head.actions Using action registry to define actions You can define actions under the action registry ( head.actions ) and reuse them through the trigger keyword. head.templates Declaring templates You can dynamically render any data using templates. Templates are registered under head.templates head.data Using inline data for rendering head.data is like an inline database that gets rendered automatically by body template if included. head.agents Jasonette Agent is a new architecture for building native mobile apps that utilizes JavaScript technologies without sacrificing native peformance and user experience. The idea is simple: User interacts with the native core. The core spawns background JavaScript containers for multiple tasks. Core and Agents communicate through JSON-RPC. In short, it's like microservices, but on the frontend. Learn More about Agents \u2500\u2500 body \u2500\u2500 Body contains everything that gets displayed on the screen. A body is made up of the following view elements. { \"$jason\": { \"head\": { ... }, \"body\": { \"header\": { ... }, \"sections\": [ { ... }, { ... }, ... ], \"layers\": [ { ... }, { ... }, ... ], \"footer\": { ... } } } } header represents the top area sections represent a scrollable list of items layers represent non-scrolling items footer represents the bottom area examples Here's what each part looks like in a real app: Sections contains a list that can be scrolled. Layers are images or labels that stay put on top of everything. You can also drag/resize/rotate layers depending on how you define them. body.ads body.ads describes the banner ads and the interstitial ads on the page \u25a0 ads Use to show banner and interstitial ads. Currently iOS only, open Android Issue here: Ad support for Android #22 screenshots Banner ad: Interstitial ad: syntax \u2022 type : \"admob\" \u2022 options : Possible options for the ad type : banner or interstitial , for type of ad. unitID : AdMob Unit ID. Just a string of letters and numbers, e.g.: ca-app-pub-6606303247985815/7014816684 Example ... \"ads\": [ { \"type\": \"admob\", \"options\": { \"type\": \"banner\", \"unitId\": \"a14dccd0fb24d45\" } }, { \"type\": \"admob\", \"options\": { \"type\": \"interstitial\", \"unitId\": \"ca-app-pub-6606303247985815/7014816684\" } } ], ... How to enable ads Ads aren't enabled by default, so you have to enable them. To enable them, do the following steps: Download the latest version of Jasonette from the master branch and unzip: master branch download Download CocoaPods from here: https://cocoapods.org/app Run CocoaPods. From the app menu, open File > Open Podfile . Then find the project folder you just unzipped. From the project folder, go into app folder and you should see a file called Podfile . Select that file and open it from CocoaPods app. You should see this screen: Uncomment pod 'GoogleMobileAds', '~> 7.8' (By removing the # character) and press the install button in the top right corner. The install will start, after that you'll see the following screen: Notice the green Installing GoogleMobileAds line from above screenshot. That means the library has been successfully installed into the project and you can use it. Now go to the root folder of your project and run Setup, and go through the setup process just like any other Jasonette project. You now need to turn on the Ad feature on Xcode. To do this, open Jasonette > Config > Constants.h file from in your Xcode workspace (which should have opened after the setup process), Uncomment #define ADS 1 by removing the // . The result should look something like this: And that's it! You should now be able to use ads in your project. body.header body.header describes the top header bar and its components. \u25a0 title There are two ways to set the title of the header bar: Basic: Simple text Advanced: Can be a text or an image Basic title Simply set the string to change the title on the header bar. { \"$jason\": { \"head\": { ... }, \"body\": { \"header\": { \"title\": \"[Title goes here]\" }, ... } } } The result: Advanced title You can describe the title in more detail using a title object instead of just a simple string. Here's the syntax: type : \"label\" or \"image\" text : In case it's a label type, set the text. Same as using the basic title described above. url : In case it's an image, set the image url. style : In case it's an image we can set the width and the height align : \"left\" or \"center\" (If not specified, it's center by default) width : set the width of the image height : set the height of the image top : Top offset. left : Left offset. ONLY APPLICABLE WHEN \"align\": \"left\" font : Font name in case \"type\": \"label\" size : Font size in case \"type\": \"label\" Here's an example { \"$jason\": { \"head\": { ... }, \"body\": { \"header\": { \"title\": { \"type\": \"image\", \"style\": { \"width\": \"94\", \"height\": \"27\" }, \"url\": \"https://raw.githubusercontent.com/Jasonette/Instagram-UI-example/master/images/logo.png\" } }, ... } } } The result (See the header title image): \u25a0 search Search component. Calls an action you define when user submits a query. attributes name placeholder action style background : background color color : tint color (for placeholder, text & icon) example The search component can trigger an action if you define one. Also the value inside the search input is automatically stored to the local variable which you name by setting the name attribute. If you are not aware of how local variables work, read the local variable section first. Take a look at the following example: { \"$jason\": { \"head\": { ... }, \"body\": { \"header\": { \"search\": { \"name\": \"query_text\", \"placeholder\": \"Search something\", \"style\": { \"background\": \"#000000\" }, \"action\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"You've entered:\", \"description\": \"{{$get.query_text}}\" } } } } } } } Here's what's going on: We bind the search input with a local variable query_text (By setting the name attribute under body.header.search as query_text ) The search input then calls the $util.alert action when user submits input, utilizing the local variable through {{$get.query_text}} \u25a0 menu menu represents the menu button at the top right corner on the header. menu can call actions or link to another view . menu can also have a badge . attributes \u25a0 text : menu button text \u25a0 image : menu button icon url \u25a0 style color : font color or image mask color font : font name size : font size \u25a0 href : view to transition to when touched \u25a0 action : action to trigger when touched \u25a0 badge text : The text to display inside the badge style : background : background color for the badge color : text color for the badge top : x-offset of the badge left : y-offset of the badge example { \"$jason\": { \"head\": { ... }, \"body\": { \"header\": { \"menu\": { \"text\": \"Tap me\", \"style\": { \"color\": \"#0000ff\", \"font\": \"HelveticaNeue-Bold\", \"size\": \"17\" }, \"action\": { \"type\": \"$util.toast\", \"options\": { \"text\": \"Good job!\" } }, \"badge\": { \"text\": \"3\", \"style\": { \"background\": \"#ff0000\", \"color\": \"#ffffff\" } } } } } } } View the full code here note Choose either text or image for the menu button, but not both. Choose either href or action for handling tap events, but not both. \u25a0 style Style the entire header bar. attributes font : the font for body.header.title size : the text size for body.header.title background : the background color for the entire header bar: body.header color : the font color for body.header.title body.sections The main region, used to display scrollable content. Here are the attributes each section can have: type : optional. set to horizontal to make it scroll horizontally. Otherwise it's just a regular, vertically scrolling section. header : a single item. optional. (doesn't respond to user interaction. display purpose) items : array of items (responds to user interaction) Each item can be either a layout or a component In most cases one section is enough, if you're displaying just a single collection of similar items. Use multiple sections if you need to display different types of collections, for example one vertical section and one horizontal section. \u25a0 type A view can contain multiple sections. And each section can be either: 1. vertically scrolling (default) Just a normal list view that scrolls 2. horizontally scrolling scrolls from left to right ( \"type\": \"horizontal\" ) What's going on above: The vertically scrolling section image above shows a view with 1 vertically scrolling section And the horizontally scrolling section image shows a view with multiple horizontally scrolling sections You can mix and match vertical and horizontal sections too. For example, a view can have a vertical section as the first section, and a horizontal section as the next, so forth. Let's go into more details: 1. Vertically scrolling section This is just a regular list view that lets you scroll from top to bottom. This is the default { ... \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Item 1\" }, { \"type\": \"label\", \"text\": \"Item 2\" }, { \"type\": \"label\", \"text\": \"Item 3\" }, { \"type\": \"label\", \"text\": \"Item 4\" }, { \"type\": \"label\", \"text\": \"Item 5\" }] }], ... } 2. Horizontally scrolling section This type of section lets you scroll from left to right. To create a horizontal section, set the section's type as horizontal . { ... \"sections\": [{ \"type\": \"horizontal\", \"items\": [{ \"type\": \"label\", \"text\": \"Item 1\" }, { \"type\": \"label\", \"text\": \"Item 2\" }, { \"type\": \"label\", \"text\": \"Item 3\" }, { \"type\": \"label\", \"text\": \"Item 4\" }, { \"type\": \"label\", \"text\": \"Item 5\" }] }], ... } Section item types Above we've talked about the types of sections (vertical vs. horizontal). Now let's talk about what a section can contain . Each section can contain: 0 or 1 header 1 or more items Type Structure Horizontal Vertical \u25a0 items An items array contains a list of items that users can interact with. Each Item can be a: Component : A single basic UI unit (such as a label or an image) Layout : A composition of multiple components. attributes Each item can contain the following attributes type : vertical or horizontal in case of layout. A component name in case it's a component item. (for example, label , image , button , etc.) components : child components array (only if the type is either vertical or horizontal . Not applicable when the type is a component) style : layout style + item specific style color : Set the color of the item's disclosure indicator in case href is used. height : Set the height of the item. z_index : An integer value (example: {\"z_index\": \"-1\"} ). Set the z-index of the item. (Similar to CSS z-index ) action : An action to trigger when a user taps the item. See actions reference for details. href : An href to trigger when a user taps the item. See href reference for details. example Here's an example: { ... \"sections\": [{ \"items\": [ { \"type\": \"label\", \"text\": \"Label only item\" }, { \"type\": \"vertical\", \"components\": [ { \"type\": \"image\", \"url\": \"https://jasonclient.org/img/john.png\" }, { \"type\": \"label\", \"text\": \"John\" }, { \"type\": \"label\", \"text\": \"Doe\" } ] }, { \"type\": \"vertical\", \"components\": [ { \"type\": \"image\", \"url\": \"https://jasonclient.org/img/mary.png\" }, { \"type\": \"label\", \"text\": \"Mary\" }, { \"type\": \"label\", \"text\": \"Jane\" } ] } ] }] ... } What's going on above: This section contains 3 items. The first one is a label component item (Displays the text \"Label only item\") The second and third are vertical layouts, each of which contains one image and two labels. \u25a0 header A header is similar to items . Visually it looks the same. However there are some differences: A header is for display purpose only. Therefore a header cannot have an href , action , or menu attributes. A header functions as a divider between sections. It sticks to the top as you scroll through the items in its section, until you scroll out of the section. You can only have up to 1 header per section. It's optional. attributes Here's a list of attributes a header supports (Same as items , with an exception of interactive features): \u25a0 type : vertical or horizontal in case of layout. A component name in case it's a component item. (for example, label , image , button , etc.) \u25a0 components : child components, in case it's a layout item. \u25a0 style : layout style + item specific style color : Set the color of the item's disclosure indicator in case href is used. height : Set the height of the item. z_index : An integer value (example: {\"z_index\": \"-1\"} ). Set the z-index of the item. (Similar to CSS z-index ) By default, header has a higher z_index than items . That's why the items scroll below the header as they scroll. You can however change that by setting the header's z_index. body.layers Layers are floating elements that can be configured to be resized , dragged , rotated , and react to actions . Currently layers support two types of components: label image \u25a0 type:label Floating labels. attributes type : \"label\" text : the text to display action : action to run on user tap event style width height padding top : position from the top of the screen left : position from the left of the screen right : position from the right of the screen bottom : position from the bottom of the screen corner_radius font size background color align : text align ( \"left\" | \"center\" | \"right\" ) Default is \"left\" resize : resizable when set to \"true\" (default is false) move : can be dragged around when set to \"true\" (default is false) rotate : can be rotated when set to \"true\" (default is false) example { \"layers\": [ { \"type\": \"label\", \"text\": \"Floating label\", \"style\": { \"top\": \"100\", \"left\": \"50%-25\", \"width\": \"50\", \"padding\": \"10\" } } ] } \u25a0 type:image Floating images attributes type : \"image\" url : Image url to load action : action to run on user tap event style width height top left right bottom corner_radius color : set the tint color (only for icons) resize : resizable when set to \"true\" (default is false) move : can be dragged around when set to \"true\" (default is false) rotate : can be rotated when set to \"true\" (default is false) example { \"layers\": [ { \"type\": \"image\", \"url\": \"https://www.jasonclient.org/img/sticker.png\", \"style\": { \"width\": \"100\", \"corner_radius\": \"50\", \"bottom\": \"100\", \"right\": \"100\" } } ] } body.footer The footer area of a view input: Chat input element tabs: Tab element \u25a0 input Chat input at the bottom attributes \u25a0 textfield name : the local variable name connected to this input field. placeholder : the placeholder text for this input field style color : font color color:placeholder : placeholder color background : background color for the input field \u25a0 left : left button (Only allows image) image : image URL to display as the left button action : action to call when touched style color : tint color for the image \u25a0 right : right button (Only allows label) text : text to display as the right button action : action to call when touched style color : font color color:disabled : disabled state font color \u25a0 style background : background color for the root toolbar that contains all of the above example { \"footer\": { \"input\": { \"style\": { \"background\": \"#cecece\" }, \"left\": { \"image\": \"https://www.jasonclient.org/img/camera.png\", \"style\": { \"color\": \"#ff0000\" }, \"action\": { \"type\": \"$media.camera\" } }, \"textfield\": { \"name\": \"message\", \"placeholder\": \"Say something...\", \"style\": { \"background\": \"#ffffff\", \"color\": \"#ff0000\", \"color:placeholder\": \"#ebebeb\" } }, \"right\": { \"text\": \"Send\", \"style\": { \"color\": \"#ff0000\", \"color:disabled\": \"#ebebeb\" }, \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonchat.org/post.json\", \"method\": \"post\", \"data\": { \"message\": \"{{$get.message}}\" } }, \"success\": { \"type\": \"$reload\" } } } } } } \u25a0 tabs Bottom tab bar attributes \u2022 items : an array of tab bar items. Each item can have the following attributes: text : tab item text image : tab item icon style : tab icon style width : icon width height : icon height badge : badge text url : the view url to load when tapped. href : the view href to load when tapped. action : an action to run when tapped. \u2022 style : overall style for the tab bar color : selected item color color:disabled : deselected item color background : background color of the entire tab bar example { \"footer\": { \"tabs\": { \"style\": { \"background\": \"rgba(255,255,255,0.8)\", \"color:disabled\": \"#cecece\", \"color\": \"#009efa\" }, \"items\": [{ \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/home.png\", \"text\": \"Home\", \"style\": { \"height\": \"21\" }, \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/home.json\" }, { \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/notifications.png\", \"text\": \"Notifications\", \"style\": { \"height\": \"21\" }, \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/notifications.json\" }, { \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/moments.png\", \"text\": \"Moments\", \"style\": { \"height\": \"21\" }, \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/moments.json\" }, { \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/messages.png\", \"text\": \"Messages\", \"style\": { \"height\": \"21\" }, \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/messages.json\" }, { \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/me.png\", \"text\": \"Me\", \"style\": { \"height\": \"21\" }, \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/me.json\" }] } } } Troubleshooting Tabs \u26a0\ufe0f Troubleshoot 1: ONLY Use tabs at the root level (The first view that shows up on launch). Any other usage may introduce unexpected behavior. \u26a0\ufe0f Troubleshoot 2: The first tab MUST have a URL. Otherwise the view won't load. \u26a0\ufe0f Troubleshoot 3: The first tab's url MUST EXACTLY MATCH the URL of the view it loads from. Otherwise the view won't load. For example in the below example, the visible view's URL should match the URL of the \"Top Secret\" tab. It wouldn't make sense for these two URLs to NOT match anyway. \u26a0\ufe0f Troubleshoot 4: tabs can have up to 5 items (5 tabs max). \u26a0\ufe0f Troubleshoot 5: tabs must have at least 2 items (2 tabs min). body.background Set the background for the entire view. Quick History: This used to be body.style.background because in the beginning, the background only had color options. But since then it has added a lot of features, so has been promoted to the same level as sections , layers , header , and footer . You can still use the body.style.background option but it's been unofficially deprecated. available values COLOR CODE : Here are some examples: \"rgb(144,233,233)\" \"rgba(255,255,255,0.3)\" \"#ff0000\" Image URL : If you wish to use an image as background, simply specify the image url \"camera\" : Use basic camera as background \"{\"type\": \"camera\"} : Use advanced camera as background JSON Web Container : Lets you embed an entire self-contained web view as a background. Refer to JSON web container to learn more. example 1. red background { \"$jason\": { \"head\": { ... }, \"body\": { \"background\": \"#ff0000\" ... } } } example 2. image background { \"$jason\": { \"head\": { ... }, \"body\": { \"background\": \"http://i.giphy.com/Is0AJv4CEj9hm.gif\" ... } } } example 3. web container background { \"$jason\": { \"head\": { ... }, \"body\": { \"background\": { \"type\": \"html\", \"text\": \"<html><head><style>...</style><script>....</script></head><body>...</body></html>\", \"action\": { \"type\": \"$default\" } } } } } example 4. basic camera { \"$jason\": { \"head\": { ... }, \"body\": { \"background\": \"camera\" ... } } } example 5. advanced camera Back facing camera { \"$jason\": { \"head\": { ... }, \"body\": { \"background\": { \"type\": \"camera\", \"options\": { \"device\": \"back\" } }, ... } } } What they look like Here's the preview: color image camera web container Functional Example A demo with all of the above options implemented body.style Styling the body border: setting the border color for section items \u25a0 border border color for section items. Format: [COLOR CODE] | \"none\" example 1. No border { \"body\": { .... \"style\": { \"border\": \"none\" }, .... } } example 2. red border { \"body\": { .... \"style\": { \"border\": \"#ff0000\" }, .... } }","title":"\u2605 View"},{"location":"document/#jason","text":"A Jason document always starts with $jason as its root node, and has two children: head and body , each of which has multiple children of its own.","title":"\u2500\u2500 $jason \u2500\u2500"},{"location":"document/#head","text":"The head contains a set of metadata that doesn't get displayed directly. The title attribute is mandatory. Rest of the attributes are optional. Head can contain the following attributes: title description icon offline styles actions templates data agents In JSON they look like this: { \"$jason\": { \"head\": { \"title\": \"...\", \"description\": \"...\", \"icon\": \"...\", \"offline\": \"true\", \"styles\": { ... }, \"actions\": { ... }, \"templates\": { ... }, \"data\": { ... } }, \"body\": { ... } } }","title":"\u2500\u2500 head \u2500\u2500"},{"location":"document/#headtitle","text":"Title string for your app. { \"$jason\": { \"head\": { \"title\": \"Hello World\", ... }, ... } }","title":"head.title"},{"location":"document/#headdescription","text":"Description string for your app. Let users find out what the app does, how it works, etc. just by looking at the JSON code. { \"$jason\": { \"head\": { \"title\": \"Hello World\", \"description\": \"This app displays 'Hello World' on the screen\", ... }, ... } }","title":"head.description"},{"location":"document/#headicon","text":"An icon URL that represents your app. { \"$jason\": { \"head\": { \"title\": \"Hellow World\", \"description\": \"This app displays 'Hello World' on the screen\", \"icon\": \"https://s3.amazonaws.com/jasonclient/hello.png\", ... }, ... } }","title":"head.icon"},{"location":"document/#headoffline","text":"Optional value to cache JSON file for offline use. Defaults to true . It doesn't matter what you set the value to; due to a quirk of Jasonette, just including it with any value makes it be counted as true. Here's an example of how to use it: { \"$jason\": { \"head\": { \"title\": \"Hellow World\", \"description\": \"This app displays 'Hello World' on the screen\", \"icon\": \"https://s3.amazonaws.com/jasonclient/hello.png\", \"offline\": \"true/yes/on\", ... }, ... } }","title":"head.offline"},{"location":"document/#headstyles","text":"Declare commonly used style classes here so you can reuse them later. Let's take a look at an example to demonstrate how using head.styles can be helpful compared to styling UI elements inline . For example here's an example of inline styling : { \"$jason\": { \"head\": { ... }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"This is row 1\", \"style\": { \"font\": \"HelveticaNeue\", \"size\": \"20\", \"color\": \"#ff0000\", \"padding\": \"10\" } }, { \"type\": \"label\", \"text\": \"This is row 2\", \"style\": { \"font\": \"HelveticaNeue\", \"size\": \"20\", \"color\": \"#ff0000\", \"padding\": \"10\" } }, { \"type\": \"label\", \"text\": \"This is row 3\", \"style\": { \"font\": \"HelveticaNeue\", \"size\": \"20\", \"color\": \"#ff0000\", \"padding\": \"10\" } }] }] } } } You can see that there's a style JSON for each label item. This is called inline styling since the style attribute is attached to the UI component directly. Now if you look closer, you'll see that each item has exactly the same repeating style. We can get rid of this redundancy by using head.styles : { \"$jason\": { \"head\": { ... \"styles\": { \"styled_row\": { \"font\": \"HelveticaNeue\", \"size\": \"20\", \"color\": \"#ff0000\", \"padding\": \"10\" } } }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"This is row 1\", \"class\": \"styled_row\" }, { \"type\": \"label\", \"text\": \"This is row 2\", \"class\": \"styled_row\" }, { \"type\": \"label\", \"text\": \"This is row 3\", \"class\": \"styled_row\" }] }] } } } First look at each label item. Now the style attributes are gone, but instead we have a class value of styled_row for each. Now let's look under $jason.head.styles . You'll see we now have the styled_row defined here. The styles registered here will be applied to each UI component whenever its class name is referenced.","title":"head.styles"},{"location":"document/#note","text":"Multiple styles can be used in a single class . Example: \"class\": \"styled_row color_white background_green\" . This can be used for creating complex styles with ease!.","title":"note"},{"location":"document/#headactions","text":"Using action registry to define actions You can define actions under the action registry ( head.actions ) and reuse them through the trigger keyword.","title":"head.actions"},{"location":"document/#headtemplates","text":"Declaring templates You can dynamically render any data using templates. Templates are registered under head.templates","title":"head.templates"},{"location":"document/#headdata","text":"Using inline data for rendering head.data is like an inline database that gets rendered automatically by body template if included.","title":"head.data"},{"location":"document/#headagents","text":"Jasonette Agent is a new architecture for building native mobile apps that utilizes JavaScript technologies without sacrificing native peformance and user experience. The idea is simple: User interacts with the native core. The core spawns background JavaScript containers for multiple tasks. Core and Agents communicate through JSON-RPC. In short, it's like microservices, but on the frontend. Learn More about Agents","title":"head.agents"},{"location":"document/#body","text":"Body contains everything that gets displayed on the screen. A body is made up of the following view elements. { \"$jason\": { \"head\": { ... }, \"body\": { \"header\": { ... }, \"sections\": [ { ... }, { ... }, ... ], \"layers\": [ { ... }, { ... }, ... ], \"footer\": { ... } } } } header represents the top area sections represent a scrollable list of items layers represent non-scrolling items footer represents the bottom area","title":"\u2500\u2500 body \u2500\u2500"},{"location":"document/#examples","text":"Here's what each part looks like in a real app: Sections contains a list that can be scrolled. Layers are images or labels that stay put on top of everything. You can also drag/resize/rotate layers depending on how you define them.","title":"examples"},{"location":"document/#bodyads","text":"body.ads describes the banner ads and the interstitial ads on the page","title":"body.ads"},{"location":"document/#ads","text":"Use to show banner and interstitial ads. Currently iOS only, open Android Issue here: Ad support for Android #22","title":"\u25a0  ads"},{"location":"document/#screenshots","text":"","title":"screenshots"},{"location":"document/#banner-ad","text":"","title":"Banner ad:"},{"location":"document/#interstitial-ad","text":"","title":"Interstitial ad:"},{"location":"document/#syntax","text":"","title":"syntax"},{"location":"document/#type-admob","text":"","title":"\u2022 type: \"admob\""},{"location":"document/#options-possible-options-for-the-ad","text":"type : banner or interstitial , for type of ad. unitID : AdMob Unit ID. Just a string of letters and numbers, e.g.: ca-app-pub-6606303247985815/7014816684","title":"\u2022 options: Possible options for the ad"},{"location":"document/#example","text":"... \"ads\": [ { \"type\": \"admob\", \"options\": { \"type\": \"banner\", \"unitId\": \"a14dccd0fb24d45\" } }, { \"type\": \"admob\", \"options\": { \"type\": \"interstitial\", \"unitId\": \"ca-app-pub-6606303247985815/7014816684\" } } ], ...","title":"Example"},{"location":"document/#how-to-enable-ads","text":"Ads aren't enabled by default, so you have to enable them. To enable them, do the following steps: Download the latest version of Jasonette from the master branch and unzip: master branch download Download CocoaPods from here: https://cocoapods.org/app Run CocoaPods. From the app menu, open File > Open Podfile . Then find the project folder you just unzipped. From the project folder, go into app folder and you should see a file called Podfile . Select that file and open it from CocoaPods app. You should see this screen: Uncomment pod 'GoogleMobileAds', '~> 7.8' (By removing the # character) and press the install button in the top right corner. The install will start, after that you'll see the following screen: Notice the green Installing GoogleMobileAds line from above screenshot. That means the library has been successfully installed into the project and you can use it. Now go to the root folder of your project and run Setup, and go through the setup process just like any other Jasonette project. You now need to turn on the Ad feature on Xcode. To do this, open Jasonette > Config > Constants.h file from in your Xcode workspace (which should have opened after the setup process), Uncomment #define ADS 1 by removing the // . The result should look something like this: And that's it! You should now be able to use ads in your project.","title":"How to enable ads"},{"location":"document/#bodyheader","text":"body.header describes the top header bar and its components.","title":"body.header"},{"location":"document/#title","text":"There are two ways to set the title of the header bar: Basic: Simple text Advanced: Can be a text or an image","title":"\u25a0 title"},{"location":"document/#basic-title","text":"Simply set the string to change the title on the header bar. { \"$jason\": { \"head\": { ... }, \"body\": { \"header\": { \"title\": \"[Title goes here]\" }, ... } } } The result:","title":"Basic title"},{"location":"document/#advanced-title","text":"You can describe the title in more detail using a title object instead of just a simple string. Here's the syntax: type : \"label\" or \"image\" text : In case it's a label type, set the text. Same as using the basic title described above. url : In case it's an image, set the image url. style : In case it's an image we can set the width and the height align : \"left\" or \"center\" (If not specified, it's center by default) width : set the width of the image height : set the height of the image top : Top offset. left : Left offset. ONLY APPLICABLE WHEN \"align\": \"left\" font : Font name in case \"type\": \"label\" size : Font size in case \"type\": \"label\" Here's an example { \"$jason\": { \"head\": { ... }, \"body\": { \"header\": { \"title\": { \"type\": \"image\", \"style\": { \"width\": \"94\", \"height\": \"27\" }, \"url\": \"https://raw.githubusercontent.com/Jasonette/Instagram-UI-example/master/images/logo.png\" } }, ... } } } The result (See the header title image):","title":"Advanced title"},{"location":"document/#search","text":"Search component. Calls an action you define when user submits a query.","title":"\u25a0  search"},{"location":"document/#attributes","text":"name placeholder action style background : background color color : tint color (for placeholder, text & icon)","title":"attributes"},{"location":"document/#example_1","text":"The search component can trigger an action if you define one. Also the value inside the search input is automatically stored to the local variable which you name by setting the name attribute. If you are not aware of how local variables work, read the local variable section first. Take a look at the following example: { \"$jason\": { \"head\": { ... }, \"body\": { \"header\": { \"search\": { \"name\": \"query_text\", \"placeholder\": \"Search something\", \"style\": { \"background\": \"#000000\" }, \"action\": { \"type\": \"$util.alert\", \"options\": { \"title\": \"You've entered:\", \"description\": \"{{$get.query_text}}\" } } } } } } } Here's what's going on: We bind the search input with a local variable query_text (By setting the name attribute under body.header.search as query_text ) The search input then calls the $util.alert action when user submits input, utilizing the local variable through {{$get.query_text}}","title":"example"},{"location":"document/#menu","text":"menu represents the menu button at the top right corner on the header. menu can call actions or link to another view . menu can also have a badge .","title":"\u25a0 menu"},{"location":"document/#attributes_1","text":"","title":"attributes"},{"location":"document/#text-menu-button-text","text":"","title":"\u25a0  text: menu button text"},{"location":"document/#image-menu-button-icon-url","text":"","title":"\u25a0  image: menu button icon url"},{"location":"document/#style","text":"color : font color or image mask color font : font name size : font size","title":"\u25a0  style"},{"location":"document/#href-view-to-transition-to-when-touched","text":"","title":"\u25a0  href: view to transition to when touched"},{"location":"document/#action-action-to-trigger-when-touched","text":"","title":"\u25a0  action: action to trigger when touched"},{"location":"document/#badge","text":"text : The text to display inside the badge style : background : background color for the badge color : text color for the badge top : x-offset of the badge left : y-offset of the badge","title":"\u25a0  badge"},{"location":"document/#example_2","text":"{ \"$jason\": { \"head\": { ... }, \"body\": { \"header\": { \"menu\": { \"text\": \"Tap me\", \"style\": { \"color\": \"#0000ff\", \"font\": \"HelveticaNeue-Bold\", \"size\": \"17\" }, \"action\": { \"type\": \"$util.toast\", \"options\": { \"text\": \"Good job!\" } }, \"badge\": { \"text\": \"3\", \"style\": { \"background\": \"#ff0000\", \"color\": \"#ffffff\" } } } } } } } View the full code here","title":"example"},{"location":"document/#note_1","text":"Choose either text or image for the menu button, but not both. Choose either href or action for handling tap events, but not both.","title":"note"},{"location":"document/#style_1","text":"Style the entire header bar.","title":"\u25a0 style"},{"location":"document/#attributes_2","text":"font : the font for body.header.title size : the text size for body.header.title background : the background color for the entire header bar: body.header color : the font color for body.header.title","title":"attributes"},{"location":"document/#bodysections","text":"The main region, used to display scrollable content. Here are the attributes each section can have: type : optional. set to horizontal to make it scroll horizontally. Otherwise it's just a regular, vertically scrolling section. header : a single item. optional. (doesn't respond to user interaction. display purpose) items : array of items (responds to user interaction) Each item can be either a layout or a component In most cases one section is enough, if you're displaying just a single collection of similar items. Use multiple sections if you need to display different types of collections, for example one vertical section and one horizontal section.","title":"body.sections"},{"location":"document/#type","text":"A view can contain multiple sections. And each section can be either:","title":"\u25a0  type"},{"location":"document/#1-vertically-scrolling-default","text":"Just a normal list view that scrolls","title":"1. vertically scrolling (default)"},{"location":"document/#2-horizontally-scrolling","text":"scrolls from left to right ( \"type\": \"horizontal\" )","title":"2. horizontally scrolling"},{"location":"document/#whats-going-on-above","text":"The vertically scrolling section image above shows a view with 1 vertically scrolling section And the horizontally scrolling section image shows a view with multiple horizontally scrolling sections You can mix and match vertical and horizontal sections too. For example, a view can have a vertical section as the first section, and a horizontal section as the next, so forth. Let's go into more details:","title":"What's going on above:"},{"location":"document/#1-vertically-scrolling-section","text":"This is just a regular list view that lets you scroll from top to bottom. This is the default { ... \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"Item 1\" }, { \"type\": \"label\", \"text\": \"Item 2\" }, { \"type\": \"label\", \"text\": \"Item 3\" }, { \"type\": \"label\", \"text\": \"Item 4\" }, { \"type\": \"label\", \"text\": \"Item 5\" }] }], ... }","title":"1. Vertically scrolling section"},{"location":"document/#2-horizontally-scrolling-section","text":"This type of section lets you scroll from left to right. To create a horizontal section, set the section's type as horizontal . { ... \"sections\": [{ \"type\": \"horizontal\", \"items\": [{ \"type\": \"label\", \"text\": \"Item 1\" }, { \"type\": \"label\", \"text\": \"Item 2\" }, { \"type\": \"label\", \"text\": \"Item 3\" }, { \"type\": \"label\", \"text\": \"Item 4\" }, { \"type\": \"label\", \"text\": \"Item 5\" }] }], ... }","title":"2. Horizontally scrolling section"},{"location":"document/#section-item-types","text":"Above we've talked about the types of sections (vertical vs. horizontal). Now let's talk about what a section can contain . Each section can contain: 0 or 1 header 1 or more items Type Structure Horizontal Vertical","title":"Section item types"},{"location":"document/#items","text":"An items array contains a list of items that users can interact with. Each Item can be a: Component : A single basic UI unit (such as a label or an image) Layout : A composition of multiple components.","title":"\u25a0 items"},{"location":"document/#attributes_3","text":"Each item can contain the following attributes type : vertical or horizontal in case of layout. A component name in case it's a component item. (for example, label , image , button , etc.) components : child components array (only if the type is either vertical or horizontal . Not applicable when the type is a component) style : layout style + item specific style color : Set the color of the item's disclosure indicator in case href is used. height : Set the height of the item. z_index : An integer value (example: {\"z_index\": \"-1\"} ). Set the z-index of the item. (Similar to CSS z-index ) action : An action to trigger when a user taps the item. See actions reference for details. href : An href to trigger when a user taps the item. See href reference for details.","title":"attributes"},{"location":"document/#example_3","text":"Here's an example: { ... \"sections\": [{ \"items\": [ { \"type\": \"label\", \"text\": \"Label only item\" }, { \"type\": \"vertical\", \"components\": [ { \"type\": \"image\", \"url\": \"https://jasonclient.org/img/john.png\" }, { \"type\": \"label\", \"text\": \"John\" }, { \"type\": \"label\", \"text\": \"Doe\" } ] }, { \"type\": \"vertical\", \"components\": [ { \"type\": \"image\", \"url\": \"https://jasonclient.org/img/mary.png\" }, { \"type\": \"label\", \"text\": \"Mary\" }, { \"type\": \"label\", \"text\": \"Jane\" } ] } ] }] ... }","title":"example"},{"location":"document/#whats-going-on-above_1","text":"This section contains 3 items. The first one is a label component item (Displays the text \"Label only item\") The second and third are vertical layouts, each of which contains one image and two labels.","title":"What's going on above:"},{"location":"document/#header","text":"A header is similar to items . Visually it looks the same. However there are some differences: A header is for display purpose only. Therefore a header cannot have an href , action , or menu attributes. A header functions as a divider between sections. It sticks to the top as you scroll through the items in its section, until you scroll out of the section. You can only have up to 1 header per section. It's optional.","title":"\u25a0 header"},{"location":"document/#attributes_4","text":"Here's a list of attributes a header supports (Same as items , with an exception of interactive features):","title":"attributes"},{"location":"document/#type-vertical-or-horizontal-in-case-of-layout-a-component-name-in-case-its-a-component-item-for-example-label-image-button-etc","text":"","title":"\u25a0  type: vertical or horizontal in case of layout. A component name in case it's a component item. (for example, label, image, button, etc.)"},{"location":"document/#components-child-components-in-case-its-a-layout-item","text":"","title":"\u25a0  components: child components, in case it's a layout item."},{"location":"document/#style-layout-style-item-specific-style","text":"color : Set the color of the item's disclosure indicator in case href is used. height : Set the height of the item. z_index : An integer value (example: {\"z_index\": \"-1\"} ). Set the z-index of the item. (Similar to CSS z-index ) By default, header has a higher z_index than items . That's why the items scroll below the header as they scroll. You can however change that by setting the header's z_index.","title":"\u25a0  style: layout style + item specific style"},{"location":"document/#bodylayers","text":"Layers are floating elements that can be configured to be resized , dragged , rotated , and react to actions . Currently layers support two types of components: label image","title":"body.layers"},{"location":"document/#typelabel","text":"Floating labels.","title":"\u25a0  type:label"},{"location":"document/#attributes_5","text":"type : \"label\" text : the text to display action : action to run on user tap event style width height padding top : position from the top of the screen left : position from the left of the screen right : position from the right of the screen bottom : position from the bottom of the screen corner_radius font size background color align : text align ( \"left\" | \"center\" | \"right\" ) Default is \"left\" resize : resizable when set to \"true\" (default is false) move : can be dragged around when set to \"true\" (default is false) rotate : can be rotated when set to \"true\" (default is false)","title":"attributes"},{"location":"document/#example_4","text":"{ \"layers\": [ { \"type\": \"label\", \"text\": \"Floating label\", \"style\": { \"top\": \"100\", \"left\": \"50%-25\", \"width\": \"50\", \"padding\": \"10\" } } ] }","title":"example"},{"location":"document/#typeimage","text":"Floating images","title":"\u25a0  type:image"},{"location":"document/#attributes_6","text":"type : \"image\" url : Image url to load action : action to run on user tap event style width height top left right bottom corner_radius color : set the tint color (only for icons) resize : resizable when set to \"true\" (default is false) move : can be dragged around when set to \"true\" (default is false) rotate : can be rotated when set to \"true\" (default is false)","title":"attributes"},{"location":"document/#example_5","text":"{ \"layers\": [ { \"type\": \"image\", \"url\": \"https://www.jasonclient.org/img/sticker.png\", \"style\": { \"width\": \"100\", \"corner_radius\": \"50\", \"bottom\": \"100\", \"right\": \"100\" } } ] }","title":"example"},{"location":"document/#bodyfooter","text":"The footer area of a view input: Chat input element tabs: Tab element","title":"body.footer"},{"location":"document/#input","text":"Chat input at the bottom","title":"\u25a0  input"},{"location":"document/#attributes_7","text":"","title":"attributes"},{"location":"document/#textfield","text":"name : the local variable name connected to this input field. placeholder : the placeholder text for this input field style color : font color color:placeholder : placeholder color background : background color for the input field","title":"\u25a0 textfield"},{"location":"document/#left-left-button-only-allows-image","text":"image : image URL to display as the left button action : action to call when touched style color : tint color for the image","title":"\u25a0 left: left button (Only allows image)"},{"location":"document/#right-right-button-only-allows-label","text":"text : text to display as the right button action : action to call when touched style color : font color color:disabled : disabled state font color","title":"\u25a0 right: right button (Only allows label)"},{"location":"document/#style_2","text":"background : background color for the root toolbar that contains all of the above","title":"\u25a0 style"},{"location":"document/#example_6","text":"{ \"footer\": { \"input\": { \"style\": { \"background\": \"#cecece\" }, \"left\": { \"image\": \"https://www.jasonclient.org/img/camera.png\", \"style\": { \"color\": \"#ff0000\" }, \"action\": { \"type\": \"$media.camera\" } }, \"textfield\": { \"name\": \"message\", \"placeholder\": \"Say something...\", \"style\": { \"background\": \"#ffffff\", \"color\": \"#ff0000\", \"color:placeholder\": \"#ebebeb\" } }, \"right\": { \"text\": \"Send\", \"style\": { \"color\": \"#ff0000\", \"color:disabled\": \"#ebebeb\" }, \"action\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonchat.org/post.json\", \"method\": \"post\", \"data\": { \"message\": \"{{$get.message}}\" } }, \"success\": { \"type\": \"$reload\" } } } } } }","title":"example"},{"location":"document/#tabs","text":"Bottom tab bar","title":"\u25a0  tabs"},{"location":"document/#attributes_8","text":"","title":"attributes"},{"location":"document/#items-an-array-of-tab-bar-items-each-item-can-have-the-following-attributes","text":"text : tab item text image : tab item icon style : tab icon style width : icon width height : icon height badge : badge text url : the view url to load when tapped. href : the view href to load when tapped. action : an action to run when tapped.","title":"\u2022 items: an array of tab bar items. Each item can have the following attributes:"},{"location":"document/#style-overall-style-for-the-tab-bar","text":"color : selected item color color:disabled : deselected item color background : background color of the entire tab bar","title":"\u2022 style: overall style for the tab bar"},{"location":"document/#example_7","text":"{ \"footer\": { \"tabs\": { \"style\": { \"background\": \"rgba(255,255,255,0.8)\", \"color:disabled\": \"#cecece\", \"color\": \"#009efa\" }, \"items\": [{ \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/home.png\", \"text\": \"Home\", \"style\": { \"height\": \"21\" }, \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/home.json\" }, { \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/notifications.png\", \"text\": \"Notifications\", \"style\": { \"height\": \"21\" }, \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/notifications.json\" }, { \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/moments.png\", \"text\": \"Moments\", \"style\": { \"height\": \"21\" }, \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/moments.json\" }, { \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/messages.png\", \"text\": \"Messages\", \"style\": { \"height\": \"21\" }, \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/messages.json\" }, { \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/me.png\", \"text\": \"Me\", \"style\": { \"height\": \"21\" }, \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/me.json\" }] } } }","title":"example"},{"location":"document/#troubleshooting-tabs","text":"\u26a0\ufe0f Troubleshoot 1: ONLY Use tabs at the root level (The first view that shows up on launch). Any other usage may introduce unexpected behavior. \u26a0\ufe0f Troubleshoot 2: The first tab MUST have a URL. Otherwise the view won't load. \u26a0\ufe0f Troubleshoot 3: The first tab's url MUST EXACTLY MATCH the URL of the view it loads from. Otherwise the view won't load. For example in the below example, the visible view's URL should match the URL of the \"Top Secret\" tab. It wouldn't make sense for these two URLs to NOT match anyway. \u26a0\ufe0f Troubleshoot 4: tabs can have up to 5 items (5 tabs max). \u26a0\ufe0f Troubleshoot 5: tabs must have at least 2 items (2 tabs min).","title":"Troubleshooting Tabs"},{"location":"document/#bodybackground","text":"Set the background for the entire view. Quick History: This used to be body.style.background because in the beginning, the background only had color options. But since then it has added a lot of features, so has been promoted to the same level as sections , layers , header , and footer . You can still use the body.style.background option but it's been unofficially deprecated.","title":"body.background"},{"location":"document/#available-values","text":"COLOR CODE : Here are some examples: \"rgb(144,233,233)\" \"rgba(255,255,255,0.3)\" \"#ff0000\" Image URL : If you wish to use an image as background, simply specify the image url \"camera\" : Use basic camera as background \"{\"type\": \"camera\"} : Use advanced camera as background JSON Web Container : Lets you embed an entire self-contained web view as a background. Refer to JSON web container to learn more.","title":"available values"},{"location":"document/#example-1-red-background","text":"{ \"$jason\": { \"head\": { ... }, \"body\": { \"background\": \"#ff0000\" ... } } }","title":"example 1. red background"},{"location":"document/#example-2-image-background","text":"{ \"$jason\": { \"head\": { ... }, \"body\": { \"background\": \"http://i.giphy.com/Is0AJv4CEj9hm.gif\" ... } } }","title":"example 2. image background"},{"location":"document/#example-3-web-container-background","text":"{ \"$jason\": { \"head\": { ... }, \"body\": { \"background\": { \"type\": \"html\", \"text\": \"<html><head><style>...</style><script>....</script></head><body>...</body></html>\", \"action\": { \"type\": \"$default\" } } } } }","title":"example 3. web container background"},{"location":"document/#example-4-basic-camera","text":"{ \"$jason\": { \"head\": { ... }, \"body\": { \"background\": \"camera\" ... } } }","title":"example 4. basic camera"},{"location":"document/#example-5-advanced-camera","text":"Back facing camera { \"$jason\": { \"head\": { ... }, \"body\": { \"background\": { \"type\": \"camera\", \"options\": { \"device\": \"back\" } }, ... } } }","title":"example 5. advanced camera"},{"location":"document/#what-they-look-like","text":"Here's the preview: color image camera web container","title":"What they look like"},{"location":"document/#functional-example","text":"A demo with all of the above options implemented","title":"Functional Example"},{"location":"document/#bodystyle","text":"Styling the body border: setting the border color for section items","title":"body.style"},{"location":"document/#border","text":"border color for section items. Format: [COLOR CODE] | \"none\"","title":"\u25a0 border"},{"location":"document/#example-1-no-border","text":"{ \"body\": { .... \"style\": { \"border\": \"none\" }, .... } }","title":"example 1. No border"},{"location":"document/#example-2-red-border","text":"{ \"body\": { .... \"style\": { \"border\": \"#ff0000\" }, .... } }","title":"example 2. red border"},{"location":"download/","text":"","title":"Download"},{"location":"env/","text":"You can get useful information about the device or the app's current state via the $env variable. Note that $env is a read-only variable, so you can only read and not write to it. You can access them using templates, just like other variables (global variable, cache, local variables). Supported Attributes $env.device.width : device width $env.device.height : device height $env.device.os.name : os name $env.device.os.version : os version $env.device.language : device language ( \"en-US\" , etc.) $env.view.url : current view url Example { \"$jason\": { \"head\": { \"title\": \"$env.device access\", \"actions\": { \"$load\": { \"type\": \"$render\" } }, \"templates\": { \"body\": { \"sections\": [ { \"items\": [ { \"type\": \"label\", \"text\": \"Device width: {{$env.device.width}}\" }, { \"type\": \"label\", \"text\": \"Device height: {{$env.device.height}}\" }, { \"type\": \"label\", \"text\": \"{{$env.device.os.name}}\" }, { \"type\": \"label\", \"text\": \"version: {{$env.device.os.version}}\" }, { \"type\": \"label\", \"text\": \"version: {{$env.device.language}}\" } ] } ] } } } } }","title":"\u2605 Environment Variables"},{"location":"env/#supported-attributes","text":"$env.device.width : device width $env.device.height : device height $env.device.os.name : os name $env.device.os.version : os version $env.device.language : device language ( \"en-US\" , etc.) $env.view.url : current view url","title":"Supported Attributes"},{"location":"env/#example","text":"{ \"$jason\": { \"head\": { \"title\": \"$env.device access\", \"actions\": { \"$load\": { \"type\": \"$render\" } }, \"templates\": { \"body\": { \"sections\": [ { \"items\": [ { \"type\": \"label\", \"text\": \"Device width: {{$env.device.width}}\" }, { \"type\": \"label\", \"text\": \"Device height: {{$env.device.height}}\" }, { \"type\": \"label\", \"text\": \"{{$env.device.os.name}}\" }, { \"type\": \"label\", \"text\": \"version: {{$env.device.os.version}}\" }, { \"type\": \"label\", \"text\": \"version: {{$env.device.language}}\" } ] } ] } } } } }","title":"Example"},{"location":"examples/","text":"How to try these examples Simply take one of the JSON urls below, add to Jasonette and play. You can learn more on how to use Jasonette here . \u2605 Jasonpedia A tutorial demo of every Jasonette UI component and action. Try this first if you haven't yet. JSON: https://github.com/Jasonette/Jasonpedia \u2605 Instagram UI An Instagram UI, completely written in JSON. JSON: https://github.com/Jasonette/Instagram-UI-example \u2605 Twitter UI A Twitter UI, completely written in JSON. JSON: https://github.com/Jasonette/Twitter-UI-example \u2605 Kitty A minimal Product Hunt client. Makes use of the HTML to JSON parsing feature. [ website ] JSON: https://github.com/gliechtenstein/kitty.json \u2605 Weather Takes the device location, makes a network request to openweathermap.org API , and then displays the result on the screen. Also uses camera as background display. JSON: http://www.jasonbase.com/things/1wn \u2605 Eliza Eliza chatbot app. Uses a simple node.js server as backend. If you want to install the backend on your own server, here's the full source . JSON: http://fureliza.herokuapp.com \u2605 Photo upload example Simple app to upload photos to S3. Uses a simple node.js server as backend. If you want to install the backend on your own server, here's the full source . JSON: http://imagejason.herokuapp.com \u2605 Microblog with user accounts Simple microblog app to post messages, complete with user login. If you want to install the backend on your own server, here's the full source and an instruction on how to build one from scratch . JSON: http://sessionjason.herokuapp.com signed out signed in","title":"\u25a0 Examples"},{"location":"examples/#how-to-try-these-examples","text":"Simply take one of the JSON urls below, add to Jasonette and play. You can learn more on how to use Jasonette here .","title":"How to try these examples"},{"location":"examples/#jasonpedia","text":"A tutorial demo of every Jasonette UI component and action. Try this first if you haven't yet. JSON: https://github.com/Jasonette/Jasonpedia","title":"\u2605 Jasonpedia"},{"location":"examples/#instagram-ui","text":"An Instagram UI, completely written in JSON. JSON: https://github.com/Jasonette/Instagram-UI-example","title":"\u2605 Instagram UI"},{"location":"examples/#twitter-ui","text":"A Twitter UI, completely written in JSON. JSON: https://github.com/Jasonette/Twitter-UI-example","title":"\u2605 Twitter UI"},{"location":"examples/#kitty","text":"A minimal Product Hunt client. Makes use of the HTML to JSON parsing feature. [ website ] JSON: https://github.com/gliechtenstein/kitty.json","title":"\u2605 Kitty"},{"location":"examples/#weather","text":"Takes the device location, makes a network request to openweathermap.org API , and then displays the result on the screen. Also uses camera as background display. JSON: http://www.jasonbase.com/things/1wn","title":"\u2605 Weather"},{"location":"examples/#eliza","text":"Eliza chatbot app. Uses a simple node.js server as backend. If you want to install the backend on your own server, here's the full source . JSON: http://fureliza.herokuapp.com","title":"\u2605 Eliza"},{"location":"examples/#photo-upload-example","text":"Simple app to upload photos to S3. Uses a simple node.js server as backend. If you want to install the backend on your own server, here's the full source . JSON: http://imagejason.herokuapp.com","title":"\u2605 Photo upload example"},{"location":"examples/#microblog-with-user-accounts","text":"Simple microblog app to post messages, complete with user login. If you want to install the backend on your own server, here's the full source and an instruction on how to build one from scratch . JSON: http://sessionjason.herokuapp.com signed out signed in","title":"\u2605 Microblog with user accounts"},{"location":"faq/","text":"\"No provisioning...\" error Just press \"Fix Issue\" and sign in with your Apple account If that doesn't work, read this post \"Signing for \"Jasonette\" requires a development team. Select a development team in the project editor.\" Select the project from XCode. Go to \"General\" section. Click \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account. \"Code signing is required for product type 'Application' in SDK\" Select the project from XCode. Go to \"General\" section. Click \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account. \"Untrusted Enterprise Developer\" Keep getting \"Untrusted Enterprise Developer\" alert when you try to open the installed app? Or read the Apple Guideline below: Guidelines for installing custom enterprise apps on iOS \"Can't be opened because it is from an unidentified developer.\" Do you get the following error when you try to execute the Setup command? This article will help you \"... is busy: Processing symbol files\" Do you get this alert when you press the play button? Just wait for a bit until the progress bar gets to the end, and then retry.","title":"\u25a0 Troubleshoot"},{"location":"faq/#no-provisioning-error","text":"Just press \"Fix Issue\" and sign in with your Apple account If that doesn't work, read this post","title":"\"No provisioning...\" error"},{"location":"faq/#signing-for-jasonette-requires-a-development-team-select-a-development-team-in-the-project-editor","text":"Select the project from XCode. Go to \"General\" section. Click \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account.","title":"\"Signing for \"Jasonette\" requires a development team. Select a development team in the project editor.\""},{"location":"faq/#code-signing-is-required-for-product-type-application-in-sdk","text":"Select the project from XCode. Go to \"General\" section. Click \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account.","title":"\"Code signing is required for product type 'Application' in SDK\""},{"location":"faq/#untrusted-enterprise-developer","text":"Keep getting \"Untrusted Enterprise Developer\" alert when you try to open the installed app? Or read the Apple Guideline below: Guidelines for installing custom enterprise apps on iOS","title":"\"Untrusted Enterprise Developer\""},{"location":"faq/#cant-be-opened-because-it-is-from-an-unidentified-developer","text":"Do you get the following error when you try to execute the Setup command? This article will help you","title":"\"Can't be opened because it is from an unidentified developer.\""},{"location":"faq/#is-busy-processing-symbol-files","text":"Do you get this alert when you press the play button? Just wait for a bit until the progress bar gets to the end, and then retry.","title":"\"... is busy: Processing symbol files\""},{"location":"href/","text":"HREF To describe links between views, we use href . Here are some of its traits: href can be attached to various UI elements to allow for interaction. This includes: header.menu section items layers and anything that looks interactive: like the buttons on a chat input . A section item with an href attribute will display a disclosure indicator > by default, to indicate that there's a next view (Only for vertically scrolling sections ) To change the indicator color, you need to set the color style attribute of the item. If you want to use href but without the disclosure indicator, use the $href action instead. HREF ATTRIBUTES url view options transition loading preload \u25a0 url The url to load in the next view \u25a0 view Type of view to load 1. \"view\": \"jason\" Jasonette view. Will load JSON. This is the default. Here's an example: { \"type\": \"label\", \"text\": \"Push me\", \"href\": { \"url\": \"https://www.jasonclient.org/next.json\", \"view\": \"jason\" } } Since jason is the default, we don't really need to specify it. So we can just write: { \"type\": \"label\", \"text\": \"Push me\", \"href\": { \"url\": \"https://www.jasonclient.org/next.json\" } } 2. \"view\": \"web\" Web browser view. Will load HTML in an internal browser. { \"type\": \"label\", \"text\": \"Open a browser\", \"href\": { \"url\": \"https://www.twitter.com/gliechtenstein\", \"view\": \"web\" } } Above example will result in the following transition: 3. \"view\": \"app\" Open external apps using url scheme (ex: sms: , mailto: , twitter:// ) { \"type\": \"label\", \"text\": \"Email me\", \"href\": { \"url\": \"mailto:ethan.gliechtenstein@gmail.com?subject=It20works!\", \"view\": \"app\" } } Above example will result in the following transition: \u25a0 options Parameters to pass to the next view. Here's how to set and use options: Step 1. Set options Set options attribute for href . You can pass any JSON object (as long as it follows the convention ) { ... \"href\": { \"url\": \"https://jasonclient.org/forums.json\", \"options\": { \"name\": \"howto\" } } ... } Step 2. Retrieve options To use the incoming options , we need to render the view dynamically using templates . When the view transitions to the next, the next view can access the options passed in from the previous view using the $params object using a template expression, like this: { ... { \"type\": \"label\", \"text\": \"{{$params.name}}\" }, ... } Since $params is {\"name\": \"howto\"} at this point, above template will turn into: { ... { \"type\": \"label\", \"text\": \"howto\" }, ... } \u25a0 transition The way the next view gets presented \"push\" : The next view slides in from the right side. (default) \"modal\" : The next view opens up as a modal. \"replace\" : Replaces the current view with the content, instead of creating a separate view push transition modal transition \u25a0 loading (deprecated) Use preload below If set to \"true\" , it displays a loading indicator when the new view loads. { \"href\": { \"url\": \"...\", \"loading\": \"true\" } } For the very first view the app loads with, we can't do this since there is no view it's href 'ing from. On Android, we ALWAYS display loading indicator because that's considered the normal UX for Android. On iOS In this case we can make the first view display a loading indicator by setting the loading attribute inside settings.plist . \u25a0 preload Preload lets you specify a JSON markup for the next view before the next view loads. This helps with smooth transition. Here's an example: { \"type\": \"$href\", \"options\": { \"url\": \"https://www.jasonbase.com/dhen3\", \"preload\": { \"style\": { \"background\": \"#ff0000\" }, \"layers\": [{ \"type\": \"image\", \"url\": \"file://loading.gif\", \"style\": { \"top\": \"50%-25\", \"left\": \"50%-25\", \"width\": \"50\", \"height\": \"50\" } }] } } } Notice that the preload contains an entire view representation of a view. it DOES NOT contain the head part. preload is purely for displaying a temp view until the real view loads.","title":"\u2605 Link"},{"location":"href/#href","text":"To describe links between views, we use href . Here are some of its traits: href can be attached to various UI elements to allow for interaction. This includes: header.menu section items layers and anything that looks interactive: like the buttons on a chat input . A section item with an href attribute will display a disclosure indicator > by default, to indicate that there's a next view (Only for vertically scrolling sections ) To change the indicator color, you need to set the color style attribute of the item. If you want to use href but without the disclosure indicator, use the $href action instead.","title":"HREF"},{"location":"href/#href-attributes","text":"url view options transition loading preload","title":"HREF ATTRIBUTES"},{"location":"href/#url","text":"The url to load in the next view","title":"\u25a0 url"},{"location":"href/#view","text":"Type of view to load","title":"\u25a0 view"},{"location":"href/#1-view-jason","text":"Jasonette view. Will load JSON. This is the default. Here's an example: { \"type\": \"label\", \"text\": \"Push me\", \"href\": { \"url\": \"https://www.jasonclient.org/next.json\", \"view\": \"jason\" } } Since jason is the default, we don't really need to specify it. So we can just write: { \"type\": \"label\", \"text\": \"Push me\", \"href\": { \"url\": \"https://www.jasonclient.org/next.json\" } }","title":"1. \"view\": \"jason\""},{"location":"href/#2-view-web","text":"Web browser view. Will load HTML in an internal browser. { \"type\": \"label\", \"text\": \"Open a browser\", \"href\": { \"url\": \"https://www.twitter.com/gliechtenstein\", \"view\": \"web\" } } Above example will result in the following transition:","title":"2. \"view\": \"web\""},{"location":"href/#3-view-app","text":"Open external apps using url scheme (ex: sms: , mailto: , twitter:// ) { \"type\": \"label\", \"text\": \"Email me\", \"href\": { \"url\": \"mailto:ethan.gliechtenstein@gmail.com?subject=It20works!\", \"view\": \"app\" } } Above example will result in the following transition:","title":"3. \"view\": \"app\""},{"location":"href/#options","text":"Parameters to pass to the next view. Here's how to set and use options:","title":"\u25a0 options"},{"location":"href/#step-1-set-options","text":"Set options attribute for href . You can pass any JSON object (as long as it follows the convention ) { ... \"href\": { \"url\": \"https://jasonclient.org/forums.json\", \"options\": { \"name\": \"howto\" } } ... }","title":"Step 1. Set options"},{"location":"href/#step-2-retrieve-options","text":"To use the incoming options , we need to render the view dynamically using templates . When the view transitions to the next, the next view can access the options passed in from the previous view using the $params object using a template expression, like this: { ... { \"type\": \"label\", \"text\": \"{{$params.name}}\" }, ... } Since $params is {\"name\": \"howto\"} at this point, above template will turn into: { ... { \"type\": \"label\", \"text\": \"howto\" }, ... }","title":"Step 2. Retrieve options"},{"location":"href/#transition","text":"The way the next view gets presented \"push\" : The next view slides in from the right side. (default) \"modal\" : The next view opens up as a modal. \"replace\" : Replaces the current view with the content, instead of creating a separate view push transition modal transition","title":"\u25a0 transition"},{"location":"href/#loading","text":"(deprecated) Use preload below If set to \"true\" , it displays a loading indicator when the new view loads. { \"href\": { \"url\": \"...\", \"loading\": \"true\" } } For the very first view the app loads with, we can't do this since there is no view it's href 'ing from. On Android, we ALWAYS display loading indicator because that's considered the normal UX for Android. On iOS In this case we can make the first view display a loading indicator by setting the loading attribute inside settings.plist .","title":"\u25a0 loading"},{"location":"href/#preload","text":"Preload lets you specify a JSON markup for the next view before the next view loads. This helps with smooth transition. Here's an example: { \"type\": \"$href\", \"options\": { \"url\": \"https://www.jasonbase.com/dhen3\", \"preload\": { \"style\": { \"background\": \"#ff0000\" }, \"layers\": [{ \"type\": \"image\", \"url\": \"file://loading.gif\", \"style\": { \"top\": \"50%-25\", \"left\": \"50%-25\", \"width\": \"50\", \"height\": \"50\" } }] } } } Notice that the preload contains an entire view representation of a view. it DOES NOT contain the head part. preload is purely for displaying a temp view until the real view loads.","title":"\u25a0 preload"},{"location":"interaction/","text":"Interacting with a Jason document You can make various Jason UI elements interact-able by attaching one of the following attributes: href action menu","title":"Interacting with a Jason document"},{"location":"interaction/#interacting-with-a-jason-document","text":"You can make various Jason UI elements interact-able by attaching one of the following attributes: href action menu","title":"Interacting with a Jason document"},{"location":"ios/","text":"Set up Jasonette iOS Ready? Let's get your first Jasonette app on your phone, in 20 seconds! Interested in manual setup? Want to skip the setup and try Jasonette without building your own app? - Try Jason. Step 1. DOWNLOAD Jasonette itself is a pre-built app. All you need to do is download and build with XCode . Go ahead and download Jasonette, and then unzip. Download Jasonette-iOS Step 2. SETUP Initialize by running the Setup command. This command automatically generates icons and sets the title and the url. BEFORE YOU START: Make sure you have the most recent version of XCode! (At least XCode 8) You can download it Here . Step 3. PLAY Connect your phone and click play on XCode. Done! \u2605 Did it work? YES? Congratulations! You're ready to transform this into your OWN app! Go on to the tutorial NO? Check troubleshoot section Manual setup It is recommended that you use the Setup command since it takes care of most of tedious details, but you can also do this manually. Step 1. Download Download Jasonette and unzip. Step 2. Open in XCode Go into the app folder and open Jasonette.xcworkspace file. (warning: Make sure to open the xcworkspace file, NOT the xcodeproj file!) Step 3. Update config attributes and generate icons manually Set App Name: Under the Config group, open the Info.plist file and change the CFBundleName attribute. Set Root URL: Under the Config group, open the settings.plist file and change the url attribute. Generate Icon: You can try generating app icons using online services like makeappicon.com , and add them manually to the project . Step 4. Play Connect your phone and click play on XCode. Done! Submitting to the app store There are a couple of things to keep in mind when submitting to the app store. 1. Sign up as Apple Developer You can test as much as you want without signing up as a developer, you can even put apps on your phone. However when it comes to actually submitting apps, you need to register as a developer. Google \"apple developer\" to learn how to do this. 2. Archive and Upload Assuming you're all ready, you just need to \"archive\" the app first, and then press \"upload to app store\". 3. Uncheck \"Include bitcode\" When you press \"upload to app store\", it will show up a confirmation dialog. Uncheck \"Include bitcode\" option here. We do not need Bitcode because Jasonette is already small due to its modularity, and it actually may become larger. In fact including bitcode doesn't work well with Jasonette, so make sure you uncheck this. Troubleshoot \u25a0 \"Unknown property attribute 'class'\" This is known to happen in old versions of XCode. Please upgrade your XCode to the latest version \u25a0 \"No provisioning...\" error Just press \"Fix Issue\" and sign in with your Apple account If that doesn't work, read this post \u25a0 \"Signing for \"Jasonette\" requires a development team. Select a development team in the project editor.\" Select the project from XCode. Go to \"General\" section. Click \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account. \u25a0 \"Code signing is required for product type 'Application' in SDK\" Select the project from XCode. Go to \"General\" section. Click \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account. \u25a0 \"Untrusted Enterprise Developer\" Keep getting \"Untrusted Enterprise Developer\" alert when you try to open the installed app? Or read the Apple Guideline below: Guidelines for installing custom enterprise apps on iOS \u25a0 \"Can't be opened because it is from an unidentified developer.\" Do you get the following error when you try to execute the Setup command? This article will help you \u25a0 \"... is busy: Processing symbol files\" Do you get this alert when you press the play button? Just wait for a bit until the progress bar gets to the end, and then retry. \u25a0 \"Offline mode\" In the current implementation of Jasonette, this message means either: There's a problem with your network. There's something wrong with your JSON markup and Jasonette is not able to interpret it correctly. Please first check the network to see other apps are working fine. After that, check your JSON, keep simplifying it down until you find the problematic markup. Need more help? Slack - Come ask quick questions and share tips with other Jasonette users. Join here Forum - Chat messages on Slack tend to flow away, so you may want to ask questions on the forum. Also it's good for future users who may have the same problem. All messages on the forum will be read. Visit here: https://forum.jasonette.com","title":"\u25a0 iOS"},{"location":"ios/#step-1-download","text":"Jasonette itself is a pre-built app. All you need to do is download and build with XCode . Go ahead and download Jasonette, and then unzip. Download Jasonette-iOS","title":"Step 1. DOWNLOAD"},{"location":"ios/#step-2-setup","text":"Initialize by running the Setup command. This command automatically generates icons and sets the title and the url. BEFORE YOU START: Make sure you have the most recent version of XCode! (At least XCode 8) You can download it Here .","title":"Step 2. SETUP"},{"location":"ios/#step-3-play","text":"Connect your phone and click play on XCode. Done!","title":"Step 3. PLAY"},{"location":"ios/#did-it-work","text":"","title":"\u2605 Did it work?"},{"location":"ios/#yes","text":"Congratulations! You're ready to transform this into your OWN app! Go on to the tutorial","title":"YES?"},{"location":"ios/#no","text":"Check troubleshoot section","title":"NO?"},{"location":"ios/#manual-setup","text":"It is recommended that you use the Setup command since it takes care of most of tedious details, but you can also do this manually.","title":"Manual setup"},{"location":"ios/#step-1-download_1","text":"Download Jasonette and unzip.","title":"Step 1. Download"},{"location":"ios/#step-2-open-in-xcode","text":"Go into the app folder and open Jasonette.xcworkspace file. (warning: Make sure to open the xcworkspace file, NOT the xcodeproj file!)","title":"Step 2. Open in XCode"},{"location":"ios/#step-3-update-config-attributes-and-generate-icons-manually","text":"Set App Name: Under the Config group, open the Info.plist file and change the CFBundleName attribute. Set Root URL: Under the Config group, open the settings.plist file and change the url attribute. Generate Icon: You can try generating app icons using online services like makeappicon.com , and add them manually to the project .","title":"Step 3. Update config attributes and generate icons manually"},{"location":"ios/#step-4-play","text":"Connect your phone and click play on XCode. Done!","title":"Step 4. Play"},{"location":"ios/#submitting-to-the-app-store","text":"There are a couple of things to keep in mind when submitting to the app store.","title":"Submitting to the app store"},{"location":"ios/#1-sign-up-as-apple-developer","text":"You can test as much as you want without signing up as a developer, you can even put apps on your phone. However when it comes to actually submitting apps, you need to register as a developer. Google \"apple developer\" to learn how to do this.","title":"1. Sign up as Apple Developer"},{"location":"ios/#2-archive-and-upload","text":"Assuming you're all ready, you just need to \"archive\" the app first, and then press \"upload to app store\".","title":"2. Archive and Upload"},{"location":"ios/#3-uncheck-include-bitcode","text":"When you press \"upload to app store\", it will show up a confirmation dialog. Uncheck \"Include bitcode\" option here. We do not need Bitcode because Jasonette is already small due to its modularity, and it actually may become larger. In fact including bitcode doesn't work well with Jasonette, so make sure you uncheck this.","title":"3. Uncheck \"Include bitcode\""},{"location":"ios/#troubleshoot","text":"","title":"Troubleshoot"},{"location":"ios/#unknown-property-attribute-class","text":"","title":"\u25a0 \"Unknown property attribute 'class'\""},{"location":"ios/#this-is-known-to-happen-in-old-versions-of-xcode-please-upgrade-your-xcode-to-the-latest-version","text":"","title":"This is known to happen in old versions of XCode. Please upgrade your XCode to the latest version"},{"location":"ios/#no-provisioning-error","text":"","title":"\u25a0 \"No provisioning...\" error"},{"location":"ios/#just-press-fix-issue-and-sign-in-with-your-apple-account","text":"If that doesn't work, read this post","title":"Just press \"Fix Issue\" and sign in with your Apple account"},{"location":"ios/#signing-for-jasonette-requires-a-development-team-select-a-development-team-in-the-project-editor","text":"Select the project from XCode. Go to \"General\" section. Click \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account.","title":"\u25a0 \"Signing for \"Jasonette\" requires a development team. Select a development team in the project editor.\""},{"location":"ios/#code-signing-is-required-for-product-type-application-in-sdk","text":"Select the project from XCode. Go to \"General\" section. Click \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account.","title":"\u25a0 \"Code signing is required for product type 'Application' in SDK\""},{"location":"ios/#untrusted-enterprise-developer","text":"Keep getting \"Untrusted Enterprise Developer\" alert when you try to open the installed app? Or read the Apple Guideline below: Guidelines for installing custom enterprise apps on iOS","title":"\u25a0 \"Untrusted Enterprise Developer\""},{"location":"ios/#cant-be-opened-because-it-is-from-an-unidentified-developer","text":"Do you get the following error when you try to execute the Setup command? This article will help you","title":"\u25a0 \"Can't be opened because it is from an unidentified developer.\""},{"location":"ios/#is-busy-processing-symbol-files","text":"Do you get this alert when you press the play button? Just wait for a bit until the progress bar gets to the end, and then retry.","title":"\u25a0 \"... is busy: Processing symbol files\""},{"location":"ios/#offline-mode","text":"In the current implementation of Jasonette, this message means either: There's a problem with your network. There's something wrong with your JSON markup and Jasonette is not able to interpret it correctly. Please first check the network to see other apps are working fine. After that, check your JSON, keep simplifying it down until you find the problematic markup.","title":"\u25a0 \"Offline mode\""},{"location":"ios/#need-more-help","text":"Slack - Come ask quick questions and share tips with other Jasonette users. Join here Forum - Chat messages on Slack tend to flow away, so you may want to ask questions on the forum. Also it's good for future users who may have the same problem. All messages on the forum will be read. Visit here: https://forum.jasonette.com","title":"Need more help?"},{"location":"jason/","text":"What is Jason? { \u00b7\u1d25\u00b7} Jason is a single app that lets you summon and bookmark multiple Jasonette apps simply by entering the JSON url, without building your own physical app or setting up development environment. It's good for using as a container for single purpose apps or quick disposable apps, prototyping, beta testing, etc. . iOS Android How is related to Jasonette? Maybe it's easier if we put it this way: Chrome : Webkit = Jason : Jasonette { \u00b7\u1d25\u00b7} jason { \u02c3\u0335\u0311\u1d25\u02c2\u0335\u0311} jasonette What is it? An app that lets you bookmark and run multiple Jasonette apps without building your own. Jason itself is built with Jasonette. What is it? The open source app engine that lets you build your own publishable app. When to use Start building without a development environment like XCode or Android Studio Useful for quick prototyping Beta test your Jasonette app with friends before submitting to the app store. Just need to share URL Bookmark and run multiple Jasonette apps from a single app Build apps that can't be / don't need to be published to the app store Disposable apps, private apps When to use To package up an app so you can publish to the app store How to use Download Jason from the app store Enter your JSON url in the address bar How to use Download Jasonette Add your JSON url to the project Build it in XCode or Android Studio Publish to the app store or play store","title":"\u25a0 Jason"},{"location":"jason/#what-is-jason","text":"{ \u00b7\u1d25\u00b7} Jason is a single app that lets you summon and bookmark multiple Jasonette apps simply by entering the JSON url, without building your own physical app or setting up development environment. It's good for using as a container for single purpose apps or quick disposable apps, prototyping, beta testing, etc. . iOS Android","title":"What is Jason?"},{"location":"jason/#how-is-related-to-jasonette","text":"Maybe it's easier if we put it this way:","title":"How is related to Jasonette?"},{"location":"layout/","text":"Types of layout You can construct all kinds of sophisticated UIs for section items/headers by laying out multiple components vertically, horizontally, or through combination of the two. vertical horizontal nested vertical In a vertical layout, the item's components flow vertically, from top to bottom. Example { \"$jason\": { \"head\": { \"title\": \"vertical layout demo\" }, \"body\": { \"sections\": [{ \"items\": [ { \"type\": \"vertical\", \"components\": [{ \"type\": \"label\", \"text\": \"John Doe\" }, { \"type\": \"label\", \"text\": \"33\" }, { \"type\": \"label\", \"text\": \"A normal guy with a normal name\" }] } ] }] } } } Above JSON will render into the following view: horizontal In a horizontal layout, the item's components flow horizontally, from left to right. Example { \"$jason\": { \"head\": { \"title\": \"horizontal layout demo\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"horizontal\", \"components\": [{ \"type\": \"image\", \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\", \"style\": { \"width\": \"80\" } }, { \"type\": \"label\", \"text\": \"Ethan\", \"style\": { \"font\": \"HelveticaNeue-Bold\" } }] }] }] } } } Above JSON will render into the following view: Nested layout A layout can also contain another layout as one of its components. This way you can create any type of sophisticated layout you want by nesting one layout inside another. Here's an example: { \"$jason\": { \"head\": { \"title\": \"nested layout demo\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"horizontal\", \"components\": [{ \"type\": \"image\", \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\", \"style\": { \"width\": \"80\" } }, { \"type\": \"vertical\", \"components\": [{ \"type\": \"label\", \"text\": \"Ethan\", \"style\": { \"font\": \"HelveticaNeue-Bold\" } }, { \"type\": \"label\", \"text\": \"Gliechtenstein\" }] }] }] }] } } } Above JSON will render into the following view: Styling a layout syntax \u25a0 padding the space surrounding the layout itself, in pixels. If not specified, the default value is 10 . \u25a0 spacing the space among each immediate children components, in pixels. \u25a0 background background color code (Example: {\"background\": \"#ff0000\"} , {\"background\": \"rgba(0,0,0,0.4)\"} ) \u25a0 z_index specifies the stack order of the layout, defining whether the layout is displayed on top of another or below. Default is 0. (Example: {\"z_index\": \"-1\"} \u25a0 opacity opacity (between \"0\" and \"1\") \u25a0 align How the children components will be aligned perpendicular to the layout's direction. For vertical layout left : align left center : align center horizontally right : align right For horizontal layout top : align top center : align center bottom : align bottom fill : stretch all children vertically to fit the layout height equally \u25a0 distribution Describes how the children components should be distributed in relation to one another. Normally you don't need to use this property, but this comes in handy when you just want child components to automatically stretch to each have the same size. For vertical layout \"fill\" : The child components stretch to fill the layout (default) \"equalsize\" : The child components have the same size. Use this if you didn't specify height for any of them but want them to just expand to fill the layout each with the same height. For horizontal layout \"fill\" : The child components stretch to fill the layout (default) \"equalsize\" : The child components have the same size. Use this if you didn't specify width for any of them but want them to just expand to fill the layout each with the same width. examples Example 1. Vertical layout with center align In case of vertical layout, it describes how the children components should be aligned horizontally. Below, we see that the vertical layout has \"align\": \"center\" style. { \"$jason\": { \"head\": { \"title\": \"center aligned vertical layout\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"vertical\", \"style\": { \"align\": \"center\" }, \"components\": [ { \"type\": \"image\", \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\", \"style\": { \"width\": \"100\" } }, { \"type\": \"label\", \"style\": { \"color\": \"#000000\", \"background\": \"#ff0000\" }, \"text\": \"John Doe\" }, { \"type\": \"button\", \"text\": \"Follow\", \"style\": { \"color\": \"#ff0000\", \"background\": \"#000000\" } } ] }] }] } } } This would render into the following view: Notice how all components--image, label, and button--are center aligned. Example 2. Horizontal align with bottom align In case of horizontal layout, align describes how the children components should be aligned vertically. { \"$jason\": { \"head\": { \"title\": \"bottom aligned horizontal layout\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"horizontal\", \"style\": { \"align\": \"bottom\" }, \"components\": [ { \"type\": \"image\", \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\", \"style\": { \"width\": \"100\" } }, { \"type\": \"label\", \"style\": { \"background\": \"#000000\", \"color\": \"#ff0000\" }, \"text\": \"John Doe\" }, { \"type\": \"button\", \"style\": { \"background\": \"#ff0000\", \"color\": \"#000000\" }, \"text\": \"Follow\" } ] }] }] } } } Above JSON will render into: Notice how all components--image, label, and button--are bottom aligned. Example 3. Padding and Spacing { \"$jason\": { \"head\": { \"title\": \"Padding and spacing demonstration\", \"styles\": { \"label_class\": { \"background\": \"#ff0000\", \"padding\": \"10\", \"color\": \"#ffffff\" } } }, \"body\": { \"style\": { \"background\": \"#00ff00\", \"border\": \"#000000\" }, \"sections\": [{ \"items\": [ { \"type\": \"vertical\", \"components\": [{ \"type\": \"label\", \"class\": \"label_class\", \"text\": \"First row\" }, { \"type\": \"label\", \"class\": \"label_class\", \"text\": \"Second row\" }, { \"type\": \"label\", \"class\": \"label_class\", \"text\": \"Third row\" }] }, { \"type\": \"vertical\", \"style\": { \"padding\": \"50\" }, \"components\": [{ \"type\": \"label\", \"class\": \"label_class\", \"text\": \"First row\" }, { \"type\": \"label\", \"class\": \"label_class\", \"text\": \"Second row\" }, { \"type\": \"label\", \"class\": \"label_class\", \"text\": \"Third row\" }] }, { \"type\": \"vertical\", \"style\": { \"padding\": \"50\", \"spacing\": \"10\" }, \"components\": [{ \"type\": \"label\", \"class\": \"label_class\", \"text\": \"First row\" }, { \"type\": \"label\", \"class\": \"label_class\", \"text\": \"Second row\" }, { \"type\": \"label\", \"class\": \"label_class\", \"text\": \"Third row\" }] } ] }] } } } Above JSON turns into the following view: \u2605 Here's what's going on: 1. The first row has NO padding and NO spacing values. As mentioned above, if no padding is specified, the default is 10 . That's why we see the small gap between the red label and the edges. 2. The second row has a padding of 50 . That's why we see a larger gap ( 50 pixels) 3. The third row has the same padding as #2, but also a spacing of 10 . The spacing attribute defines the space in pixels among child components. That's why we now see 10 pixels in between the red labels.","title":"\u2605 Layout"},{"location":"layout/#types-of-layout","text":"You can construct all kinds of sophisticated UIs for section items/headers by laying out multiple components vertically, horizontally, or through combination of the two. vertical horizontal nested","title":"Types of layout"},{"location":"layout/#vertical","text":"In a vertical layout, the item's components flow vertically, from top to bottom.","title":"vertical"},{"location":"layout/#example","text":"{ \"$jason\": { \"head\": { \"title\": \"vertical layout demo\" }, \"body\": { \"sections\": [{ \"items\": [ { \"type\": \"vertical\", \"components\": [{ \"type\": \"label\", \"text\": \"John Doe\" }, { \"type\": \"label\", \"text\": \"33\" }, { \"type\": \"label\", \"text\": \"A normal guy with a normal name\" }] } ] }] } } } Above JSON will render into the following view:","title":"Example"},{"location":"layout/#horizontal","text":"In a horizontal layout, the item's components flow horizontally, from left to right.","title":"horizontal"},{"location":"layout/#example_1","text":"{ \"$jason\": { \"head\": { \"title\": \"horizontal layout demo\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"horizontal\", \"components\": [{ \"type\": \"image\", \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\", \"style\": { \"width\": \"80\" } }, { \"type\": \"label\", \"text\": \"Ethan\", \"style\": { \"font\": \"HelveticaNeue-Bold\" } }] }] }] } } } Above JSON will render into the following view:","title":"Example"},{"location":"layout/#nested-layout","text":"A layout can also contain another layout as one of its components. This way you can create any type of sophisticated layout you want by nesting one layout inside another. Here's an example: { \"$jason\": { \"head\": { \"title\": \"nested layout demo\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"horizontal\", \"components\": [{ \"type\": \"image\", \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\", \"style\": { \"width\": \"80\" } }, { \"type\": \"vertical\", \"components\": [{ \"type\": \"label\", \"text\": \"Ethan\", \"style\": { \"font\": \"HelveticaNeue-Bold\" } }, { \"type\": \"label\", \"text\": \"Gliechtenstein\" }] }] }] }] } } } Above JSON will render into the following view:","title":"Nested layout"},{"location":"layout/#styling-a-layout","text":"","title":"Styling a layout"},{"location":"layout/#syntax","text":"","title":"syntax"},{"location":"layout/#padding","text":"the space surrounding the layout itself, in pixels. If not specified, the default value is 10 .","title":"\u25a0  padding"},{"location":"layout/#spacing","text":"the space among each immediate children components, in pixels.","title":"\u25a0  spacing"},{"location":"layout/#background","text":"background color code (Example: {\"background\": \"#ff0000\"} , {\"background\": \"rgba(0,0,0,0.4)\"} )","title":"\u25a0  background"},{"location":"layout/#z_index","text":"specifies the stack order of the layout, defining whether the layout is displayed on top of another or below. Default is 0. (Example: {\"z_index\": \"-1\"}","title":"\u25a0  z_index"},{"location":"layout/#opacity","text":"opacity (between \"0\" and \"1\")","title":"\u25a0 opacity"},{"location":"layout/#align","text":"How the children components will be aligned perpendicular to the layout's direction. For vertical layout left : align left center : align center horizontally right : align right For horizontal layout top : align top center : align center bottom : align bottom fill : stretch all children vertically to fit the layout height equally","title":"\u25a0  align"},{"location":"layout/#distribution","text":"Describes how the children components should be distributed in relation to one another. Normally you don't need to use this property, but this comes in handy when you just want child components to automatically stretch to each have the same size. For vertical layout \"fill\" : The child components stretch to fill the layout (default) \"equalsize\" : The child components have the same size. Use this if you didn't specify height for any of them but want them to just expand to fill the layout each with the same height. For horizontal layout \"fill\" : The child components stretch to fill the layout (default) \"equalsize\" : The child components have the same size. Use this if you didn't specify width for any of them but want them to just expand to fill the layout each with the same width.","title":"\u25a0  distribution"},{"location":"layout/#examples","text":"","title":"examples"},{"location":"layout/#example-1-vertical-layout-with-center-align","text":"In case of vertical layout, it describes how the children components should be aligned horizontally. Below, we see that the vertical layout has \"align\": \"center\" style. { \"$jason\": { \"head\": { \"title\": \"center aligned vertical layout\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"vertical\", \"style\": { \"align\": \"center\" }, \"components\": [ { \"type\": \"image\", \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\", \"style\": { \"width\": \"100\" } }, { \"type\": \"label\", \"style\": { \"color\": \"#000000\", \"background\": \"#ff0000\" }, \"text\": \"John Doe\" }, { \"type\": \"button\", \"text\": \"Follow\", \"style\": { \"color\": \"#ff0000\", \"background\": \"#000000\" } } ] }] }] } } } This would render into the following view:","title":"Example 1. Vertical layout with center align"},{"location":"layout/#notice-how-all-components-image-label-and-button-are-center-aligned","text":"","title":"Notice how all components--image, label, and button--are center aligned."},{"location":"layout/#example-2-horizontal-align-with-bottom-align","text":"In case of horizontal layout, align describes how the children components should be aligned vertically. { \"$jason\": { \"head\": { \"title\": \"bottom aligned horizontal layout\" }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"horizontal\", \"style\": { \"align\": \"bottom\" }, \"components\": [ { \"type\": \"image\", \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\", \"style\": { \"width\": \"100\" } }, { \"type\": \"label\", \"style\": { \"background\": \"#000000\", \"color\": \"#ff0000\" }, \"text\": \"John Doe\" }, { \"type\": \"button\", \"style\": { \"background\": \"#ff0000\", \"color\": \"#000000\" }, \"text\": \"Follow\" } ] }] }] } } } Above JSON will render into:","title":"Example 2. Horizontal align with bottom align"},{"location":"layout/#notice-how-all-components-image-label-and-button-are-bottom-aligned","text":"","title":"Notice how all components--image, label, and button--are bottom aligned."},{"location":"layout/#example-3-padding-and-spacing","text":"{ \"$jason\": { \"head\": { \"title\": \"Padding and spacing demonstration\", \"styles\": { \"label_class\": { \"background\": \"#ff0000\", \"padding\": \"10\", \"color\": \"#ffffff\" } } }, \"body\": { \"style\": { \"background\": \"#00ff00\", \"border\": \"#000000\" }, \"sections\": [{ \"items\": [ { \"type\": \"vertical\", \"components\": [{ \"type\": \"label\", \"class\": \"label_class\", \"text\": \"First row\" }, { \"type\": \"label\", \"class\": \"label_class\", \"text\": \"Second row\" }, { \"type\": \"label\", \"class\": \"label_class\", \"text\": \"Third row\" }] }, { \"type\": \"vertical\", \"style\": { \"padding\": \"50\" }, \"components\": [{ \"type\": \"label\", \"class\": \"label_class\", \"text\": \"First row\" }, { \"type\": \"label\", \"class\": \"label_class\", \"text\": \"Second row\" }, { \"type\": \"label\", \"class\": \"label_class\", \"text\": \"Third row\" }] }, { \"type\": \"vertical\", \"style\": { \"padding\": \"50\", \"spacing\": \"10\" }, \"components\": [{ \"type\": \"label\", \"class\": \"label_class\", \"text\": \"First row\" }, { \"type\": \"label\", \"class\": \"label_class\", \"text\": \"Second row\" }, { \"type\": \"label\", \"class\": \"label_class\", \"text\": \"Third row\" }] } ] }] } } } Above JSON turns into the following view:","title":"Example 3. Padding and Spacing"},{"location":"layout/#heres-whats-going-on","text":"","title":"\u2605 Here's what's going on:"},{"location":"layout/#1-the-first-row-has-no-padding-and-no-spacing-values","text":"As mentioned above, if no padding is specified, the default is 10 . That's why we see the small gap between the red label and the edges.","title":"1. The first row has NO padding and NO spacing values."},{"location":"layout/#2-the-second-row-has-a-padding-of-50","text":"That's why we see a larger gap ( 50 pixels)","title":"2. The second row has a padding of 50."},{"location":"layout/#3-the-third-row-has-the-same-padding-as-2-but-also-a-spacing-of-10","text":"The spacing attribute defines the space in pixels among child components. That's why we now see 10 pixels in between the red labels.","title":"3. The third row has the same padding as #2, but also a spacing of 10."},{"location":"mixin/","text":"Just like you can build a car, build a castle, or build a spaceship by composing simple lego bricks, you can build an entire application by composing multiple JSON files. \u25a0 Basics You can use @ to mix-in a remote JSON object. Let's say https://lorem.ipsum/simpsons.json contains the following content: [\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"] We can mix this into our JSON simply by doing this: { \"the_simpsons\": { \"firstnames\": { \"@\": \"https://lorem.ipsum/simpsons.json\" }, \"lastname\": \"Simpson\" } } Jasonette fetches the JSON from the URL and simply replaces it with the @ node. Here's the result: { \"the_simpsons\": { \"firstnames\": [\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"], \"lastname\": \"Simpson\" } } \u25a0 How it works It's useful to understand how this works internally. Whenever Jasonette loads a single JSON file here's what happens: Load JSON from a URL. Jasonette scans the JSON to resolve the mixins if any. Sometimes it's not enough to resolve it once, especially when you mix remote mixins with local mixins . Jasonette continues mixin resolution until everything is resolved. Jasonette draws the view. The system triggers $load / $show events. Note 1: All mixins resolutions are carried out in parallel, and the rendering starts only when all mixins have resolved (or failed). Note 2: In case an endpoint doesn't respond or returns an error, that part gets resolved as an empty string and silently fails instead of halting everything. Note 3: The order is important. Since the mixin resolution happens BEFORE actual rendering, you can even mix-in a template expression from a remote JSON \u25a0 Multiple Mixins You are not limited to a single mixin. You can mix-in as many remote JSON urls as you want. For example: { \"cats\": { \"@\": \"https://lorem.ipsum/cats.json\" }, \"dogs\": { \"@\": \"https://lorem.ipsum/dogs.json\" }, \"monsters\": { \"@\": \"https://lorem.ipsum/monsters.json\" } } Jasonette automatically detects all occurrences of mixins in a JSON file, fetches them in parallel, and attaches them to their corresponding locations. \u25a0 Anywhere in the JSON tree You can reference URLs anywhere in the JSON tree, as many times as you want. They will all be downloaded in parallel at load time and substituted in automatically. { \"$jason\": { \"head\": { \"data\": { \"users\": { \"@\": \"https://lorem.ipsum/data.json\" } }, \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each users}}\": { \"@\": \"https://lorem.ipsum/user_item_template.json\" } } }] } } } } } You can even create an entire JSON tree with a mixin: { \"@\": \"https://jasonbase.com/things/3nf.json\" } This particular example may seem silly but it becomes powerful when combined with the override feature. Basically you can use this to mix-in a base JSON you wish to inherit from, and then simply add a small amount of code to customize it. See \"override\" section for details. \u25a0 Partial Mixin Sometimes you may want to mix-in only the subtree of a remote JSON file. In this case, we use the following syntax: [JSON_PATH]@[JSON_URL] For example, let's say we have a \"drinks\" database at https://drinks.db/drinks.json . { \"drinks\": { \"coffee\": [\"ethiopia\", \"sumatra\", \"nigeria\"], \"tea\": [\"english breakfast\", \"chai\", \"green\", \"oolong\", \"yerba mate\"], \"sparkling water\": [\"perrier\", \"poland spring\", \"la croix\", \"s. pellegriono\"] } } We want to only use the coffee database, how do we do this? { \"coffee\": { \"@\": \"drinks.coffee@https://drinks.db/drinks.json\" } } As you can see, we're prefixing the URL with the path drinks.coffee so it assigns only that subtree into the coffee attribute. \u25a0 Overriding mixed in values Sometimes you may want to mix-in and override certain attributes from the mixed-in JSON. In this case you simply define the attribute locally and it will automatically override the mixed-in value. Let's say we have a JSON at https://jasonbase.com/things/dnf.json that looks like this: { \"type\": \"label\", \"text\": \"this is a placehlder\", \"style\": { \"font\": \"HelveticaNeue\", \"size\": \"12\" } } We may want to use this JSON somewhere but also customize the text part so that it doesn't say this is a placeholder . Here's how you would do it: { \"items\": [{ \"@\": \"https://jasonbase.com/thing/dnf.json\", \"text\": \"This is a custom label\" }] } Here's what happens when Jasonette sees this JSON: It first mixes the referenced JSON in. And then it goes through the rest of the attributes. If there's a collision, it overrides the mixed-in value with the local value. Keep going until all key/value pairs are processed. In this case it ends up overriding the text attribute. The result: { \"items\": [{ \"type\": \"label\", \"text\": \"This is a custom label\", \"style\": { \"font\": \"HelveticaNeue\", \"size\": \"12\" } }] } \u25a0 Self Mixin Mix-in is not limited to remote JSON files. A JSON can even mix-in itself and its own subtree to another location within itself. To access the current JSON object, you just need to use the $document object. Here's an example: { \"users\": { \"{{#each users}}\": { \"@\": \"$document.item\" } }, \"item\": { \"type\": \"label\", \"text\": \"{{name}}\" } } Here, the $document.item is equivalent to: { \"type\": \"label\", \"text\": \"{{name}}\" } After the mix-in resolution finishes, it turns into: { \"users\": { \"{{#each users}}\": { \"type\": \"label\", \"text\": \"{{name}}\" } }, \"item\": { \"type\": \"label\", \"text\": \"{{name}}\" } } Another example: { \"custom_templates\": { \"item\": { \"type\": \"label\", \"text\": \"{{name}}\", \"style\": { \"color\": \"#ff0000\", \"size\": \"12\" } } }, \"$jason\": { \"head\": { \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason.items}}\": { \"@\": \"$document.custom_templates.item\" } } }] } } } } } When parsed, this turns into: { \"custom_templates\": { \"item\": { \"type\": \"label\", \"text\": \"{{name}}\", \"style\": { \"color\": \"#ff0000\", \"size\": \"12\" } } }, \"$jason\": { \"head\": { \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason.items}}\": { \"type\": \"label\", \"text\": \"{{name}}\", \"style\": { \"color\": \"#ff0000\", \"size\": \"12\" } } } }] } } } } } \u25a0 Mix remote and local mixins You can do all kinds of things when you combine remote mixins with local mixins. Let's revisit the above example: { \"custom_templates\": { \"item\": { \"type\": \"label\", \"text\": \"{{name}}\", \"style\": { \"color\": \"#ff0000\", \"size\": \"12\" } } }, \"$jason\": { \"head\": { \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason.items}}\": { \"@\": \"$document.custom_templates.item\" } } }] } } } } } We can extract out the custom_templates as its own JSON file. Let's save it at https://custom.templates/item.json . { \"item\": { \"type\": \"label\", \"text\": \"{{name}}\", \"style\": { \"color\": \"#ff0000\", \"size\": \"12\" } } } Then we can update the code like so: { \"custom_templates\": { \"@\": \"https://custom.templates/item.json\" }, \"$jason\": { \"head\": { \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason.items}}\": { \"@\": \"$document.custom_templates.item\" } } }] } } } } } Let's go deeper. We will save everything under $jason into https://blahblah.blah/view.json : { \"$jason\": { \"head\": { \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason.items}}\": { \"@\": \"$document.custom_templates.item\" } } }] } } } } } Then we can update the original code down to: { \"custom_templates\": { \"@\": \"https://custom.templates/item.json\" }, \"@\": \"https://blahblah.blah/view.json\" } There! An entire app in 6 lines of JSON.","title":"\u2605 Mix-in"},{"location":"mixin/#basics","text":"You can use @ to mix-in a remote JSON object. Let's say https://lorem.ipsum/simpsons.json contains the following content: [\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"] We can mix this into our JSON simply by doing this: { \"the_simpsons\": { \"firstnames\": { \"@\": \"https://lorem.ipsum/simpsons.json\" }, \"lastname\": \"Simpson\" } } Jasonette fetches the JSON from the URL and simply replaces it with the @ node. Here's the result: { \"the_simpsons\": { \"firstnames\": [\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"], \"lastname\": \"Simpson\" } }","title":"\u25a0 Basics"},{"location":"mixin/#how-it-works","text":"It's useful to understand how this works internally. Whenever Jasonette loads a single JSON file here's what happens: Load JSON from a URL. Jasonette scans the JSON to resolve the mixins if any. Sometimes it's not enough to resolve it once, especially when you mix remote mixins with local mixins . Jasonette continues mixin resolution until everything is resolved. Jasonette draws the view. The system triggers $load / $show events. Note 1: All mixins resolutions are carried out in parallel, and the rendering starts only when all mixins have resolved (or failed). Note 2: In case an endpoint doesn't respond or returns an error, that part gets resolved as an empty string and silently fails instead of halting everything. Note 3: The order is important. Since the mixin resolution happens BEFORE actual rendering, you can even mix-in a template expression from a remote JSON","title":"\u25a0 How it works"},{"location":"mixin/#multiple-mixins","text":"You are not limited to a single mixin. You can mix-in as many remote JSON urls as you want. For example: { \"cats\": { \"@\": \"https://lorem.ipsum/cats.json\" }, \"dogs\": { \"@\": \"https://lorem.ipsum/dogs.json\" }, \"monsters\": { \"@\": \"https://lorem.ipsum/monsters.json\" } } Jasonette automatically detects all occurrences of mixins in a JSON file, fetches them in parallel, and attaches them to their corresponding locations.","title":"\u25a0 Multiple Mixins"},{"location":"mixin/#anywhere-in-the-json-tree","text":"You can reference URLs anywhere in the JSON tree, as many times as you want. They will all be downloaded in parallel at load time and substituted in automatically. { \"$jason\": { \"head\": { \"data\": { \"users\": { \"@\": \"https://lorem.ipsum/data.json\" } }, \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each users}}\": { \"@\": \"https://lorem.ipsum/user_item_template.json\" } } }] } } } } } You can even create an entire JSON tree with a mixin: { \"@\": \"https://jasonbase.com/things/3nf.json\" } This particular example may seem silly but it becomes powerful when combined with the override feature. Basically you can use this to mix-in a base JSON you wish to inherit from, and then simply add a small amount of code to customize it. See \"override\" section for details.","title":"\u25a0 Anywhere in the JSON tree"},{"location":"mixin/#partial-mixin","text":"Sometimes you may want to mix-in only the subtree of a remote JSON file. In this case, we use the following syntax: [JSON_PATH]@[JSON_URL] For example, let's say we have a \"drinks\" database at https://drinks.db/drinks.json . { \"drinks\": { \"coffee\": [\"ethiopia\", \"sumatra\", \"nigeria\"], \"tea\": [\"english breakfast\", \"chai\", \"green\", \"oolong\", \"yerba mate\"], \"sparkling water\": [\"perrier\", \"poland spring\", \"la croix\", \"s. pellegriono\"] } } We want to only use the coffee database, how do we do this? { \"coffee\": { \"@\": \"drinks.coffee@https://drinks.db/drinks.json\" } } As you can see, we're prefixing the URL with the path drinks.coffee so it assigns only that subtree into the coffee attribute.","title":"\u25a0 Partial Mixin"},{"location":"mixin/#overriding-mixed-in-values","text":"Sometimes you may want to mix-in and override certain attributes from the mixed-in JSON. In this case you simply define the attribute locally and it will automatically override the mixed-in value. Let's say we have a JSON at https://jasonbase.com/things/dnf.json that looks like this: { \"type\": \"label\", \"text\": \"this is a placehlder\", \"style\": { \"font\": \"HelveticaNeue\", \"size\": \"12\" } } We may want to use this JSON somewhere but also customize the text part so that it doesn't say this is a placeholder . Here's how you would do it: { \"items\": [{ \"@\": \"https://jasonbase.com/thing/dnf.json\", \"text\": \"This is a custom label\" }] } Here's what happens when Jasonette sees this JSON: It first mixes the referenced JSON in. And then it goes through the rest of the attributes. If there's a collision, it overrides the mixed-in value with the local value. Keep going until all key/value pairs are processed. In this case it ends up overriding the text attribute. The result: { \"items\": [{ \"type\": \"label\", \"text\": \"This is a custom label\", \"style\": { \"font\": \"HelveticaNeue\", \"size\": \"12\" } }] }","title":"\u25a0 Overriding mixed in values"},{"location":"mixin/#self-mixin","text":"Mix-in is not limited to remote JSON files. A JSON can even mix-in itself and its own subtree to another location within itself. To access the current JSON object, you just need to use the $document object. Here's an example: { \"users\": { \"{{#each users}}\": { \"@\": \"$document.item\" } }, \"item\": { \"type\": \"label\", \"text\": \"{{name}}\" } } Here, the $document.item is equivalent to: { \"type\": \"label\", \"text\": \"{{name}}\" } After the mix-in resolution finishes, it turns into: { \"users\": { \"{{#each users}}\": { \"type\": \"label\", \"text\": \"{{name}}\" } }, \"item\": { \"type\": \"label\", \"text\": \"{{name}}\" } } Another example: { \"custom_templates\": { \"item\": { \"type\": \"label\", \"text\": \"{{name}}\", \"style\": { \"color\": \"#ff0000\", \"size\": \"12\" } } }, \"$jason\": { \"head\": { \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason.items}}\": { \"@\": \"$document.custom_templates.item\" } } }] } } } } } When parsed, this turns into: { \"custom_templates\": { \"item\": { \"type\": \"label\", \"text\": \"{{name}}\", \"style\": { \"color\": \"#ff0000\", \"size\": \"12\" } } }, \"$jason\": { \"head\": { \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason.items}}\": { \"type\": \"label\", \"text\": \"{{name}}\", \"style\": { \"color\": \"#ff0000\", \"size\": \"12\" } } } }] } } } } }","title":"\u25a0 Self Mixin"},{"location":"mixin/#mix-remote-and-local-mixins","text":"You can do all kinds of things when you combine remote mixins with local mixins. Let's revisit the above example: { \"custom_templates\": { \"item\": { \"type\": \"label\", \"text\": \"{{name}}\", \"style\": { \"color\": \"#ff0000\", \"size\": \"12\" } } }, \"$jason\": { \"head\": { \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason.items}}\": { \"@\": \"$document.custom_templates.item\" } } }] } } } } } We can extract out the custom_templates as its own JSON file. Let's save it at https://custom.templates/item.json . { \"item\": { \"type\": \"label\", \"text\": \"{{name}}\", \"style\": { \"color\": \"#ff0000\", \"size\": \"12\" } } } Then we can update the code like so: { \"custom_templates\": { \"@\": \"https://custom.templates/item.json\" }, \"$jason\": { \"head\": { \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason.items}}\": { \"@\": \"$document.custom_templates.item\" } } }] } } } } } Let's go deeper. We will save everything under $jason into https://blahblah.blah/view.json : { \"$jason\": { \"head\": { \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason.items}}\": { \"@\": \"$document.custom_templates.item\" } } }] } } } } } Then we can update the original code down to: { \"custom_templates\": { \"@\": \"https://custom.templates/item.json\" }, \"@\": \"https://blahblah.blah/view.json\" } There! An entire app in 6 lines of JSON.","title":"\u25a0 Mix remote and local mixins"},{"location":"offline/","text":"What does \"Offline\" mean? Jasonette supports various offline features. Note that \"offline\" doesn't mean your entire app needs to be offline. Parts of your app can be online and parts of it can be offline. This is because everything on Jasonette is described in JSON. You can selectively load your JSON from multiple sources and combine them together. You can do things like: Store the model locally, and load view and controller from remote. Store the view and controller locally, and load model from remote. Store all model, view, controller locally. Etc. But this is just the basics. Imagine what's possible when you use mixins . You can mix and match different modules from different sources, some online, some offline, to finally construct the final app. Features Loading from Local File Global Key-value Persistent Store Automatic JSON Caching Data-uri Loading Screen Error Screen 1. Loading from Local File Just like you can fetch remote files over http to construct a Jasonette app, you can also use local files packaged with the app, using a file url scheme ( file:// ) Using File URL Scheme A. Home URL Instead of setting a remote URL you can point it to a local JSON file. Here's what it looks like on Android: Here's what it looks like on iOS: B. Offline HREF You can also href into local JSON URLs: { \"type\": \"label\", \"text\": \"Go\", \"href\": { \"url\": \"file://demo.json\" } } C. Offline Require You can $require offline JSON URLs: { \"type\": \"$require\", \"options\": { \"items\": [\"file://item1.json\", \"file://item2.json\"] } } D. Offline Mixin You can use file urls with mixins : { \"@\": \"file://mixin.json\", \"items\": [], ... } E. Offline Images Jasonette not only lets you render remote images but also lets you bundle them up on the app locally and load them locally. Just like you can use the file:// scheme to render local JSON objects, you can use the same file:// scheme to access locally stored images. { \"type\": \"image\", \"url\": \"file://avatar.png\" } Supported everywhere: body.background header.menu header.title footer.tabs footer.input image component button component image layers Storing files locally To utilize this feature, you first need to store files under the right folders. Let me show you how: iOS File URL Open XCode, go to Jasonette > Core > file:// from the sidebar, and add your files there by drag and dropping. Access using file://your_filename.json Android File URL Open Android Studio, go to app > assets > file . Copy and paste your files there. Access using file://your_filename.json 2. Global Key-Value Persistent Store Normally, variables on Jasonette are sandboxed per URL (local variables and cache). However, a lot of times you may want to have a global variable that's accessible from all your views. Also, you probably want them to be persisted so you can use it like a Database. This is what global key-value store does. The global key-value store is supported as an action . See $global API section to learn more. 3. Automatic JSON caching You can have best of both worlds (Stream the app on demand to keep it up-to-date all the time, as well as have the app logic cached locally so it loads instantly) by using the offline caching feature. How JSON caching works The first time the app loads, Jasonette fetches the JSON from your server. If you specify that you want to use offline caching, Jasonette will cache the entire JSON for that view. Next time you open the view, Jasonette will load immediately from the offline cached version. But it doesn't stop there, Jaasonette checks to see if the network is available, and if it is, it re-fetches the JSON and updates the view. The trick is step 3 comes first, so it will ONLY update if the network is available. Otherwise you'll still have your offline cached version of your app. How to use Offline caching is managed on a per-view basis. All you need to do to enable is put \"offline\": \"true\" under $jason.head , like this: { \"$jason\": { \"head\": { \"title\": \"offline test\", \"offline\": \"true\", ... } 4. Data-uri Jasonette supports data-uri for urls. This means you can store the entire content within the URL itself. It's not always practical but there are several cases where you can get neat effects using this approach. Try entering a data-url instead of http or https based url. It should work. 5. Loading Screen The loading screen is displayed while a view is being loaded. It is loaded from file://loading.json , which comes with the project, but you can customize it as you like. Remember, this is a full fledged JASON view, which means you can do anything you can do in a regular view. If you don't want a loading view, replace it with an empty view. If you want a simple background colour instead of loading animation, you can do so by setting the background color You can get creative and use the $global and $env variables to construct custom loading screens for each view. 6. Error Screen The error screen is displayed when the view fails to load because of network connection. It is loaded from file://error.json , but you can customize it as you like. Again, it's a full fledged JASON view, so anything you can do on a regular view is possible in the error view, such as rendering templates, running actions on certain events, etc.","title":"\u2605 Offline"},{"location":"offline/#what-does-offline-mean","text":"Jasonette supports various offline features. Note that \"offline\" doesn't mean your entire app needs to be offline. Parts of your app can be online and parts of it can be offline. This is because everything on Jasonette is described in JSON. You can selectively load your JSON from multiple sources and combine them together. You can do things like: Store the model locally, and load view and controller from remote. Store the view and controller locally, and load model from remote. Store all model, view, controller locally. Etc. But this is just the basics. Imagine what's possible when you use mixins . You can mix and match different modules from different sources, some online, some offline, to finally construct the final app.","title":"What does \"Offline\" mean?"},{"location":"offline/#features","text":"Loading from Local File Global Key-value Persistent Store Automatic JSON Caching Data-uri Loading Screen Error Screen","title":"Features"},{"location":"offline/#1-loading-from-local-file","text":"Just like you can fetch remote files over http to construct a Jasonette app, you can also use local files packaged with the app, using a file url scheme ( file:// )","title":"1. Loading from Local File"},{"location":"offline/#using-file-url-scheme","text":"A. Home URL Instead of setting a remote URL you can point it to a local JSON file. Here's what it looks like on Android: Here's what it looks like on iOS: B. Offline HREF You can also href into local JSON URLs: { \"type\": \"label\", \"text\": \"Go\", \"href\": { \"url\": \"file://demo.json\" } } C. Offline Require You can $require offline JSON URLs: { \"type\": \"$require\", \"options\": { \"items\": [\"file://item1.json\", \"file://item2.json\"] } } D. Offline Mixin You can use file urls with mixins : { \"@\": \"file://mixin.json\", \"items\": [], ... } E. Offline Images Jasonette not only lets you render remote images but also lets you bundle them up on the app locally and load them locally. Just like you can use the file:// scheme to render local JSON objects, you can use the same file:// scheme to access locally stored images. { \"type\": \"image\", \"url\": \"file://avatar.png\" } Supported everywhere: body.background header.menu header.title footer.tabs footer.input image component button component image layers","title":"Using File URL Scheme"},{"location":"offline/#storing-files-locally","text":"To utilize this feature, you first need to store files under the right folders. Let me show you how: iOS File URL Open XCode, go to Jasonette > Core > file:// from the sidebar, and add your files there by drag and dropping. Access using file://your_filename.json Android File URL Open Android Studio, go to app > assets > file . Copy and paste your files there. Access using file://your_filename.json","title":"Storing files locally"},{"location":"offline/#2-global-key-value-persistent-store","text":"Normally, variables on Jasonette are sandboxed per URL (local variables and cache). However, a lot of times you may want to have a global variable that's accessible from all your views. Also, you probably want them to be persisted so you can use it like a Database. This is what global key-value store does. The global key-value store is supported as an action . See $global API section to learn more.","title":"2. Global Key-Value Persistent Store"},{"location":"offline/#3-automatic-json-caching","text":"You can have best of both worlds (Stream the app on demand to keep it up-to-date all the time, as well as have the app logic cached locally so it loads instantly) by using the offline caching feature.","title":"3. Automatic JSON caching"},{"location":"offline/#how-json-caching-works","text":"The first time the app loads, Jasonette fetches the JSON from your server. If you specify that you want to use offline caching, Jasonette will cache the entire JSON for that view. Next time you open the view, Jasonette will load immediately from the offline cached version. But it doesn't stop there, Jaasonette checks to see if the network is available, and if it is, it re-fetches the JSON and updates the view. The trick is step 3 comes first, so it will ONLY update if the network is available. Otherwise you'll still have your offline cached version of your app.","title":"How JSON caching works"},{"location":"offline/#how-to-use","text":"Offline caching is managed on a per-view basis. All you need to do to enable is put \"offline\": \"true\" under $jason.head , like this: { \"$jason\": { \"head\": { \"title\": \"offline test\", \"offline\": \"true\", ... }","title":"How to use"},{"location":"offline/#4-data-uri","text":"Jasonette supports data-uri for urls. This means you can store the entire content within the URL itself. It's not always practical but there are several cases where you can get neat effects using this approach. Try entering a data-url instead of http or https based url. It should work.","title":"4. Data-uri"},{"location":"offline/#5-loading-screen","text":"The loading screen is displayed while a view is being loaded. It is loaded from file://loading.json , which comes with the project, but you can customize it as you like. Remember, this is a full fledged JASON view, which means you can do anything you can do in a regular view. If you don't want a loading view, replace it with an empty view. If you want a simple background colour instead of loading animation, you can do so by setting the background color You can get creative and use the $global and $env variables to construct custom loading screens for each view.","title":"5. Loading Screen"},{"location":"offline/#6-error-screen","text":"The error screen is displayed when the view fails to load because of network connection. It is loaded from file://error.json , but you can customize it as you like. Again, it's a full fledged JASON view, so anything you can do on a regular view is possible in the error view, such as rendering templates, running actions on certain events, etc.","title":"6. Error Screen"},{"location":"reference/","text":"Anatomy of a Jason document Just like HTML has basic tags such as html, body, div, span, a, button, etc, Jasonette has JSON based tags. Learn the basic structure of a JASON document UI Components Components are basic units of user interface, such as image, label, textarea, button, slider, etc. Learn more about component syntax Describing layout In many cases we will combine multiple components to construct a unit. We use layouts to do this. Learn more about layouts Interacting with Jason document Now that we know how to display content, we would like to make the app react to our input. Learn how to perform actions and transition between views. Learn how to make a view interactive Action API There are many kinds of actions you can use. Here's a reference for all the available actions Templates You can use templates to dynamically render data, such as remote network content, local data, and user input. Learn more about templates","title":"Reference"},{"location":"reference/#anatomy-of-a-jason-document","text":"Just like HTML has basic tags such as html, body, div, span, a, button, etc, Jasonette has JSON based tags. Learn the basic structure of a JASON document","title":"Anatomy of a Jason document"},{"location":"reference/#ui-components","text":"Components are basic units of user interface, such as image, label, textarea, button, slider, etc. Learn more about component syntax","title":"UI Components"},{"location":"reference/#describing-layout","text":"In many cases we will combine multiple components to construct a unit. We use layouts to do this. Learn more about layouts","title":"Describing layout"},{"location":"reference/#interacting-with-jason-document","text":"Now that we know how to display content, we would like to make the app react to our input. Learn how to perform actions and transition between views. Learn how to make a view interactive","title":"Interacting with Jason document"},{"location":"reference/#action-api","text":"There are many kinds of actions you can use. Here's a reference for all the available actions","title":"Action API"},{"location":"reference/#templates","text":"You can use templates to dynamically render data, such as remote network content, local data, and user input. Learn more about templates","title":"Templates"},{"location":"templates/","text":"\u25a0 What is a template? Sometimes we may want to dynamically generate the JSON from the client side instead of directly using a JSON returned from the server. It may be for rendering a local user input, it may be for rendering a result from a 3rd party API. There are several cases where templating makes sense. Learn more here To achieve this we use templates. Templates have slots ( {{ }} ) to be filled in. All expressions inside {{ }} are evaluated with the data in memory and substituted in. Templates handle not only evaluation but also support looping ( #each ) and conditionals ( #if/#elseif/#else ) . Templates are always declared under $jason.head.templates . Most of the times we just use the body template ( $jason.head.templates.body ). valid expressions Jasonette template engine takes advantage of the native javascript engine. This means: 1. Any expression that evaluates to a value. { \"items\": [ { \"type\": \"image\", \"url\": \"{{$jason.image}}\" }, { \"type\": \"label\", \"text\": \"{{$jason.username}}\" } ] } 2. Any javascript expression. Jasonette implements the native javascript engine to evaluate expressions. So you can use any javascript expression inside {{ }} . { \"items\": [ { \"type\": \"label\", \"url\": \"Full JSON string\" }, { \"type\": \"label\", \"text\": \"{{JSON.stringify($jason)}}\" } ] } 3. A full fledged javascript function. If it involves multiple instructions, you can even write a full fledged function inside the template expression. Just make sure to end with a return statement. { \"items\": [ { \"type\": \"label\", \"url\": \"Reversed Fullname\" }, { \"type\": \"label\", \"text\": \"{{var sorted_posts = $jason.posts.sort(function(a,b){ return new Date(b.created_at) - new Date(a.created_at); }); return sorted_posts[0];}}\" } ] } example Here's an example where we use the $geo.get action to get the current location, and render it dynamically using the template. { \"$jason\": { \"head\": { \"title\": \"Display location\", \"actions\": { \"type\": \"$geo.get\", \"success\": { \"type\": \"$render\" } }, \"templates\": { \"body\": { \"sections\": [{ \"items\": [ { \"type\": \"label\", \"text\": \"Latitude: {{ $jason.coord.split(',')[0] }}\" }, { \"type\": \"label\", \"text\": \"Longitude: {{ $jason.coord.split(',')[1] }}\" } ] }] } } } } } In above JSON markup, the $jason.body part is missing, because we will dynamically generate it via $render . The $render action will render the data with the template, and insert it into where $jason.body should be. The result would be: { \"$jason\": { \"head\": { \"title\": \"Display location\", \"actions\": { \"type\": \"$geo.get\", \"success\": { \"type\": \"$render\" } }, \"templates\": { \"body\": { \"sections\": [{ \"items\": [ { \"type\": \"label\", \"text\": \"Latitude: {{ $jason.coord.split(',')[0] }}\" }, { \"type\": \"label\", \"text\": \"Longitude: {{ $jason.coord.split(',')[1] }}\" } ] }] } } }, \"body\": { \"sections\": [{ \"items\": [ { \"type\": \"label\", \"text\": \"Latitude: 12.1234\" }, { \"type\": \"label\", \"text\": \"Longitude: 23.2345\" } ] }] } } } Notice how we now have the $jason.body filled out. \u25a0 Syntax JSON Let's take a look at how JSON templating works: 1. Loop (#each) To demonstrate looping, let's look at an example. We have a static JSON that looks like this: { \"body\": { \"sections\": [{ \"items\": [ { \"type\": \"label\", \"text\": \"Homer\" }, { \"type\": \"label\", \"text\": \"Marge\" }, { \"type\": \"label\", \"text\": \"Lisa\" }, { \"type\": \"label\", \"text\": \"Bart\" }, { \"type\": \"label\", \"text\": \"Maggie\" } ] }] } } IF you look at each item, the only part that's custom is the name (\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"). We want to shorten this so that we don't have to rewrite \"type\": \"label\" for every item. First, we need to declare a data attribute ( Learn more about head.data ): { \"$jason\": { \"head\": { \"data\": { \"members\": [ { \"name\": \"Homer\" }, { \"name\": \"Marge\" }, { \"name\": \"Lisa\" }, { \"name\": \"Bart\" }, { \"name\": \"Maggie\" } ] } } } } Then we will declare a body template that will iterate through this members array and turn each into renderable item. { \"$jason\": { \"head\": { \"data\": { \"members\": [ { \"name\": \"Homer\" }, { \"name\": \"Marge\" }, { \"name\": \"Lisa\" }, { \"name\": \"Bart\" }, { \"name\": \"Maggie\" } ] }, \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each members}}\": { \"type\": \"label\", \"text\": \"{{name}}\" } } }] } } } } } The #each keyword will iterate through the expression that comes after it ( members ) and generate a JSON array from the result, ending up with the final JSON markup we saw at the beginning. How to access variables from inside nested #each When there's only a single #each expression it's simple. But when we have multiple #each expressions, dealing with context becomes a bit tricky. Here's an example: { \"{{#each families}}\": { \"{{#each members}}\": { \"type\": \"label\", \"text\": \"{{name}}\" } } } What if we want to access families object from inside the nested {{#each members}} loop? We can't just do: { \"{{#each families}}\": { \"{{#each members}}\": { \"type\": \"label\", \"text\": \"{{families.length}}\" } } } because inside the {{#each members}} loop, the context is each family member. Above expression will result in the parser trying to access for example members[0].families.length instead of families.length . It will throw an error because a member object doesn't contain a families attribute. We need a way to access the root context. This is where $root comes in. Whenever you're inside a loop, you can refer to the root context using $root . So above example will be: { \"{{#each families}}\": { \"{{#each members}}\": { \"type\": \"label\", \"text\": \"{{$root.families.length}}\" } } } You can use the $root object to access everything at the root level, such as $get (through $root.$get ), $cache (through $root.$cache ), $global (through $root.$global ), etc. 2. Conditional (#if/#elseif/#else) Conditionals are used to conditionally render their children only when the expression evaluates to true . Conditionals take the form of an array . The parser walks through the array sequentially Executes each conditional expression And Renders the child JSON of the first conditional expression that evaluates to true syntax Conditionals take the following format. [ { \"{{#if (EXPRESSION A)}}\": (JSON) }, { \"{{#elseif (EXPRESSION B)}}\": (JSON) } { \"{{#else (EXPRESSION C)}}\": (JSON) } ] The template will walk through the items in the array sequentially until it encounters an conditional expression that's true. Then it will only render its child JSON. Note #elseif and #else are optional. if no conditional expression evaluates to true , nothing gets rendered. Example Let's say we are are trying to render the following return value ( $jason ): { \"data\": { \"name\": \"Homer\" } } What happens when we run above data through the following template? { \"type\": \"label\", \"text\": [ { \"{{#if $jason.data.name=='Bart'}}\": \"Ay Caramba!\" }, { \"{{#elseif $jason.data.name=='Homer'}}\": \"Donuts...\" } ] } It will render the following result: { \"type\": \"label\", \"text\": \"Donuts...\" } 3. \"this\" this is a javascript keyword used to refer to the current context. Let's look at what that means: For example we want to generate this JSON using #each : [ { \"type\": \"label\", \"text\": \"Homer\" }, { \"type\": \"label\", \"text\": \"Marge\" }, { \"type\": \"label\", \"text\": \"Lisa\" }, { \"type\": \"label\", \"text\": \"Bart\" }, { \"type\": \"label\", \"text\": \"Maggie\" } ] If our data looks like this: { \"members\": [{\"name\": \"Homer\"}, {\"name\": \"Marge\"}, {\"name\": \"Lisa\"}, {\"name\": \"Bart\"}, {\"name\": \"Maggie\"}] } We can write the following template: { \"{{#each members}}\": { \"type\": \"label\", \"text\": \"{{name}}\" } } But what if it looked like this: { \"members\": [\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"] } Now we're lost. Since each individual element in the members array is just a string instead of an object, we need some way to refer to the object itself . This is where this comes in. To handle this situation we can write the following template: { \"{{#each members}}\": { \"type\": \"label\", \"text\": \"{{this}}\" } } Keep in mind that the change in context makes global objects such as $get , and $cache inaccessible. You can use the $root object to get at them, e.g. $root.$get . 4. Advanced Since inception, the template engine has added a lot of more useful features, such as $index for keeping track of the current item's index within a loop #let API to define local variables #concat for merging two arrays #merge for merging two objects #? : Existential operator for including or excluding a key/value pair altogether based on the parsed result The template itself has become too much of a sophisticated beast that it's been spun out to a separate project. You can view the full documentation here: https://selecttransform.github.io/site/transform.html Non-JSON Let's take a look at how non-JSON (CSV, RSS, HTML) templating works: CSV When you have a raw CSV content, you can parse it into JSON format before feeding it into a template. To do this, use $convert.csv Here's a functional example RSS When you have an RSS content, you can parse it into JSON format before feeding it into a template. To do this, use $convert.rss Here's a functional example HTML Unlike other formats like CSV and RSS, Jasonette implements a separate HTML template engine, so we don't need to parse HTML into JSON. Instead, we convert HTML DOM elements into JSON, using the built-in HTML to JSON parser , which is built on top of Cheerio library , which has similar syntax to jQuery How to use Step 1. Make a $network.request It starts with an HTML content. You can fetch HTML content by making $network.request calls with data_type of html , like this: { \"$jason\": { \"head\": { \"actions\": { \"type\": \"$network.request\", \"options\": { \"url\": \"http://www.techmeme.com/river\", \"data_type\": \"html\" } } } } } Step 2. $render as html In order to render it using the html parser, you need to call $render with data_type of html : { \"$jason\": { \"head\": { \"actions\": { \"type\": \"$network.request\", \"options\": { \"url\": \"http://www.techmeme.com/river\", \"data_type\": \"html\" }, \"success\": { \"type\": \"$render\", \"options\": { \"type\": \"html\" } } } } } } Step 3. Use jQuery syntax to parse and render The HTML template engine automatically sets the <body> element as $jason . From there we can use the jQuery syntax to parse and render content: { \"$jason\": { \"head\": { \"actions\": { \"type\": \"$network.request\", \"options\": { \"url\": \"http://www.techmeme.com/river\", \"data_type\": \"html\" }, \"success\": { \"type\": \"$render\", \"options\": { \"type\": \"html\" } } }, \"templates\": { \"body\": { \"sections\": [ { \"items\": { \"{{#each $jason.find('tr.ritem')}}\": { \"type\": \"vertical\", \"components\": [ { \"type\": \"label\", \"text\": \"{{$(this).find('td > a').text()}}\" }, { \"type\": \"label\", \"text\": \"{{$(this).find('cite').text()}}\" }, { \"type\": \"label\", \"text\": \"{{$(this).find('td').first().text() + ' ' + $(this).closest('table').prev().text()}}\" } ], \"href\": { \"view\": \"web\", \"url\": \"{{$(this).find('td > a').attr('href')}}\" } } } } ] } } } } } Here's a functional example \u25a0 When to use templates Normally you can just return a static JSON document from the server and Jason would do its job to render it. However sometimes you may want to dynamically render the view. Here are some cases where using a template makes sense: Make a separate network request for data, then render the response Dynamically render local data Dynamically render data generated from device sensors Separate data from template for less redundancy Let's take a look at each: 1. Separate data from view Make a separate network request for data, then render the response For example here's a JSON markup that renders a list of labels: { \"$jason\": { \"head\": { ... }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"This is row 1\" }, { \"type\": \"label\", \"text\": \"This is row 2\" }, { \"type\": \"label\", \"text\": \"This is row 3\" }, { \"type\": \"label\", \"text\": \"This is row 4\" }, { \"type\": \"label\", \"text\": \"This is row 5\" }, { \"type\": \"label\", \"text\": \"This is row 6\" }, { \"type\": \"label\", \"text\": \"This is row 7\" }, { \"type\": \"label\", \"text\": \"This is row 8\" }] }] } } } As you can see, the \"type\": \"label\" part is repeated for each item. Instead of this static JSON, we can use a template/data approach: Return a body template . Make a separate network request on $load just to fetch the data. Render the fetched data using the body template. Here's what it looks like: { \"$jason\": { \"head\": { ... \"actions\": { \"$load\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.org/rownames.json\" }, \"success\": { \"type\": \"$render\" } } }, \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason.result}}\": { \"type\": \"label\", \"text\": \"This is row {{row_name}}\" } } }] } } } } } Notice there's no body under $jason here ( $jason.body ). It's because we're going to dynamically generate the body using the body template inside templates ( $jason.head.templates.body ). Also notice the actions attribute contains a $load attribute , so this will be triggered as soon as the view loads. So putting all these together, here's what's going on: The Jason app loads the JSON shown above, from our server. There's no body attribute so nothing is rendered on the screen by default. However, notice there's a body attribute under templates . This is the template that will be rendered as the body later. Immediately after the view loads, the $load action gets automatically triggered by the system. $load makes a $network.request call with the url specified. We will need to return the following data from the API: { \"result\": [{ \"row_name\": \"1\" }, { \"row_name\": \"2\" }, { \"row_name\": \"3\" }, { \"row_name\": \"4\" }, { \"row_name\": \"5\" }, { \"row_name\": \"6\" }, { \"row_name\": \"7\" }, { \"row_name\": \"8\" }] } Once $network.request succeeds, its success action gets executed next. In this case it's $render . $render draws the view using the body template and the data from the network request . The result is the same as the original static JSON Network request to a 3rd party API: Let's say we want to build a Twitter client. What we want to do is: Fetch the data by making a network request to Twitter API. Render the data using our own template. Instant plug and play: Most web development frameworks nowadays come with JSON API right out of the box. This means you can simply write a template and render your own existing API. 2. Local user input Dynamically render local data: You can render templates using any type of data, which includes local variables you can set using form components such as: textfield textarea search etc. Example: Below, we render the label using a local variable named message , which is automatically set whenever the textfield value changes. Note that there is no top level body element after head . Instead we have a body template, which will be rendered into body whenever we call the $render action. { \"$jason\": { \"head\": { ... \"actions\": { \"$load\": { \"type\": \"$render\" }, \"$pull\": { \"type\": \"$render\" } }, \"templates\": { \"body\": { ... \"items\": [ { \"type\": \"textfield\", \"name\": \"message\" }, { \"type\": \"label\" \"text\": \"{{$get.message}}\" } ] ... } } } } } 3. Device API generated data Dynamically render data generated from device APIs geolocation addressbook camera timer etc. Example: Below, we access the geolocation device sensor and render its result. Since our server has no knowledge of the device sensor data, templates are the only way to go in this case. { \"$jason\": { \"head\": { ... \"actions\": { \"$load\": { \"type\": \"$geo.get\", \"success\": { \"type\": \"$render\" } } }, \"templates\": { \"body\": { ... \"items\": [ { \"type\": \"label\" \"text\": {{$jason.coord}}\" } ] ... } } } } } 4. Reduce redundancy Separate data from template for less redundancy Sometimes you simply want to separate view from model to avoid lots of code redundancy. See the below data section for details. \u25a0 What can be rendered 1. Inline data The head.data attribute is used to automatically fill in the body template if one exists. When a view loads, Jasonette looks at $jason.head.data and $jason.head.templates.body . If both exist, it dynamically generates the view using the data and the template, and inserts it into $jason.body . Here's a Jason markup without a template/data. As you can see, the label items mostly repeat, except for the text attribute. { ... \"body\": { \"sections\": [ \"items\": [ { \"type\": \"label\", \"text\": \"Ethan\", \"style\": { \"color\": \"#000000\", \"size\": \"14\", \"font\": \"HelveticaNeue-Bold\", \"padding\": \"10\", \"background\": \"rgba(0,0,0,0.5)\", \"width\": \"300\", \"height\": \"100\" } } ... { \"type\": \"label\", \"text\": \"John\", \"style\": { \"color\": \"#000000\", \"size\": \"14\", \"font\": \"HelveticaNeue-Bold\", \"padding\": \"10\", \"background\": \"rgba(0,0,0,0.5)\", \"width\": \"300\", \"height\": \"100\" } } { \"type\": \"label\", \"text\": \"Samantha\", \"style\": { \"color\": \"#000000\", \"size\": \"14\", \"font\": \"HelveticaNeue-Bold\", \"padding\": \"10\", \"background\": \"rgba(0,0,0,0.5)\", \"width\": \"300\", \"height\": \"100\" } } ] ] } } Using template/data, we can reduce it down to: { \"head\": { \"data\": { \"names\": [\"Ethan\", ..., \"John\", \"Samantha\"] }, \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each names}}\": { \"type\": \"label\", \"text\": \"{{this}}\", \"style\": { \"color\": \"#000000\", \"size\": \"14\", \"font\": \"HelveticaNeue-Bold\", \"padding\": \"10\", \"background\": \"rgba(0,0,0,0.5)\", \"width\": \"300\", \"height\": \"100\" } } }] } } } } } 2. Return value of an action But templates really shine when you use it to render dynamic data, produced by running some action on the device. This is essential, since your server has no knowledge of what it should render if the data to render is a result of user interaction. See here for details. 3. Manually specify data This is rarely needed, but sometimes we need a way to manually specify data for the $render action. See here for details.","title":"\u2605 Templates"},{"location":"templates/#what-is-a-template","text":"Sometimes we may want to dynamically generate the JSON from the client side instead of directly using a JSON returned from the server. It may be for rendering a local user input, it may be for rendering a result from a 3rd party API. There are several cases where templating makes sense. Learn more here To achieve this we use templates. Templates have slots ( {{ }} ) to be filled in. All expressions inside {{ }} are evaluated with the data in memory and substituted in. Templates handle not only evaluation but also support looping ( #each ) and conditionals ( #if/#elseif/#else ) . Templates are always declared under $jason.head.templates . Most of the times we just use the body template ( $jason.head.templates.body ).","title":"\u25a0 What is a template?"},{"location":"templates/#valid-expressions","text":"Jasonette template engine takes advantage of the native javascript engine. This means:","title":"valid expressions"},{"location":"templates/#1-any-expression-that-evaluates-to-a-value","text":"{ \"items\": [ { \"type\": \"image\", \"url\": \"{{$jason.image}}\" }, { \"type\": \"label\", \"text\": \"{{$jason.username}}\" } ] }","title":"1. Any expression that evaluates to a value."},{"location":"templates/#2-any-javascript-expression","text":"Jasonette implements the native javascript engine to evaluate expressions. So you can use any javascript expression inside {{ }} . { \"items\": [ { \"type\": \"label\", \"url\": \"Full JSON string\" }, { \"type\": \"label\", \"text\": \"{{JSON.stringify($jason)}}\" } ] }","title":"2. Any javascript expression."},{"location":"templates/#3-a-full-fledged-javascript-function","text":"If it involves multiple instructions, you can even write a full fledged function inside the template expression. Just make sure to end with a return statement. { \"items\": [ { \"type\": \"label\", \"url\": \"Reversed Fullname\" }, { \"type\": \"label\", \"text\": \"{{var sorted_posts = $jason.posts.sort(function(a,b){ return new Date(b.created_at) - new Date(a.created_at); }); return sorted_posts[0];}}\" } ] }","title":"3. A full fledged javascript function."},{"location":"templates/#example","text":"Here's an example where we use the $geo.get action to get the current location, and render it dynamically using the template. { \"$jason\": { \"head\": { \"title\": \"Display location\", \"actions\": { \"type\": \"$geo.get\", \"success\": { \"type\": \"$render\" } }, \"templates\": { \"body\": { \"sections\": [{ \"items\": [ { \"type\": \"label\", \"text\": \"Latitude: {{ $jason.coord.split(',')[0] }}\" }, { \"type\": \"label\", \"text\": \"Longitude: {{ $jason.coord.split(',')[1] }}\" } ] }] } } } } } In above JSON markup, the $jason.body part is missing, because we will dynamically generate it via $render . The $render action will render the data with the template, and insert it into where $jason.body should be. The result would be: { \"$jason\": { \"head\": { \"title\": \"Display location\", \"actions\": { \"type\": \"$geo.get\", \"success\": { \"type\": \"$render\" } }, \"templates\": { \"body\": { \"sections\": [{ \"items\": [ { \"type\": \"label\", \"text\": \"Latitude: {{ $jason.coord.split(',')[0] }}\" }, { \"type\": \"label\", \"text\": \"Longitude: {{ $jason.coord.split(',')[1] }}\" } ] }] } } }, \"body\": { \"sections\": [{ \"items\": [ { \"type\": \"label\", \"text\": \"Latitude: 12.1234\" }, { \"type\": \"label\", \"text\": \"Longitude: 23.2345\" } ] }] } } } Notice how we now have the $jason.body filled out.","title":"example"},{"location":"templates/#syntax","text":"","title":"\u25a0 Syntax"},{"location":"templates/#json","text":"Let's take a look at how JSON templating works:","title":"JSON"},{"location":"templates/#1-loop-each","text":"To demonstrate looping, let's look at an example. We have a static JSON that looks like this: { \"body\": { \"sections\": [{ \"items\": [ { \"type\": \"label\", \"text\": \"Homer\" }, { \"type\": \"label\", \"text\": \"Marge\" }, { \"type\": \"label\", \"text\": \"Lisa\" }, { \"type\": \"label\", \"text\": \"Bart\" }, { \"type\": \"label\", \"text\": \"Maggie\" } ] }] } } IF you look at each item, the only part that's custom is the name (\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"). We want to shorten this so that we don't have to rewrite \"type\": \"label\" for every item. First, we need to declare a data attribute ( Learn more about head.data ): { \"$jason\": { \"head\": { \"data\": { \"members\": [ { \"name\": \"Homer\" }, { \"name\": \"Marge\" }, { \"name\": \"Lisa\" }, { \"name\": \"Bart\" }, { \"name\": \"Maggie\" } ] } } } } Then we will declare a body template that will iterate through this members array and turn each into renderable item. { \"$jason\": { \"head\": { \"data\": { \"members\": [ { \"name\": \"Homer\" }, { \"name\": \"Marge\" }, { \"name\": \"Lisa\" }, { \"name\": \"Bart\" }, { \"name\": \"Maggie\" } ] }, \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each members}}\": { \"type\": \"label\", \"text\": \"{{name}}\" } } }] } } } } } The #each keyword will iterate through the expression that comes after it ( members ) and generate a JSON array from the result, ending up with the final JSON markup we saw at the beginning.","title":"1. Loop (#each)"},{"location":"templates/#how-to-access-variables-from-inside-nested-each","text":"When there's only a single #each expression it's simple. But when we have multiple #each expressions, dealing with context becomes a bit tricky. Here's an example: { \"{{#each families}}\": { \"{{#each members}}\": { \"type\": \"label\", \"text\": \"{{name}}\" } } } What if we want to access families object from inside the nested {{#each members}} loop? We can't just do: { \"{{#each families}}\": { \"{{#each members}}\": { \"type\": \"label\", \"text\": \"{{families.length}}\" } } } because inside the {{#each members}} loop, the context is each family member. Above expression will result in the parser trying to access for example members[0].families.length instead of families.length . It will throw an error because a member object doesn't contain a families attribute. We need a way to access the root context. This is where $root comes in. Whenever you're inside a loop, you can refer to the root context using $root . So above example will be: { \"{{#each families}}\": { \"{{#each members}}\": { \"type\": \"label\", \"text\": \"{{$root.families.length}}\" } } } You can use the $root object to access everything at the root level, such as $get (through $root.$get ), $cache (through $root.$cache ), $global (through $root.$global ), etc.","title":"How to access variables from inside nested #each"},{"location":"templates/#2-conditional-ifelseifelse","text":"Conditionals are used to conditionally render their children only when the expression evaluates to true . Conditionals take the form of an array . The parser walks through the array sequentially Executes each conditional expression And Renders the child JSON of the first conditional expression that evaluates to true","title":"2. Conditional (#if/#elseif/#else)"},{"location":"templates/#syntax_1","text":"Conditionals take the following format. [ { \"{{#if (EXPRESSION A)}}\": (JSON) }, { \"{{#elseif (EXPRESSION B)}}\": (JSON) } { \"{{#else (EXPRESSION C)}}\": (JSON) } ] The template will walk through the items in the array sequentially until it encounters an conditional expression that's true. Then it will only render its child JSON.","title":"syntax"},{"location":"templates/#note","text":"#elseif and #else are optional. if no conditional expression evaluates to true , nothing gets rendered.","title":"Note"},{"location":"templates/#example_1","text":"Let's say we are are trying to render the following return value ( $jason ): { \"data\": { \"name\": \"Homer\" } } What happens when we run above data through the following template? { \"type\": \"label\", \"text\": [ { \"{{#if $jason.data.name=='Bart'}}\": \"Ay Caramba!\" }, { \"{{#elseif $jason.data.name=='Homer'}}\": \"Donuts...\" } ] } It will render the following result: { \"type\": \"label\", \"text\": \"Donuts...\" }","title":"Example"},{"location":"templates/#3-this","text":"this is a javascript keyword used to refer to the current context. Let's look at what that means: For example we want to generate this JSON using #each : [ { \"type\": \"label\", \"text\": \"Homer\" }, { \"type\": \"label\", \"text\": \"Marge\" }, { \"type\": \"label\", \"text\": \"Lisa\" }, { \"type\": \"label\", \"text\": \"Bart\" }, { \"type\": \"label\", \"text\": \"Maggie\" } ] If our data looks like this: { \"members\": [{\"name\": \"Homer\"}, {\"name\": \"Marge\"}, {\"name\": \"Lisa\"}, {\"name\": \"Bart\"}, {\"name\": \"Maggie\"}] } We can write the following template: { \"{{#each members}}\": { \"type\": \"label\", \"text\": \"{{name}}\" } } But what if it looked like this: { \"members\": [\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"] } Now we're lost. Since each individual element in the members array is just a string instead of an object, we need some way to refer to the object itself . This is where this comes in. To handle this situation we can write the following template: { \"{{#each members}}\": { \"type\": \"label\", \"text\": \"{{this}}\" } } Keep in mind that the change in context makes global objects such as $get , and $cache inaccessible. You can use the $root object to get at them, e.g. $root.$get .","title":"3. \"this\""},{"location":"templates/#4-advanced","text":"Since inception, the template engine has added a lot of more useful features, such as $index for keeping track of the current item's index within a loop #let API to define local variables #concat for merging two arrays #merge for merging two objects #? : Existential operator for including or excluding a key/value pair altogether based on the parsed result The template itself has become too much of a sophisticated beast that it's been spun out to a separate project. You can view the full documentation here: https://selecttransform.github.io/site/transform.html","title":"4. Advanced"},{"location":"templates/#non-json","text":"Let's take a look at how non-JSON (CSV, RSS, HTML) templating works:","title":"Non-JSON"},{"location":"templates/#csv","text":"When you have a raw CSV content, you can parse it into JSON format before feeding it into a template. To do this, use $convert.csv Here's a functional example","title":"CSV"},{"location":"templates/#rss","text":"When you have an RSS content, you can parse it into JSON format before feeding it into a template. To do this, use $convert.rss Here's a functional example","title":"RSS"},{"location":"templates/#html","text":"Unlike other formats like CSV and RSS, Jasonette implements a separate HTML template engine, so we don't need to parse HTML into JSON. Instead, we convert HTML DOM elements into JSON, using the built-in HTML to JSON parser , which is built on top of Cheerio library , which has similar syntax to jQuery","title":"HTML"},{"location":"templates/#how-to-use","text":"","title":"How to use"},{"location":"templates/#step-1-make-a-networkrequest","text":"It starts with an HTML content. You can fetch HTML content by making $network.request calls with data_type of html , like this: { \"$jason\": { \"head\": { \"actions\": { \"type\": \"$network.request\", \"options\": { \"url\": \"http://www.techmeme.com/river\", \"data_type\": \"html\" } } } } }","title":"Step 1. Make a $network.request"},{"location":"templates/#step-2-render-as-html","text":"In order to render it using the html parser, you need to call $render with data_type of html : { \"$jason\": { \"head\": { \"actions\": { \"type\": \"$network.request\", \"options\": { \"url\": \"http://www.techmeme.com/river\", \"data_type\": \"html\" }, \"success\": { \"type\": \"$render\", \"options\": { \"type\": \"html\" } } } } } }","title":"Step 2. $render as html"},{"location":"templates/#step-3-use-jquery-syntax-to-parse-and-render","text":"The HTML template engine automatically sets the <body> element as $jason . From there we can use the jQuery syntax to parse and render content: { \"$jason\": { \"head\": { \"actions\": { \"type\": \"$network.request\", \"options\": { \"url\": \"http://www.techmeme.com/river\", \"data_type\": \"html\" }, \"success\": { \"type\": \"$render\", \"options\": { \"type\": \"html\" } } }, \"templates\": { \"body\": { \"sections\": [ { \"items\": { \"{{#each $jason.find('tr.ritem')}}\": { \"type\": \"vertical\", \"components\": [ { \"type\": \"label\", \"text\": \"{{$(this).find('td > a').text()}}\" }, { \"type\": \"label\", \"text\": \"{{$(this).find('cite').text()}}\" }, { \"type\": \"label\", \"text\": \"{{$(this).find('td').first().text() + ' ' + $(this).closest('table').prev().text()}}\" } ], \"href\": { \"view\": \"web\", \"url\": \"{{$(this).find('td > a').attr('href')}}\" } } } } ] } } } } } Here's a functional example","title":"Step 3. Use jQuery syntax to parse and render"},{"location":"templates/#when-to-use-templates","text":"Normally you can just return a static JSON document from the server and Jason would do its job to render it. However sometimes you may want to dynamically render the view. Here are some cases where using a template makes sense: Make a separate network request for data, then render the response Dynamically render local data Dynamically render data generated from device sensors Separate data from template for less redundancy Let's take a look at each:","title":"\u25a0 When to use templates"},{"location":"templates/#1-separate-data-from-view","text":"Make a separate network request for data, then render the response For example here's a JSON markup that renders a list of labels: { \"$jason\": { \"head\": { ... }, \"body\": { \"sections\": [{ \"items\": [{ \"type\": \"label\", \"text\": \"This is row 1\" }, { \"type\": \"label\", \"text\": \"This is row 2\" }, { \"type\": \"label\", \"text\": \"This is row 3\" }, { \"type\": \"label\", \"text\": \"This is row 4\" }, { \"type\": \"label\", \"text\": \"This is row 5\" }, { \"type\": \"label\", \"text\": \"This is row 6\" }, { \"type\": \"label\", \"text\": \"This is row 7\" }, { \"type\": \"label\", \"text\": \"This is row 8\" }] }] } } } As you can see, the \"type\": \"label\" part is repeated for each item. Instead of this static JSON, we can use a template/data approach: Return a body template . Make a separate network request on $load just to fetch the data. Render the fetched data using the body template. Here's what it looks like: { \"$jason\": { \"head\": { ... \"actions\": { \"$load\": { \"type\": \"$network.request\", \"options\": { \"url\": \"https://jasonclient.org/rownames.json\" }, \"success\": { \"type\": \"$render\" } } }, \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each $jason.result}}\": { \"type\": \"label\", \"text\": \"This is row {{row_name}}\" } } }] } } } } } Notice there's no body under $jason here ( $jason.body ). It's because we're going to dynamically generate the body using the body template inside templates ( $jason.head.templates.body ). Also notice the actions attribute contains a $load attribute , so this will be triggered as soon as the view loads. So putting all these together, here's what's going on: The Jason app loads the JSON shown above, from our server. There's no body attribute so nothing is rendered on the screen by default. However, notice there's a body attribute under templates . This is the template that will be rendered as the body later. Immediately after the view loads, the $load action gets automatically triggered by the system. $load makes a $network.request call with the url specified. We will need to return the following data from the API: { \"result\": [{ \"row_name\": \"1\" }, { \"row_name\": \"2\" }, { \"row_name\": \"3\" }, { \"row_name\": \"4\" }, { \"row_name\": \"5\" }, { \"row_name\": \"6\" }, { \"row_name\": \"7\" }, { \"row_name\": \"8\" }] } Once $network.request succeeds, its success action gets executed next. In this case it's $render . $render draws the view using the body template and the data from the network request . The result is the same as the original static JSON Network request to a 3rd party API: Let's say we want to build a Twitter client. What we want to do is: Fetch the data by making a network request to Twitter API. Render the data using our own template. Instant plug and play: Most web development frameworks nowadays come with JSON API right out of the box. This means you can simply write a template and render your own existing API.","title":"1. Separate data from view"},{"location":"templates/#2-local-user-input","text":"Dynamically render local data: You can render templates using any type of data, which includes local variables you can set using form components such as: textfield textarea search etc. Example: Below, we render the label using a local variable named message , which is automatically set whenever the textfield value changes. Note that there is no top level body element after head . Instead we have a body template, which will be rendered into body whenever we call the $render action. { \"$jason\": { \"head\": { ... \"actions\": { \"$load\": { \"type\": \"$render\" }, \"$pull\": { \"type\": \"$render\" } }, \"templates\": { \"body\": { ... \"items\": [ { \"type\": \"textfield\", \"name\": \"message\" }, { \"type\": \"label\" \"text\": \"{{$get.message}}\" } ] ... } } } } }","title":"2. Local user input"},{"location":"templates/#3-device-api-generated-data","text":"Dynamically render data generated from device APIs geolocation addressbook camera timer etc. Example: Below, we access the geolocation device sensor and render its result. Since our server has no knowledge of the device sensor data, templates are the only way to go in this case. { \"$jason\": { \"head\": { ... \"actions\": { \"$load\": { \"type\": \"$geo.get\", \"success\": { \"type\": \"$render\" } } }, \"templates\": { \"body\": { ... \"items\": [ { \"type\": \"label\" \"text\": {{$jason.coord}}\" } ] ... } } } } }","title":"3. Device API generated data"},{"location":"templates/#4-reduce-redundancy","text":"Separate data from template for less redundancy Sometimes you simply want to separate view from model to avoid lots of code redundancy. See the below data section for details.","title":"4. Reduce redundancy"},{"location":"templates/#what-can-be-rendered","text":"","title":"\u25a0 What can be rendered"},{"location":"templates/#1-inline-data","text":"The head.data attribute is used to automatically fill in the body template if one exists. When a view loads, Jasonette looks at $jason.head.data and $jason.head.templates.body . If both exist, it dynamically generates the view using the data and the template, and inserts it into $jason.body . Here's a Jason markup without a template/data. As you can see, the label items mostly repeat, except for the text attribute. { ... \"body\": { \"sections\": [ \"items\": [ { \"type\": \"label\", \"text\": \"Ethan\", \"style\": { \"color\": \"#000000\", \"size\": \"14\", \"font\": \"HelveticaNeue-Bold\", \"padding\": \"10\", \"background\": \"rgba(0,0,0,0.5)\", \"width\": \"300\", \"height\": \"100\" } } ... { \"type\": \"label\", \"text\": \"John\", \"style\": { \"color\": \"#000000\", \"size\": \"14\", \"font\": \"HelveticaNeue-Bold\", \"padding\": \"10\", \"background\": \"rgba(0,0,0,0.5)\", \"width\": \"300\", \"height\": \"100\" } } { \"type\": \"label\", \"text\": \"Samantha\", \"style\": { \"color\": \"#000000\", \"size\": \"14\", \"font\": \"HelveticaNeue-Bold\", \"padding\": \"10\", \"background\": \"rgba(0,0,0,0.5)\", \"width\": \"300\", \"height\": \"100\" } } ] ] } } Using template/data, we can reduce it down to: { \"head\": { \"data\": { \"names\": [\"Ethan\", ..., \"John\", \"Samantha\"] }, \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each names}}\": { \"type\": \"label\", \"text\": \"{{this}}\", \"style\": { \"color\": \"#000000\", \"size\": \"14\", \"font\": \"HelveticaNeue-Bold\", \"padding\": \"10\", \"background\": \"rgba(0,0,0,0.5)\", \"width\": \"300\", \"height\": \"100\" } } }] } } } } }","title":"1. Inline data"},{"location":"templates/#2-return-value-of-an-action","text":"But templates really shine when you use it to render dynamic data, produced by running some action on the device. This is essential, since your server has no knowledge of what it should render if the data to render is a result of user interaction. See here for details.","title":"2. Return value of an action"},{"location":"templates/#3-manually-specify-data","text":"This is rarely needed, but sometimes we need a way to manually specify data for the $render action. See here for details.","title":"3. Manually specify data"},{"location":"web/","text":"New to Jasonette? Check out Getting Started with Jasonette first. JSON Web Container What if you could take any number of web elements, plug them straight into a native app layout, resize, scroll, interact with, and pretty much treat them just like any other native components ? Web Containers are self-contained web views that render into native app layout as native components. Of course, the great part is you can describe them all in JSON, just like the rest of Jasonette components . Web containers are designed to be plugged into a native app layout alongside other native components . As you can see in above example, it's a combination of JSON and HTML. First, use HTML/CSS/Javascript to describe the internals of the container view. Then, plug it into your native app using JSON as just another component . Table of Contents Notice Web containers in action Features What is possible? Usage Notice Before we jump in, just a few things: The web container performs pretty nicely on modern mobile devices, in fact so nicely that sometimes you forget that you're using web containers. But don't go overboard with it. Native will always be more performant and you should use native whenever possible. Try experimenting and you'll reach the sweet spot. A lot of design decisions around Web containers were made specifically for displaying rich dynamic content, which used to be tricky using just native components. Try to think of this as just another component and try not to use the web container to implement app logic. It will most likely result in bad user experience. You can do a lot of cool things with this, such as implementing little animations here and there without having to invent a whole new JSON syntax because you can now just use CSS or Javascript animation. Also you can do things like text overlay over image simply by using CSS positioning. Please share cool use cases you find . This is just the first draft and intentionally minimal. We may add more features depending on how it goes. Feedback appreciated. Web Containers in Action Web containers can be used both as a fullscreen background and as an inline component . Here are some examples: \u00ad \u00ad Anime.js (Mix and match with native) Native feed view + partial web D3.js (Native slider controller + Web container output) Canvas + JS Demo (Background type) Anime.js (Animated HTML element inside native scroll view) Phaser.js (Background type, with user interaction) Three.js (background type) Three.js (background type) Features Use alongside native components Web containers plug into native layout alongside other native components so seamlessly that you won't even be able to tell the difference in most cases. It's just like any other component ! Style and use them together with other native Jasonette components. Dissolve right into native layout Same native layout system you already know. Scroll just like other components Since it's just like any other component, you can use it in a scroll view, and scroll it just like label, button, image, etc. [Note] This is possible because of the design decision made to make the contents inside a web container NOT scrollable when contained within a scroll view (for obvious UX reasons). Or use as fullscreen background Not just for scrolling components. you can use it as a background by setting \"html\" type for background. Write once, use anywhere You can use mix-ins to write a single HTML container inside JSON and mix them into any context such as the background or a layout. What is possible? Since each Web container is basically a self-contained web view, you can do anything you can do with a browser, which includes any HTML markup, Javascript, and CSS styling. Canvas SVG & CSS iframe Javascript Interaction between native actions and Web container Templates work exactly the same as the rest of Jasonette. So you can use native UI elements as input, set local variables , and re-render accordingly using the local variable to dynamically display output onto the web container. Mix and match Jasonette already has most of what you need to build sophisticated native apps, even without the web container. But web containers can be powerful when seamlessly blended into the rest of the native app to perform things that were hard to do with existing Jasonette api. Usage Syntax Examples Important Tips (MUST READ) Syntax 1. As Component Just like rest of the Jasonette components , you can plug it into layouts and scroll views(sections) . web containers plugged in everywhere using web container to animate text via JS type : \"html\" text : A self contained HTML text ( <html>...</html> ), which means everything from script tag to style tag. style : Required. Especially the height . Web containers should NOT scroll, therefore everything outside of the style.height you specify will get cut off. This attribute is about how the web container looks from the outside. To style the HTML elements inside, just include the CSS inside the HTML markup. action : (optional) Connect with any action or a web container specific action: \"type\": \"$default\" . [IMPORTANT] By default, web container content DOES NOT respond to user touch. This means if you click on a link inside the HTML, it won't do anything. In order to override this behavior, attach a \"type\": \"$default\" action, so the web container knows. { \"items\": [{ \"type\": \"html\", \"text\": \"<html>....</html>\", \"style\": { \"height\": \"100\" }, \"action\": { \"type\": \"$default\" } }] } 2. As Background Web containers can be plugged into body.style.background too, which will take up the full screen. Use any JS library Interacting with HTML content via touch Same as component usage, except there's no need for style , and you can't attache an action other than \"type\": \"$default\" . type : \"html\" url : URL to load ( http:// , https:// , file:// supported) text : A self contained HTML text ( <html>...</html> ), which means everything from script tag to style tag. style : styling the web container background : Background color progress : The progressbar color. The background web container comes with a progressbar which displays the loading progress whenever a web page loads. Use this property to change its color (Ex: \"#ff0000\" , rgb(255,0,0) , rgba(255,0,0,0.5) ) action : (optional) Connect with \"type\": \"$default\" in order to let the web container handle the touch event. Otherwise not needed. [IMPORTANT] By default, web container content DOES NOT respond to user touch. This means if you click on a link inside the HTML, it won't do anything. In order to override this behavior, attach a \"type\": \"$default\" action, so the web container knows. Using a raw html text approach: { \"body\": { \"background\": { \"type\": \"html\", \"text\": \"<html>....</html>\", \"action\": { \"type\": \"$default\" } } } } { \"body\": { \"background\": { \"type\": \"html\", \"url\": \"https://www.google.com\", \"action\": { \"type\": \"$default\" } } } } In-Depth on Background web container The background web container is a different beast than the component web containers. Whereas component web containers are purely meant for display purposes, the background web container can do a lot of things. 1. Background Web Container is an Agent The background web container ( $jason.body.background ) is an agent. It's a special type of agent, but it's still powered by the same agent engine. This means you can make JSON-RPC calls into the web container and let it have seamless 2-way communications with native Jasonette core. But first, if you aren't aware of how agents work, check out the agent documentation and come back. Back? A couple of things to note that makes web containers special: Unlike other agents which are invisible, web container is visible (Obviously. That's what web containers are for) Web container is a special type of agent. There can be only ONE per view (the $jason.body.background ) Unlike other \"virtual\" agents where you declare them under $jason.head.agents , you declare them just like any other body background. ( $jason.body.background ) Other agents require an id , which you set under $jason.head.agents . Web container doesn't require an ID. It's automatically set to $webcontainer . This means when you're making JSON-RPC calls into the web container, you will use $webcontainer as its ID, like this: { \"$jason\": { \"head\": { \"title\": \"Web Container Agent Demo\", \"actions\": { \"$load\": { \"type\": \"$agent.request\", \"options\": { \"id\": \"$webcontainer\", \"method\": \"add\", \"params\": [\"a\", \"b\"] } } } }, \"body\": { \"background\": { \"type\": \"html\", \"url\": \"file://app.html\" } } } } 2. User Interaction Depending on what you specify as the action attribute, you can make your web container behave in many different ways. A. Block user interaction By default (if you don't specify any action attribute) users can't interact with web containers. In this case, you use it for view only purposes. This may be necessary if you just want to use web container as a \"display\" and don't want users to interact with it. you don't want any scrolling behavior within the web container. This may conflict with the native view's own scroll view. B. Intercept URL visits To intercept URL visits, you simply need to define an action attribute. When you do so, users can interact with the web container. any attempt of the user trying to navigate away from the view (by clicking a link for example) will be intercepted. When intercepted, it will make the action call specified under body.background.action instead of actually navigating away. When the action is called, the web container will pass the following payload: { \"$jason\": { \"url\": [The link the user was trying to navigate to] } } Here's an example: { \"$jason\": { \"head\": { \"title\": \"Web Container Agent\", \"actions\": { \"notify\": { \"type\": \"$utill.alert\", \"options\": { \"title\": \"Link Clicked\", \"description\": \"You just clicked {{$jason.url}}\" } } } }, \"body\": { \"background\": { \"type\": \"html\", \"url\": \"file://app.html\", \"id\": \"app\", \"action\": { \"trigger\": \"notify\" } } } } } In this case, the body.background has an action attribute, so it means users can interact with the web container. When the user clicks any link on the page, it will trigger an action called \"notify\" . The notify action (specified under $jason.head.actions.notify ) will open an alert displaying the URL the user tried to navigate to. C. Or don't intercept. Or you may want users to interact with the web container, but instead of intercepting, just let it behave like a plain web browser (just letting users visit new links) You can do this by setting the action to \"type\": \"$default\" { \"type\": \"$agent.connect\", \"options\": { \"url\": \"file://app.html\", \"id\": \"app\", \"action\": { \"type\": \"$default\" } } } Intercepting a URL visit and doing a native transition Using the interception approach you can intercept a user's intent to visit a link, and instead of doing a clumsy web-like page refresh, you can native transition into another Jason view with another web page contained in a web container. file://native_transition.json { \"$jason\": { \"head\": { \"title\": \"Web Container Native Transition\", \"actions\": { \"$load\": { \"type\": \"$set\", \"options\": { \"url\": [{ \"{{#if $params && 'url' in $params}}\": \"{{$params.url}}\" }, { \"{{#else}}\": \"https://www.google.com\" }] }, \"success\": { \"type\": \"$render\" } }, \"navigate\": { \"type\": \"$href\", \"options\": { \"url\": \"file://native_transition.json\", \"options\": { \"url\": \"{{$jason.url}}\" } } } }, \"templates\": { \"body\": { \"background\": { \"type\": \"html\", \"url\": \"{{$get.url}}\", \"action\": { \"trigger\": \"navigate\" } } } } } } } With the agent and its URL interception feature, now you can have a seamless interaction between the web container and its parent native app. Normally when you click a link in an HTML document, it refreshes the page to send you to the linked page. This is in fact one of the primary reasons why HTML5 hybrid app approaches feel so clunky. But now HTML documents loaded within a web container can: Trigger a native action Make a native transition to another view Example Display scrolling H1 elements { \"$jason\": { \"head\": { \"title\": \"Scrolling Web Container\" \"data\": { \"colors\": [{ \"code\": \"#ff0000\" }, { \"code\": \"rgba(0,0,0,0.3)\" }, { \"code\": \"#00ff00\" }, { \"code\": \"rgb(130,43,32)\" }] }, \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each colors}}\": { \"type\": \"html\", \"style\": { \"height\": \"50\" }, \"text\": \"<html><head><style>h1{font-size: 30px; color: {{code}};}</style></head><body><h1>Hello World</h1></body></html>\" } } }] } } } } } iframe as background { \"$jason\": { \"head\": { \"title\": \"pdf.js\" }, \"body\": { \"background\": { \"type\": \"html\", \"text\": \"<html><head><style>html{padding:0;margin:0;margin-top: 64px;} body,iframe{width:100%;height:100%;padding:0;margin:0;border:0;}</style><body><iframe src='https://mozilla.github.io/pdf.js/web/viewer.html'/></body></html>\" } } } } three.js as background { \"$jason\": { \"head\": { \"title\": \"pdf.js\" }, \"body\": { \"background\": { \"type\": \"html\", \"text\": \"<html> <head> <style> body { margin: 0; padding: 0; background: #111; overflow: hidden; } .dg{visibility: hidden;}</style> </head> <body> <script src='https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js'></script><script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script><script src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r50/three.min.js'></script><script> window.onload = function(){ var $container = $('#container'); var renderer = new THREE.WebGLRenderer({antialias: true}); var camera = new THREE.PerspectiveCamera(80,window.innerWidth/window.innerHeight,0.1,10000); var scene = new THREE.Scene(); var mouseX = 0, mouseY = 0; scene.add(camera); renderer.setSize(window.innerWidth, window.innerHeight); $container.append(renderer.domElement); window.addEventListener( 'resize', onWindowResize, false ); var Controls = function() { this.speed = 2; this.rotation = 0; }; var text = new Controls(), gui = new dat.GUI(); gui.add(text, 'speed', 0, 10); gui.add(text, 'rotation',0,15); var normalMaterial = new THREE.MeshNormalMaterial({}); function Torus(f){ this.b = new THREE.Mesh(new THREE.TorusGeometry( 160, 75, 2, 13),normalMaterial); this.b.position.x = 57*Math.cos(f); this.b.position.y = 57*Math.sin(f); this.b.position.z = f*1.25; this.b.rotation.z = f*0.03; } var numTorus = 80; var tabTorus = []; for(var i=0; i<numTorus; i++){ tabTorus.push(new Torus(-i*13)); scene.add(tabTorus[i].b); } function update(){ for(var i=0; i<numTorus; i++){ tabTorus[i].b.position.z+=text.speed; tabTorus[i].b.rotation.z+=i*text.rotation/10000; if(tabTorus[i].b.position.z>0) { tabTorus[i].b.position.z=-1000; } } } function onWindowResize() { windowHalfX = window.innerWidth / 2; windowHalfY = window.innerHeight / 2; camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize( window.innerWidth, window.innerHeight ); } function onDocumentMouseMove(event) { mouseX = ( event.clientX - windowHalfX ); mouseY = ( event.clientY - windowHalfY ); } function render() { requestAnimationFrame( render); camera.position.x += ( mouseX - camera.position.x ) * .05; camera.position.y += ( - mouseY - camera.position.y ) * .05; renderer.render(scene, camera); update(); } render(); }; </script> <div id='container'></div> </body> </html>\" }, \"style\": { \"border\": \"none\", \"color\": \"rgba(0,0,0,0)\" } } } Tips \u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f IMPORTANT. READ ALL!!!! \u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f 1. Web container content scrolls ONLY when used as a background When you use a web container as a background , it scrolls just fine, and behaves like you would expect. However when you use a web container as a component inside a scrolling view , the content inside does not scroll because the container itself is supposed to scroll. Which brings us to: 2. For component web containers: Must specify height when in scroll view This applies only to component web containers. Every web container must have a fixed height when inside a scroll view (sections). This is so that there exists no scrolling view within a scroll view, which is a bad user experience. { ... \"sections\": [{ \"items\": [{ \"type\": \"html\", \"text\": \"<html>....</html>\", \"style\": { \"height\": \"100\" }, \"action\": { \"type\": \"$default\" } }, { ... }], ... }] } 3. Use single quotes Obviously, an entire HTML markup can be a long text. Sometimes it will contain double quotes and some characters that need to be escaped. Since we're trying to package an entire HTML markup into a text attribute, you'll either need to escape these characters or use single quotes instead of double quotes. 4. Wrap all script content inside window.onload = function() { ... } Because of the way native scroll views recycle their child items, you need to make sure your javascript lines are run AFTER the container has loaded. To do this, wrap your Javascript inside window.onload . Here's an example: { \"type\": \"html\", \"text\": \"<html><head><style>.square{background: red; width: 50px; height: 50px;}</style><script src='https://cdnjs.cloudflare.com/ajax/libs/animejs/2.0.0/anime.min.js'></script><script>var x=200; var move = function() {var el = document.querySelector('#domNode .el'); var domNode = anime({ targets: el, translateX: x, translateY: x}); x=200-x;}; document.addEventListener('DOMContentLoaded', function(event) { setInterval(move, 1000); }); </script><body><div id='domNode'><div class='large square el'></div></div></body></html>\" } 5. By default, the HTML content does NOT respond to user input HTML content inside a web container is NOT interactive by default. This means NOTHING will happen when you touch the contents inside, even if it's a link. (Especially if it's a link, because it would be weird to have a small portion of a native app redirect to a completely different web page) The interaction is disabled by default because the web container is designed as a dynamic output method and NOT as an input method . Web containers are very useful when it comes to displaying rich dynamic content , and this is the primary purpose of the web container. Also, in most cases we want to trigger native actions instead of letting the HTML content handle events. If we allowed HTML to handle user touch for example, then we wouldn't have a way to take advantage of Jasonette's native actions . So whenever possible, use native components such as textarea or textfield to receive user input instead of trying to use the HTML <form> element. Also, keep in mind pure native components generally perform better too. Just use it wisely. That said, there are some cases where it does make sense to let the HTML handle events. In which case you could: Technical Details Under the hood, each web container is a containerized instance of web view. Here are some details: iOS Component type web containers use UIWebView because it's better for usage in a scrollview. Background web containers use WKWebView . It uses the same engine as agents Android Both component type and background type web containers use WebView Component type web containers get recycled when you scroll just like rest of the native components so it's pretty efficient.","title":"\u2605 Web Container"},{"location":"web/#json-web-container","text":"What if you could take any number of web elements, plug them straight into a native app layout, resize, scroll, interact with, and pretty much treat them just like any other native components ? Web Containers are self-contained web views that render into native app layout as native components. Of course, the great part is you can describe them all in JSON, just like the rest of Jasonette components . Web containers are designed to be plugged into a native app layout alongside other native components . As you can see in above example, it's a combination of JSON and HTML. First, use HTML/CSS/Javascript to describe the internals of the container view. Then, plug it into your native app using JSON as just another component .","title":"JSON Web Container"},{"location":"web/#table-of-contents","text":"Notice Web containers in action Features What is possible? Usage","title":"Table of Contents"},{"location":"web/#notice","text":"Before we jump in, just a few things: The web container performs pretty nicely on modern mobile devices, in fact so nicely that sometimes you forget that you're using web containers. But don't go overboard with it. Native will always be more performant and you should use native whenever possible. Try experimenting and you'll reach the sweet spot. A lot of design decisions around Web containers were made specifically for displaying rich dynamic content, which used to be tricky using just native components. Try to think of this as just another component and try not to use the web container to implement app logic. It will most likely result in bad user experience. You can do a lot of cool things with this, such as implementing little animations here and there without having to invent a whole new JSON syntax because you can now just use CSS or Javascript animation. Also you can do things like text overlay over image simply by using CSS positioning. Please share cool use cases you find . This is just the first draft and intentionally minimal. We may add more features depending on how it goes. Feedback appreciated.","title":"Notice"},{"location":"web/#web-containers-in-action","text":"Web containers can be used both as a fullscreen background and as an inline component . Here are some examples: \u00ad \u00ad Anime.js (Mix and match with native) Native feed view + partial web D3.js (Native slider controller + Web container output) Canvas + JS Demo (Background type) Anime.js (Animated HTML element inside native scroll view) Phaser.js (Background type, with user interaction) Three.js (background type) Three.js (background type)","title":"Web Containers in Action"},{"location":"web/#features","text":"","title":"Features"},{"location":"web/#use-alongside-native-components","text":"Web containers plug into native layout alongside other native components so seamlessly that you won't even be able to tell the difference in most cases. It's just like any other component ! Style and use them together with other native Jasonette components.","title":"Use alongside native components"},{"location":"web/#dissolve-right-into-native-layout","text":"Same native layout system you already know.","title":"Dissolve right into native layout"},{"location":"web/#scroll-just-like-other-components","text":"Since it's just like any other component, you can use it in a scroll view, and scroll it just like label, button, image, etc. [Note] This is possible because of the design decision made to make the contents inside a web container NOT scrollable when contained within a scroll view (for obvious UX reasons).","title":"Scroll just like other components"},{"location":"web/#or-use-as-fullscreen-background","text":"Not just for scrolling components. you can use it as a background by setting \"html\" type for background.","title":"Or use as fullscreen background"},{"location":"web/#write-once-use-anywhere","text":"You can use mix-ins to write a single HTML container inside JSON and mix them into any context such as the background or a layout.","title":"Write once, use anywhere"},{"location":"web/#what-is-possible","text":"Since each Web container is basically a self-contained web view, you can do anything you can do with a browser, which includes any HTML markup, Javascript, and CSS styling.","title":"What is possible?"},{"location":"web/#canvas","text":"","title":"Canvas"},{"location":"web/#svg-css","text":"","title":"SVG &amp; CSS"},{"location":"web/#iframe","text":"","title":"iframe"},{"location":"web/#javascript","text":"","title":"Javascript"},{"location":"web/#interaction-between-native-actions-and-web-container","text":"Templates work exactly the same as the rest of Jasonette. So you can use native UI elements as input, set local variables , and re-render accordingly using the local variable to dynamically display output onto the web container.","title":"Interaction between native actions and Web container"},{"location":"web/#mix-and-match","text":"Jasonette already has most of what you need to build sophisticated native apps, even without the web container. But web containers can be powerful when seamlessly blended into the rest of the native app to perform things that were hard to do with existing Jasonette api.","title":"Mix and match"},{"location":"web/#usage","text":"Syntax Examples Important Tips (MUST READ)","title":"Usage"},{"location":"web/#syntax","text":"","title":"Syntax"},{"location":"web/#1-as-component","text":"Just like rest of the Jasonette components , you can plug it into layouts and scroll views(sections) . web containers plugged in everywhere using web container to animate text via JS type : \"html\" text : A self contained HTML text ( <html>...</html> ), which means everything from script tag to style tag. style : Required. Especially the height . Web containers should NOT scroll, therefore everything outside of the style.height you specify will get cut off. This attribute is about how the web container looks from the outside. To style the HTML elements inside, just include the CSS inside the HTML markup. action : (optional) Connect with any action or a web container specific action: \"type\": \"$default\" . [IMPORTANT] By default, web container content DOES NOT respond to user touch. This means if you click on a link inside the HTML, it won't do anything. In order to override this behavior, attach a \"type\": \"$default\" action, so the web container knows. { \"items\": [{ \"type\": \"html\", \"text\": \"<html>....</html>\", \"style\": { \"height\": \"100\" }, \"action\": { \"type\": \"$default\" } }] }","title":"1. As Component"},{"location":"web/#2-as-background","text":"Web containers can be plugged into body.style.background too, which will take up the full screen. Use any JS library Interacting with HTML content via touch Same as component usage, except there's no need for style , and you can't attache an action other than \"type\": \"$default\" . type : \"html\" url : URL to load ( http:// , https:// , file:// supported) text : A self contained HTML text ( <html>...</html> ), which means everything from script tag to style tag. style : styling the web container background : Background color progress : The progressbar color. The background web container comes with a progressbar which displays the loading progress whenever a web page loads. Use this property to change its color (Ex: \"#ff0000\" , rgb(255,0,0) , rgba(255,0,0,0.5) ) action : (optional) Connect with \"type\": \"$default\" in order to let the web container handle the touch event. Otherwise not needed. [IMPORTANT] By default, web container content DOES NOT respond to user touch. This means if you click on a link inside the HTML, it won't do anything. In order to override this behavior, attach a \"type\": \"$default\" action, so the web container knows. Using a raw html text approach: { \"body\": { \"background\": { \"type\": \"html\", \"text\": \"<html>....</html>\", \"action\": { \"type\": \"$default\" } } } } { \"body\": { \"background\": { \"type\": \"html\", \"url\": \"https://www.google.com\", \"action\": { \"type\": \"$default\" } } } }","title":"2. As Background"},{"location":"web/#in-depth-on-background-web-container","text":"The background web container is a different beast than the component web containers. Whereas component web containers are purely meant for display purposes, the background web container can do a lot of things.","title":"In-Depth on Background web container"},{"location":"web/#1-background-web-container-is-an-agent","text":"The background web container ( $jason.body.background ) is an agent. It's a special type of agent, but it's still powered by the same agent engine. This means you can make JSON-RPC calls into the web container and let it have seamless 2-way communications with native Jasonette core. But first, if you aren't aware of how agents work, check out the agent documentation and come back. Back? A couple of things to note that makes web containers special: Unlike other agents which are invisible, web container is visible (Obviously. That's what web containers are for) Web container is a special type of agent. There can be only ONE per view (the $jason.body.background ) Unlike other \"virtual\" agents where you declare them under $jason.head.agents , you declare them just like any other body background. ( $jason.body.background ) Other agents require an id , which you set under $jason.head.agents . Web container doesn't require an ID. It's automatically set to $webcontainer . This means when you're making JSON-RPC calls into the web container, you will use $webcontainer as its ID, like this: { \"$jason\": { \"head\": { \"title\": \"Web Container Agent Demo\", \"actions\": { \"$load\": { \"type\": \"$agent.request\", \"options\": { \"id\": \"$webcontainer\", \"method\": \"add\", \"params\": [\"a\", \"b\"] } } } }, \"body\": { \"background\": { \"type\": \"html\", \"url\": \"file://app.html\" } } } }","title":"1. Background Web Container is an Agent"},{"location":"web/#2-user-interaction","text":"Depending on what you specify as the action attribute, you can make your web container behave in many different ways.","title":"2. User Interaction"},{"location":"web/#a-block-user-interaction","text":"By default (if you don't specify any action attribute) users can't interact with web containers. In this case, you use it for view only purposes. This may be necessary if you just want to use web container as a \"display\" and don't want users to interact with it. you don't want any scrolling behavior within the web container. This may conflict with the native view's own scroll view.","title":"A. Block user interaction"},{"location":"web/#b-intercept-url-visits","text":"To intercept URL visits, you simply need to define an action attribute. When you do so, users can interact with the web container. any attempt of the user trying to navigate away from the view (by clicking a link for example) will be intercepted. When intercepted, it will make the action call specified under body.background.action instead of actually navigating away. When the action is called, the web container will pass the following payload: { \"$jason\": { \"url\": [The link the user was trying to navigate to] } } Here's an example: { \"$jason\": { \"head\": { \"title\": \"Web Container Agent\", \"actions\": { \"notify\": { \"type\": \"$utill.alert\", \"options\": { \"title\": \"Link Clicked\", \"description\": \"You just clicked {{$jason.url}}\" } } } }, \"body\": { \"background\": { \"type\": \"html\", \"url\": \"file://app.html\", \"id\": \"app\", \"action\": { \"trigger\": \"notify\" } } } } } In this case, the body.background has an action attribute, so it means users can interact with the web container. When the user clicks any link on the page, it will trigger an action called \"notify\" . The notify action (specified under $jason.head.actions.notify ) will open an alert displaying the URL the user tried to navigate to.","title":"B. Intercept URL visits"},{"location":"web/#c-or-dont-intercept","text":"Or you may want users to interact with the web container, but instead of intercepting, just let it behave like a plain web browser (just letting users visit new links) You can do this by setting the action to \"type\": \"$default\" { \"type\": \"$agent.connect\", \"options\": { \"url\": \"file://app.html\", \"id\": \"app\", \"action\": { \"type\": \"$default\" } } }","title":"C. Or don't intercept."},{"location":"web/#intercepting-a-url-visit-and-doing-a-native-transition","text":"Using the interception approach you can intercept a user's intent to visit a link, and instead of doing a clumsy web-like page refresh, you can native transition into another Jason view with another web page contained in a web container. file://native_transition.json { \"$jason\": { \"head\": { \"title\": \"Web Container Native Transition\", \"actions\": { \"$load\": { \"type\": \"$set\", \"options\": { \"url\": [{ \"{{#if $params && 'url' in $params}}\": \"{{$params.url}}\" }, { \"{{#else}}\": \"https://www.google.com\" }] }, \"success\": { \"type\": \"$render\" } }, \"navigate\": { \"type\": \"$href\", \"options\": { \"url\": \"file://native_transition.json\", \"options\": { \"url\": \"{{$jason.url}}\" } } } }, \"templates\": { \"body\": { \"background\": { \"type\": \"html\", \"url\": \"{{$get.url}}\", \"action\": { \"trigger\": \"navigate\" } } } } } } } With the agent and its URL interception feature, now you can have a seamless interaction between the web container and its parent native app. Normally when you click a link in an HTML document, it refreshes the page to send you to the linked page. This is in fact one of the primary reasons why HTML5 hybrid app approaches feel so clunky. But now HTML documents loaded within a web container can: Trigger a native action Make a native transition to another view","title":"Intercepting a URL visit and doing a native transition"},{"location":"web/#example","text":"","title":"Example"},{"location":"web/#display-scrolling-h1-elements","text":"{ \"$jason\": { \"head\": { \"title\": \"Scrolling Web Container\" \"data\": { \"colors\": [{ \"code\": \"#ff0000\" }, { \"code\": \"rgba(0,0,0,0.3)\" }, { \"code\": \"#00ff00\" }, { \"code\": \"rgb(130,43,32)\" }] }, \"templates\": { \"body\": { \"sections\": [{ \"items\": { \"{{#each colors}}\": { \"type\": \"html\", \"style\": { \"height\": \"50\" }, \"text\": \"<html><head><style>h1{font-size: 30px; color: {{code}};}</style></head><body><h1>Hello World</h1></body></html>\" } } }] } } } } }","title":"Display scrolling H1 elements"},{"location":"web/#iframe-as-background","text":"{ \"$jason\": { \"head\": { \"title\": \"pdf.js\" }, \"body\": { \"background\": { \"type\": \"html\", \"text\": \"<html><head><style>html{padding:0;margin:0;margin-top: 64px;} body,iframe{width:100%;height:100%;padding:0;margin:0;border:0;}</style><body><iframe src='https://mozilla.github.io/pdf.js/web/viewer.html'/></body></html>\" } } } }","title":"iframe as background"},{"location":"web/#threejs-as-background","text":"{ \"$jason\": { \"head\": { \"title\": \"pdf.js\" }, \"body\": { \"background\": { \"type\": \"html\", \"text\": \"<html> <head> <style> body { margin: 0; padding: 0; background: #111; overflow: hidden; } .dg{visibility: hidden;}</style> </head> <body> <script src='https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js'></script><script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script><script src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r50/three.min.js'></script><script> window.onload = function(){ var $container = $('#container'); var renderer = new THREE.WebGLRenderer({antialias: true}); var camera = new THREE.PerspectiveCamera(80,window.innerWidth/window.innerHeight,0.1,10000); var scene = new THREE.Scene(); var mouseX = 0, mouseY = 0; scene.add(camera); renderer.setSize(window.innerWidth, window.innerHeight); $container.append(renderer.domElement); window.addEventListener( 'resize', onWindowResize, false ); var Controls = function() { this.speed = 2; this.rotation = 0; }; var text = new Controls(), gui = new dat.GUI(); gui.add(text, 'speed', 0, 10); gui.add(text, 'rotation',0,15); var normalMaterial = new THREE.MeshNormalMaterial({}); function Torus(f){ this.b = new THREE.Mesh(new THREE.TorusGeometry( 160, 75, 2, 13),normalMaterial); this.b.position.x = 57*Math.cos(f); this.b.position.y = 57*Math.sin(f); this.b.position.z = f*1.25; this.b.rotation.z = f*0.03; } var numTorus = 80; var tabTorus = []; for(var i=0; i<numTorus; i++){ tabTorus.push(new Torus(-i*13)); scene.add(tabTorus[i].b); } function update(){ for(var i=0; i<numTorus; i++){ tabTorus[i].b.position.z+=text.speed; tabTorus[i].b.rotation.z+=i*text.rotation/10000; if(tabTorus[i].b.position.z>0) { tabTorus[i].b.position.z=-1000; } } } function onWindowResize() { windowHalfX = window.innerWidth / 2; windowHalfY = window.innerHeight / 2; camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize( window.innerWidth, window.innerHeight ); } function onDocumentMouseMove(event) { mouseX = ( event.clientX - windowHalfX ); mouseY = ( event.clientY - windowHalfY ); } function render() { requestAnimationFrame( render); camera.position.x += ( mouseX - camera.position.x ) * .05; camera.position.y += ( - mouseY - camera.position.y ) * .05; renderer.render(scene, camera); update(); } render(); }; </script> <div id='container'></div> </body> </html>\" }, \"style\": { \"border\": \"none\", \"color\": \"rgba(0,0,0,0)\" } } }","title":"three.js as background"},{"location":"web/#tips","text":"\u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f IMPORTANT. READ ALL!!!! \u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f","title":"Tips"},{"location":"web/#1-web-container-content-scrolls-only-when-used-as-a-background","text":"When you use a web container as a background , it scrolls just fine, and behaves like you would expect. However when you use a web container as a component inside a scrolling view , the content inside does not scroll because the container itself is supposed to scroll. Which brings us to:","title":"1. Web container content scrolls ONLY when used as a background"},{"location":"web/#2-for-component-web-containers-must-specify-height-when-in-scroll-view","text":"This applies only to component web containers. Every web container must have a fixed height when inside a scroll view (sections). This is so that there exists no scrolling view within a scroll view, which is a bad user experience. { ... \"sections\": [{ \"items\": [{ \"type\": \"html\", \"text\": \"<html>....</html>\", \"style\": { \"height\": \"100\" }, \"action\": { \"type\": \"$default\" } }, { ... }], ... }] }","title":"2. For component web containers: Must specify height when in scroll view"},{"location":"web/#3-use-single-quotes","text":"Obviously, an entire HTML markup can be a long text. Sometimes it will contain double quotes and some characters that need to be escaped. Since we're trying to package an entire HTML markup into a text attribute, you'll either need to escape these characters or use single quotes instead of double quotes.","title":"3. Use single quotes"},{"location":"web/#4-wrap-all-script-content-inside-windowonload-function","text":"Because of the way native scroll views recycle their child items, you need to make sure your javascript lines are run AFTER the container has loaded. To do this, wrap your Javascript inside window.onload . Here's an example: { \"type\": \"html\", \"text\": \"<html><head><style>.square{background: red; width: 50px; height: 50px;}</style><script src='https://cdnjs.cloudflare.com/ajax/libs/animejs/2.0.0/anime.min.js'></script><script>var x=200; var move = function() {var el = document.querySelector('#domNode .el'); var domNode = anime({ targets: el, translateX: x, translateY: x}); x=200-x;}; document.addEventListener('DOMContentLoaded', function(event) { setInterval(move, 1000); }); </script><body><div id='domNode'><div class='large square el'></div></div></body></html>\" }","title":"4. Wrap all script content inside window.onload = function() { ... }"},{"location":"web/#5-by-default-the-html-content-does-not-respond-to-user-input","text":"HTML content inside a web container is NOT interactive by default. This means NOTHING will happen when you touch the contents inside, even if it's a link. (Especially if it's a link, because it would be weird to have a small portion of a native app redirect to a completely different web page) The interaction is disabled by default because the web container is designed as a dynamic output method and NOT as an input method . Web containers are very useful when it comes to displaying rich dynamic content , and this is the primary purpose of the web container. Also, in most cases we want to trigger native actions instead of letting the HTML content handle events. If we allowed HTML to handle user touch for example, then we wouldn't have a way to take advantage of Jasonette's native actions . So whenever possible, use native components such as textarea or textfield to receive user input instead of trying to use the HTML <form> element. Also, keep in mind pure native components generally perform better too. Just use it wisely. That said, there are some cases where it does make sense to let the HTML handle events. In which case you could:","title":"5. By default, the HTML content does NOT respond to user input"},{"location":"web/#technical-details","text":"Under the hood, each web container is a containerized instance of web view. Here are some details: iOS Component type web containers use UIWebView because it's better for usage in a scrollview. Background web containers use WKWebView . It uses the same engine as agents Android Both component type and background type web containers use WebView Component type web containers get recycled when you scroll just like rest of the native components so it's pretty efficient.","title":"Technical Details"}]}